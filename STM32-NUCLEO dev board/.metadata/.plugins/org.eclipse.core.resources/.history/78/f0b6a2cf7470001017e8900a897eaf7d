/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "mcp2515.h"
#include <string.h>
#include <stdio.h>


/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define DHT11_RESPONSE_TIMEOUT_US 100 // Max time to wait for sensor response
#define DHT11_BIT_READ_TIMEOUT_US 100 // Max time to wait for a bit to be transmitted
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;

I2C_HandleTypeDef hi2c1;

SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
uint8_t RHR_Byte1, RHR_Byte2, TEMP_Byte1, TEMP_Byte2, Sum_Check_Byte; // Raw data from DHT11
uint8_t CheckSum; // Calculated checksum

volatile float Temperature = 0.0f; // Stores temperature in Celsius
volatile float Humidity = 0.0f;    // Stores humidity in percentage

// Flag to indicate if data was successfully read
volatile uint8_t DHT11_Data_OK = 0;

MCP2515_Handle hcan_tx =
{
		.hspi = &hspi3,
		.cs_port = MCP2515_CS_TX_GPIO_Port,
		.cs_pin = MCP2515_CS_TX_Pin
};

MCP2515_Handle hcan_rx =
{
		.hspi = &hspi1,
		.cs_port = MCP2515_CS_RX_GPIO_Port,
		.cs_pin = MCP2515_CS_RX_Pin
};

CAN_Message tx_msg = {
    .id = 0x123,
    .dlc = 4,
    .data = {0x00, 0x00, 0x00, 0x00} // Initialize to 0, will update with ADC
};

CAN_Message rx_msg = {0};

char buf[128];

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_I2C1_Init(void);
static void MX_SPI1_Init(void);
static void MX_SPI3_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM2_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */

void Set_DHT11_GPIO_Output(void);
void Set_DHT11_GPIO_Input(void);
void DHT11_Start(void);
uint8_t DHT11_Check_Response(void);
uint8_t DHT11_Read_Byte(void);
void DHT11_Read_Data(void);

void MPU6050_Init(void) {
    uint8_t check;
    uint8_t Data;

    // Check device ID
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR << 1, WHO_AM_I_REG, 1, &check, 1, 1000);

    if (check == 0x68) { // Correct device ID
        // Power Management 1 register - wake up MPU-6050
        Data = 0;
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR << 1, PWR_MGMT_1_REG, 1, &Data, 1, 1000);

        // Sample Rate Divider - Set to 1kHz
        Data = 0x07;
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR << 1, SMPLRT_DIV_REG, 1, &Data, 1, 1000);

        // Configuration register - Set Digital Low Pass Filter to 26Hz
        Data = 0x03;
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR << 1, CONFIG_REG, 1, &Data, 1, 1000);

        // Gyroscope Configuration - Set Full Scale Range to +/- 500 deg/s
        Data = 0x08;
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR << 1, GYRO_CONFIG_REG, 1, &Data, 1, 1000);

        // Accelerometer Configuration - Set Full Scale Range to +/- 8g
        Data = 0x08;
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR << 1, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
    }
}


typedef struct {
    int16_t Accel_X, Accel_Y, Accel_Z;
    int16_t Gyro_X, Gyro_Y, Gyro_Z;
} MPU6050_t;

MPU6050_t MPU6050_Data;

void MPU6050_Read_All() {
    uint8_t Rx_Data[14];
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR << 1, ACCEL_XOUT_H_REG, 1, Rx_Data, 14, 1000);

    // Combine high and low bytes to get 16-bit values
    MPU6050_Data.Accel_X = (int16_t)(Rx_Data[0] << 8 | Rx_Data[1]);
    MPU6050_Data.Accel_Y = (int16_t)(Rx_Data[2] << 8 | Rx_Data[3]);
    MPU6050_Data.Accel_Z = (int16_t)(Rx_Data[4] << 8 | Rx_Data[5]);
    MPU6050_Data.Gyro_X = (int16_t)(Rx_Data[8] << 8 | Rx_Data[9]);
    MPU6050_Data.Gyro_Y = (int16_t)(Rx_Data[10] << 8 | Rx_Data[11]);
    MPU6050_Data.Gyro_Z = (int16_t)(Rx_Data[12] << 8 | Rx_Data[13]);
}

int __io_putchar(int ch)
{
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
    return ch;
}

void UART_Print(const char *str)
{
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
}

uint32_t Read_ADC_Value(ADC_HandleTypeDef *hadc)
{
    HAL_ADC_Start(hadc);
    HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
    uint32_t adc_value = HAL_ADC_GetValue(hadc);
    HAL_ADC_Stop(hadc);
    return adc_value;
}

void Update_PWM_Brightness(TIM_HandleTypeDef *htim, uint32_t channel, uint32_t adc_value)
{
    uint32_t pwm_pulse_value = adc_value / 4; // Scale 0–4095 to 0–1023 for PWM
    __HAL_TIM_SET_COMPARE(htim, channel, pwm_pulse_value);
}
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Function to set DHT11 Data pin as Output
void Set_DHT11_GPIO_Output(void)
{
    GPIO_InitTypeDef GPIO_InitStruct = {0};
    GPIO_InitStruct.Pin = DHT11_DATA_Pin; // Assuming DHT11_DATA_Pin is defined for PA8
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW; // Low speed is fine for output
    HAL_GPIO_Init(DHT11_DATA_GPIO_Port, &GPIO_InitStruct);
}

// Function to set DHT11 Data pin as Input
void Set_DHT11_GPIO_Input(void)
{
    GPIO_InitTypeDef GPIO_InitStruct = {0};
    GPIO_InitStruct.Pin = DHT11_DATA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL; // Pull-up should be external 10k resistor
    HAL_GPIO_Init(DHT11_DATA_GPIO_Port, &GPIO_InitStruct);
}

// Send start signal to DHT11
void DHT11_Start(void)
{
    Set_DHT11_GPIO_Output(); // Set pin as output
    HAL_GPIO_WritePin(DHT11_DATA_GPIO_Port, DHT11_DATA_Pin, GPIO_PIN_RESET); // Pull low
    HAL_Delay(18); // Wait for at least 18ms (DHT11 datasheet min 18ms)
    HAL_GPIO_WritePin(DHT11_DATA_GPIO_Port, DHT11_DATA_Pin, GPIO_PIN_SET);  // Pull high
    __HAL_TIM_SET_COUNTER(&htim2, 0); // Reset timer
    while (__HAL_TIM_GET_COUNTER(&htim2) < 20); // Wait 20-40us (we'll use 20us here)
    Set_DHT11_GPIO_Input(); // Set pin as input to listen for sensor response
}

// Check DHT11 response signal
uint8_t DHT11_Check_Response(void)
{
    uint32_t Timeout_Start = __HAL_TIM_GET_COUNTER(&htim2); // Start timeout for response

    // Wait for DHT11 to pull low (80us approx)
    while (HAL_GPIO_ReadPin(DHT11_DATA_GPIO_Port, DHT11_DATA_Pin) == GPIO_PIN_RESET)
    {
        if ((__HAL_TIM_GET_COUNTER(&htim2) - Timeout_Start) > DHT11_RESPONSE_TIMEOUT_US) return 0; // Timeout
    }

    Timeout_Start = __HAL_TIM_GET_COUNTER(&htim2); // Reset timeout for next phase
    // Wait for DHT11 to pull high (80us approx)
    while (HAL_GPIO_ReadPin(DHT11_DATA_GPIO_Port, DHT11_DATA_Pin) == GPIO_PIN_SET)
    {
        if ((__HAL_TIM_GET_COUNTER(&htim2) - Timeout_Start) > DHT11_RESPONSE_TIMEOUT_US) return 0; // Timeout
    }
    return 1; // Response received
}

// Read a single byte (8 bits) from DHT11
uint8_t DHT11_Read_Byte(void)
{
    uint8_t i, data = 0;
    for (i = 0; i < 8; i++)
    {
        uint32_t Timeout_Start = __HAL_TIM_GET_COUNTER(&htim2);
        // Wait for low pulse (50us approx)
        while (HAL_GPIO_ReadPin(DHT11_DATA_GPIO_Port, DHT11_DATA_Pin) == GPIO_PIN_RESET)
        {
            if ((__HAL_TIM_GET_COUNTER(&htim2) - Timeout_Start) > DHT11_BIT_READ_TIMEOUT_US) return 0; // Timeout
        }

        Timeout_Start = __HAL_TIM_GET_COUNTER(&htim2); // Start timer to measure high pulse duration
        // Wait for high pulse (26-28us for '0', 70us for '1')
        while (HAL_GPIO_ReadPin(DHT11_DATA_GPIO_Port, DHT11_DATA_Pin) == GPIO_PIN_SET)
        {
            if ((__HAL_TIM_GET_COUNTER(&htim2) - Timeout_Start) > DHT11_BIT_READ_TIMEOUT_US) return 0; // Timeout
        }

        // Determine if bit is 0 or 1 based on high pulse duration
        data <<= 1; // Shift left to make space for the new bit
        if ((__HAL_TIM_GET_COUNTER(&htim2) - Timeout_Start) > 40) // If high pulse > 40us, it's a '1'
        {
            data |= 1; // Set the last bit to 1
        }
    }
    return data;
}

// Read all 40 bits of data from DHT11
void DHT11_Read_Data(void)
{
    DHT11_Data_OK = 0; // Reset success flag

    // Start communication sequence
    DHT11_Start();

    // Check for sensor response
    if (DHT11_Check_Response())
    {
        // Read 5 bytes of data
        RHR_Byte1 = DHT11_Read_Byte();  // Humidity integer part
        RHR_Byte2 = DHT11_Read_Byte();  // Humidity decimal part (often 0 for DHT11)
        TEMP_Byte1 = DHT11_Read_Byte(); // Temperature integer part
        TEMP_Byte2 = DHT11_Read_Byte(); // Temperature decimal part (often 0 for DHT11)
        Sum_Check_Byte = DHT11_Read_Byte(); // Checksum byte

        printf("Raw: H1=%d, H2=%d, T1=%d, T2=%d, Sum=%d, Check=%d\r\n", RHR_Byte1, RHR_Byte2, TEMP_Byte1, TEMP_Byte2, Sum_Check_Byte, CheckSum);
        // Calculate checksum
        CheckSum = RHR_Byte1 + RHR_Byte2 + TEMP_Byte1 + TEMP_Byte2;

        // Verify checksum
        if (CheckSum == Sum_Check_Byte)
        {
            // Data is valid!
            Humidity = RHR_Byte1 + (float)RHR_Byte2 / 10.0f; // DHT11 typically only integer for DHT11
            Temperature = TEMP_Byte1 + (float)TEMP_Byte2 / 10.0f; // DHT11 typically only integer for DHT11

            // Handle negative temperature for DHT11 (bit 7 of TEMP_Byte1 is 1)
            // For DHT11, Temp_Byte1 is usually the integer part, TEMP_Byte2 is decimal (often 0)
            // If the highest bit (bit 7) of TEMP_Byte1 is 1, it indicates negative temp.
            // The actual temp is (TEMP_Byte1 & 0x7F).
            // This is specific to DHT11. DHT22 has 16-bit signed temp.
            if (TEMP_Byte1 & 0x80) // Check if the MSB is set for negative temperature
            {
                 Temperature = -((TEMP_Byte1 & 0x7F) + (float)TEMP_Byte2 / 10.0f);
            }
            else
            {
                Temperature = TEMP_Byte1 + (float)TEMP_Byte2 / 10.0f;
            }

            DHT11_Data_OK = 1; // Set success flag
        }
    }
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_I2C1_Init();
  MX_SPI1_Init();
  MX_SPI3_Init();
  MX_TIM1_Init();
  MX_TIM2_Init();
  MX_ADC1_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
  MPU6050_Init();
  printf("MPU-6050 Initialized!\n");

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* USER CODE END WHILE */
	  MPU6050_Read_All();
	  printf("Accel: X=%d, Y=%d, Z=%d | Gyro: X=%d, Y=%d, Z=%d\r\n",
			 MPU6050_Data.Accel_X, MPU6050_Data.Accel_Y, MPU6050_Data.Accel_Z,
			 MPU6050_Data.Gyro_X, MPU6050_Data.Gyro_Y, MPU6050_Data.Gyro_Z);
	  HAL_Delay(100);

	  DHT11_Read_Data(); // Perform the DHT11 reading

	if (DHT11_Data_OK)
	{
		// Print the temperature and humidity to the serial monitor
		printf("Temperature: %.1f C, Humidity: %.1f %%\r\n", Temperature, Humidity);

	}
	else
	{
		printf("DHT11 Error: No response or Checksum mismatch!\r\n");
	}

	HAL_Delay(2000); // Wait 2 seconds before next reading (DHT11 min 1-2 seconds between reads)

	//initializing MCP2515 Transmission
	  uint32_t adc_value = Read_ADC_Value(&hadc1);

	  // Prepare CAN message with ADC value
	  tx_msg.data[0] = (adc_value >> 8) & 0xFF; // High byte
	  tx_msg.data[1] = adc_value & 0xFF;        // Low byte
	  tx_msg.data[2] = 0x00;                    // Unused
	  tx_msg.data[3] = 0x00;                    // Unused

	  UART_Print("Sending CAN message...\r\n");
	  MCP2515_Transmit(&hcan_tx, &tx_msg);
	  HAL_Delay(100);

	  // Check for received message
	  CAN_Message rx_msg = {0};
	  if (MCP2515_Receive(&hcan_rx, &rx_msg))
	  {
		  uint32_t received_adc = (rx_msg.data[0] << 8) | rx_msg.data[1];
		  Update_PWM_Brightness(&htim1, TIM_CHANNEL_3, received_adc);
		  sprintf(buf, "Received CAN ID: 0x%03lX, DLC: %d, Data: ", rx_msg.id, rx_msg.dlc);
		  UART_Print(buf);

		  for (uint8_t i = 0; i < rx_msg.dlc; i++)
		  {
			  sprintf(buf, "%02X ", rx_msg.data[i]);
			  UART_Print(buf);
		  }
		  UART_Print("\r\n");
	  }
	  // Print ADC and PWM values for debugging
	  uint32_t pwm_pulse_value = adc_value / 4;
	  sprintf(buf, "ADC Value: %lu, PWM value: %lu\r\n", adc_value, pwm_pulse_value);
	  UART_Print(buf);

	  /* USER CODE BEGIN 3 */
	}
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 180;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
  hspi3.Init.Mode = SPI_MODE_MASTER;
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi3.Init.NSS = SPI_NSS_SOFT;
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi3.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 179;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 999;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 1000;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 89;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 4294967295;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_DATA_GPIO_Port, DHT11_DATA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCP2515_CS_TX_GPIO_Port, MCP2515_CS_TX_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCP2515_CS_RX_GPIO_Port, MCP2515_CS_RX_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : DHT11_DATA_Pin */
  GPIO_InitStruct.Pin = DHT11_DATA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(DHT11_DATA_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : MCP2515_CS_TX_Pin */
  GPIO_InitStruct.Pin = MCP2515_CS_TX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(MCP2515_CS_TX_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : MCP2515_CS_RX_Pin */
  GPIO_InitStruct.Pin = MCP2515_CS_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(MCP2515_CS_RX_GPIO_Port, &GPIO_InitStruct);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
#ifdef USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

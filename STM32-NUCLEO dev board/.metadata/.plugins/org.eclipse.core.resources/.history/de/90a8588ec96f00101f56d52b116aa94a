#include "main.h"
#include "mcp2515.h"
#include <stdio.h>
#include <string.h>

extern SPI_HandleTypeDef hspi1; // SPI1 for Receiver
extern SPI_HandleTypeDef hspi3; // SPI3 for Transmitter
extern UART_HandleTypeDef huart2; // UART2 for debug

// MCP2515 Handles
MCP2515_Handle hcan_tx = {
    .hspi = &hspi3,
    .cs_port = GPIOA,
    .cs_pin = GPIO_PIN_4
};

MCP2515_Handle hcan_rx = {
    .hspi = &hspi1,
    .cs_port = GPIOB,
    .cs_pin = GPIO_PIN_6
};

// Debug print function
void UART_Print(const char *str) {
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
}

int main(void) {
    HAL_Init();
    SystemClock_Config();
    MX_GPIO_Init();
    MX_SPI1_Init();
    MX_SPI3_Init();
    MX_USART2_UART_Init();

    // Initialize MCP2515 modules
    UART_Print("Initializing MCP2515 Transmitter (SPI3)...\r\n");
    MCP2515_Init(&hcan_tx, 500000); // 500 kbps
    UART_Print("Initializing MCP2515 Receiver (SPI1)...\r\n");
    MCP2515_Init(&hcan_rx, 500000); // 500 kbps

    // Test message
    CAN_Message tx_msg = {
        .id = 0x123,        // CAN ID
        .dlc = 4,           // 4 bytes
        .data = {0xAA, 0xBB, 0xCC, 0xDD}
    };

    char buf[64];
    while (1) {
        // Transmit message every 1 second
        UART_Print("Sending CAN message...\r\n");
        MCP2515_Transmit(&hcan_tx, &tx_msg);
        HAL_Delay(1000);

        // Check for received message
        CAN_Message rx_msg = {0};
        if (MCP2515_Receive(&hcan_rx, &rx_msg)) {
            sprintf(buf, "Received CAN ID: 0x%03X, DLC: %d, Data: ", rx_msg.id, rx_msg.dlc);
            UART_Print(buf);
            for (uint8_t i = 0; i < rx_msg.dlc; i++) {
                sprintf(buf, "%02X ", rx_msg.data[i]);
                UART_Print(buf);
            }
            UART_Print("\r\n");
        }
    }
}

// Override _write for printf
int _write(int file, char *ptr, int len) {
    HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
    return len;
}

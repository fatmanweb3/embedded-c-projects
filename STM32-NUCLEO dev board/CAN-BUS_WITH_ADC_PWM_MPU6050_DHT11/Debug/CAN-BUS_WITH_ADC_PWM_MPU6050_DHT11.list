
CAN-BUS_WITH_ADC_PWM_MPU6050_DHT11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd4c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006dc  0800bf20  0800bf20  0000cf20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5fc  0800c5fc  0000e1ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c5fc  0800c5fc  0000d5fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c604  0800c604  0000e1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c604  0800c604  0000d604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c608  0800c608  0000d608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800c60c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000444  200001ec  0800c7f8  0000e1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000630  0800c7f8  0000e630  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d3f  00000000  00000000  0000e21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002902  00000000  00000000  00021f5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001398  00000000  00000000  00024860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f75  00000000  00000000  00025bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000251c3  00000000  00000000  00026b6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017cdf  00000000  00000000  0004bd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e40f5  00000000  00000000  00063a0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00147b04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069e8  00000000  00000000  00147b48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ca  00000000  00000000  0014e530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001ec 	.word	0x200001ec
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bf04 	.word	0x0800bf04

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f0 	.word	0x200001f0
 800020c:	0800bf04 	.word	0x0800bf04

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9be 	b.w	800105c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	468e      	mov	lr, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	4688      	mov	r8, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d962      	bls.n	8000e40 <__udivmoddi4+0xdc>
 8000d7a:	fab2 f682 	clz	r6, r2
 8000d7e:	b14e      	cbz	r6, 8000d94 <__udivmoddi4+0x30>
 8000d80:	f1c6 0320 	rsb	r3, r6, #32
 8000d84:	fa01 f806 	lsl.w	r8, r1, r6
 8000d88:	fa20 f303 	lsr.w	r3, r0, r3
 8000d8c:	40b7      	lsls	r7, r6
 8000d8e:	ea43 0808 	orr.w	r8, r3, r8
 8000d92:	40b4      	lsls	r4, r6
 8000d94:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d98:	fa1f fc87 	uxth.w	ip, r7
 8000d9c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000da0:	0c23      	lsrs	r3, r4, #16
 8000da2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000da6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000daa:	fb01 f20c 	mul.w	r2, r1, ip
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000db8:	f080 80ea 	bcs.w	8000f90 <__udivmoddi4+0x22c>
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	f240 80e7 	bls.w	8000f90 <__udivmoddi4+0x22c>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	443b      	add	r3, r7
 8000dc6:	1a9a      	subs	r2, r3, r2
 8000dc8:	b2a3      	uxth	r3, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dd6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dda:	459c      	cmp	ip, r3
 8000ddc:	d909      	bls.n	8000df2 <__udivmoddi4+0x8e>
 8000dde:	18fb      	adds	r3, r7, r3
 8000de0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de4:	f080 80d6 	bcs.w	8000f94 <__udivmoddi4+0x230>
 8000de8:	459c      	cmp	ip, r3
 8000dea:	f240 80d3 	bls.w	8000f94 <__udivmoddi4+0x230>
 8000dee:	443b      	add	r3, r7
 8000df0:	3802      	subs	r0, #2
 8000df2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df6:	eba3 030c 	sub.w	r3, r3, ip
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11d      	cbz	r5, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40f3      	lsrs	r3, r6
 8000e00:	2200      	movs	r2, #0
 8000e02:	e9c5 3200 	strd	r3, r2, [r5]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d905      	bls.n	8000e1a <__udivmoddi4+0xb6>
 8000e0e:	b10d      	cbz	r5, 8000e14 <__udivmoddi4+0xb0>
 8000e10:	e9c5 0100 	strd	r0, r1, [r5]
 8000e14:	2100      	movs	r1, #0
 8000e16:	4608      	mov	r0, r1
 8000e18:	e7f5      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e1a:	fab3 f183 	clz	r1, r3
 8000e1e:	2900      	cmp	r1, #0
 8000e20:	d146      	bne.n	8000eb0 <__udivmoddi4+0x14c>
 8000e22:	4573      	cmp	r3, lr
 8000e24:	d302      	bcc.n	8000e2c <__udivmoddi4+0xc8>
 8000e26:	4282      	cmp	r2, r0
 8000e28:	f200 8105 	bhi.w	8001036 <__udivmoddi4+0x2d2>
 8000e2c:	1a84      	subs	r4, r0, r2
 8000e2e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e32:	2001      	movs	r0, #1
 8000e34:	4690      	mov	r8, r2
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d0e5      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e3a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e3e:	e7e2      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	f000 8090 	beq.w	8000f66 <__udivmoddi4+0x202>
 8000e46:	fab2 f682 	clz	r6, r2
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	f040 80a4 	bne.w	8000f98 <__udivmoddi4+0x234>
 8000e50:	1a8a      	subs	r2, r1, r2
 8000e52:	0c03      	lsrs	r3, r0, #16
 8000e54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e58:	b280      	uxth	r0, r0
 8000e5a:	b2bc      	uxth	r4, r7
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e62:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e6a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x11e>
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x11c>
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	f200 80e0 	bhi.w	8001040 <__udivmoddi4+0x2dc>
 8000e80:	46c4      	mov	ip, r8
 8000e82:	1a9b      	subs	r3, r3, r2
 8000e84:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e88:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e8c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e90:	fb02 f404 	mul.w	r4, r2, r4
 8000e94:	429c      	cmp	r4, r3
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0x144>
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x142>
 8000ea0:	429c      	cmp	r4, r3
 8000ea2:	f200 80ca 	bhi.w	800103a <__udivmoddi4+0x2d6>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000eae:	e7a5      	b.n	8000dfc <__udivmoddi4+0x98>
 8000eb0:	f1c1 0620 	rsb	r6, r1, #32
 8000eb4:	408b      	lsls	r3, r1
 8000eb6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eba:	431f      	orrs	r7, r3
 8000ebc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ec0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ec4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ec8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ecc:	4323      	orrs	r3, r4
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	fa1f fc87 	uxth.w	ip, r7
 8000ed6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eda:	0c1c      	lsrs	r4, r3, #16
 8000edc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ee0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ee4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	fa02 f201 	lsl.w	r2, r2, r1
 8000eee:	d909      	bls.n	8000f04 <__udivmoddi4+0x1a0>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ef6:	f080 809c 	bcs.w	8001032 <__udivmoddi4+0x2ce>
 8000efa:	45a6      	cmp	lr, r4
 8000efc:	f240 8099 	bls.w	8001032 <__udivmoddi4+0x2ce>
 8000f00:	3802      	subs	r0, #2
 8000f02:	443c      	add	r4, r7
 8000f04:	eba4 040e 	sub.w	r4, r4, lr
 8000f08:	fa1f fe83 	uxth.w	lr, r3
 8000f0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f10:	fb09 4413 	mls	r4, r9, r3, r4
 8000f14:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f18:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f1c:	45a4      	cmp	ip, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1ce>
 8000f20:	193c      	adds	r4, r7, r4
 8000f22:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f26:	f080 8082 	bcs.w	800102e <__udivmoddi4+0x2ca>
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	d97f      	bls.n	800102e <__udivmoddi4+0x2ca>
 8000f2e:	3b02      	subs	r3, #2
 8000f30:	443c      	add	r4, r7
 8000f32:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f36:	eba4 040c 	sub.w	r4, r4, ip
 8000f3a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f3e:	4564      	cmp	r4, ip
 8000f40:	4673      	mov	r3, lr
 8000f42:	46e1      	mov	r9, ip
 8000f44:	d362      	bcc.n	800100c <__udivmoddi4+0x2a8>
 8000f46:	d05f      	beq.n	8001008 <__udivmoddi4+0x2a4>
 8000f48:	b15d      	cbz	r5, 8000f62 <__udivmoddi4+0x1fe>
 8000f4a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f4e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f52:	fa04 f606 	lsl.w	r6, r4, r6
 8000f56:	fa22 f301 	lsr.w	r3, r2, r1
 8000f5a:	431e      	orrs	r6, r3
 8000f5c:	40cc      	lsrs	r4, r1
 8000f5e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f62:	2100      	movs	r1, #0
 8000f64:	e74f      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000f66:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f6a:	0c01      	lsrs	r1, r0, #16
 8000f6c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f70:	b280      	uxth	r0, r0
 8000f72:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f76:	463b      	mov	r3, r7
 8000f78:	4638      	mov	r0, r7
 8000f7a:	463c      	mov	r4, r7
 8000f7c:	46b8      	mov	r8, r7
 8000f7e:	46be      	mov	lr, r7
 8000f80:	2620      	movs	r6, #32
 8000f82:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f86:	eba2 0208 	sub.w	r2, r2, r8
 8000f8a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f8e:	e766      	b.n	8000e5e <__udivmoddi4+0xfa>
 8000f90:	4601      	mov	r1, r0
 8000f92:	e718      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000f94:	4610      	mov	r0, r2
 8000f96:	e72c      	b.n	8000df2 <__udivmoddi4+0x8e>
 8000f98:	f1c6 0220 	rsb	r2, r6, #32
 8000f9c:	fa2e f302 	lsr.w	r3, lr, r2
 8000fa0:	40b7      	lsls	r7, r6
 8000fa2:	40b1      	lsls	r1, r6
 8000fa4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fa8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fac:	430a      	orrs	r2, r1
 8000fae:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fb2:	b2bc      	uxth	r4, r7
 8000fb4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fb8:	0c11      	lsrs	r1, r2, #16
 8000fba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fbe:	fb08 f904 	mul.w	r9, r8, r4
 8000fc2:	40b0      	lsls	r0, r6
 8000fc4:	4589      	cmp	r9, r1
 8000fc6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fca:	b280      	uxth	r0, r0
 8000fcc:	d93e      	bls.n	800104c <__udivmoddi4+0x2e8>
 8000fce:	1879      	adds	r1, r7, r1
 8000fd0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fd4:	d201      	bcs.n	8000fda <__udivmoddi4+0x276>
 8000fd6:	4589      	cmp	r9, r1
 8000fd8:	d81f      	bhi.n	800101a <__udivmoddi4+0x2b6>
 8000fda:	eba1 0109 	sub.w	r1, r1, r9
 8000fde:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe2:	fb09 f804 	mul.w	r8, r9, r4
 8000fe6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fea:	b292      	uxth	r2, r2
 8000fec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ff0:	4542      	cmp	r2, r8
 8000ff2:	d229      	bcs.n	8001048 <__udivmoddi4+0x2e4>
 8000ff4:	18ba      	adds	r2, r7, r2
 8000ff6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ffa:	d2c4      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8000ffc:	4542      	cmp	r2, r8
 8000ffe:	d2c2      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8001000:	f1a9 0102 	sub.w	r1, r9, #2
 8001004:	443a      	add	r2, r7
 8001006:	e7be      	b.n	8000f86 <__udivmoddi4+0x222>
 8001008:	45f0      	cmp	r8, lr
 800100a:	d29d      	bcs.n	8000f48 <__udivmoddi4+0x1e4>
 800100c:	ebbe 0302 	subs.w	r3, lr, r2
 8001010:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001014:	3801      	subs	r0, #1
 8001016:	46e1      	mov	r9, ip
 8001018:	e796      	b.n	8000f48 <__udivmoddi4+0x1e4>
 800101a:	eba7 0909 	sub.w	r9, r7, r9
 800101e:	4449      	add	r1, r9
 8001020:	f1a8 0c02 	sub.w	ip, r8, #2
 8001024:	fbb1 f9fe 	udiv	r9, r1, lr
 8001028:	fb09 f804 	mul.w	r8, r9, r4
 800102c:	e7db      	b.n	8000fe6 <__udivmoddi4+0x282>
 800102e:	4673      	mov	r3, lr
 8001030:	e77f      	b.n	8000f32 <__udivmoddi4+0x1ce>
 8001032:	4650      	mov	r0, sl
 8001034:	e766      	b.n	8000f04 <__udivmoddi4+0x1a0>
 8001036:	4608      	mov	r0, r1
 8001038:	e6fd      	b.n	8000e36 <__udivmoddi4+0xd2>
 800103a:	443b      	add	r3, r7
 800103c:	3a02      	subs	r2, #2
 800103e:	e733      	b.n	8000ea8 <__udivmoddi4+0x144>
 8001040:	f1ac 0c02 	sub.w	ip, ip, #2
 8001044:	443b      	add	r3, r7
 8001046:	e71c      	b.n	8000e82 <__udivmoddi4+0x11e>
 8001048:	4649      	mov	r1, r9
 800104a:	e79c      	b.n	8000f86 <__udivmoddi4+0x222>
 800104c:	eba1 0109 	sub.w	r1, r1, r9
 8001050:	46c4      	mov	ip, r8
 8001052:	fbb1 f9fe 	udiv	r9, r1, lr
 8001056:	fb09 f804 	mul.w	r8, r9, r4
 800105a:	e7c4      	b.n	8000fe6 <__udivmoddi4+0x282>

0800105c <__aeabi_idiv0>:
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <MPU6050_Init>:
void DHT11_Start(void);
uint8_t DHT11_Check_Response(void);
uint8_t DHT11_Read_Byte(void);
void DHT11_Read_Data(void);

void MPU6050_Init(void) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af04      	add	r7, sp, #16
    uint8_t check;
    uint8_t Data;

    // Check device ID
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR << 1, WHO_AM_I_REG, 1, &check, 1, 1000);
 8001066:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800106a:	9302      	str	r3, [sp, #8]
 800106c:	2301      	movs	r3, #1
 800106e:	9301      	str	r3, [sp, #4]
 8001070:	1dfb      	adds	r3, r7, #7
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	2301      	movs	r3, #1
 8001076:	2275      	movs	r2, #117	@ 0x75
 8001078:	21d0      	movs	r1, #208	@ 0xd0
 800107a:	482a      	ldr	r0, [pc, #168]	@ (8001124 <MPU6050_Init+0xc4>)
 800107c:	f002 fe26 	bl	8003ccc <HAL_I2C_Mem_Read>

    if (check == 0x68) { // Correct device ID
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	2b68      	cmp	r3, #104	@ 0x68
 8001084:	d14a      	bne.n	800111c <MPU6050_Init+0xbc>
        // Power Management 1 register - wake up MPU-6050
        Data = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR << 1, PWR_MGMT_1_REG, 1, &Data, 1, 1000);
 800108a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800108e:	9302      	str	r3, [sp, #8]
 8001090:	2301      	movs	r3, #1
 8001092:	9301      	str	r3, [sp, #4]
 8001094:	1dbb      	adds	r3, r7, #6
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	2301      	movs	r3, #1
 800109a:	226b      	movs	r2, #107	@ 0x6b
 800109c:	21d0      	movs	r1, #208	@ 0xd0
 800109e:	4821      	ldr	r0, [pc, #132]	@ (8001124 <MPU6050_Init+0xc4>)
 80010a0:	f002 fd1a 	bl	8003ad8 <HAL_I2C_Mem_Write>

        // Sample Rate Divider - Set to 1kHz
        Data = 0x07;
 80010a4:	2307      	movs	r3, #7
 80010a6:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR << 1, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 80010a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010ac:	9302      	str	r3, [sp, #8]
 80010ae:	2301      	movs	r3, #1
 80010b0:	9301      	str	r3, [sp, #4]
 80010b2:	1dbb      	adds	r3, r7, #6
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	2301      	movs	r3, #1
 80010b8:	2219      	movs	r2, #25
 80010ba:	21d0      	movs	r1, #208	@ 0xd0
 80010bc:	4819      	ldr	r0, [pc, #100]	@ (8001124 <MPU6050_Init+0xc4>)
 80010be:	f002 fd0b 	bl	8003ad8 <HAL_I2C_Mem_Write>

        // Configuration register - Set Digital Low Pass Filter to 26Hz
        Data = 0x03;
 80010c2:	2303      	movs	r3, #3
 80010c4:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR << 1, CONFIG_REG, 1, &Data, 1, 1000);
 80010c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010ca:	9302      	str	r3, [sp, #8]
 80010cc:	2301      	movs	r3, #1
 80010ce:	9301      	str	r3, [sp, #4]
 80010d0:	1dbb      	adds	r3, r7, #6
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	2301      	movs	r3, #1
 80010d6:	221a      	movs	r2, #26
 80010d8:	21d0      	movs	r1, #208	@ 0xd0
 80010da:	4812      	ldr	r0, [pc, #72]	@ (8001124 <MPU6050_Init+0xc4>)
 80010dc:	f002 fcfc 	bl	8003ad8 <HAL_I2C_Mem_Write>

        // Gyroscope Configuration - Set Full Scale Range to +/- 500 deg/s
        Data = 0x08;
 80010e0:	2308      	movs	r3, #8
 80010e2:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR << 1, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 80010e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010e8:	9302      	str	r3, [sp, #8]
 80010ea:	2301      	movs	r3, #1
 80010ec:	9301      	str	r3, [sp, #4]
 80010ee:	1dbb      	adds	r3, r7, #6
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	2301      	movs	r3, #1
 80010f4:	221b      	movs	r2, #27
 80010f6:	21d0      	movs	r1, #208	@ 0xd0
 80010f8:	480a      	ldr	r0, [pc, #40]	@ (8001124 <MPU6050_Init+0xc4>)
 80010fa:	f002 fced 	bl	8003ad8 <HAL_I2C_Mem_Write>

        // Accelerometer Configuration - Set Full Scale Range to +/- 8g
        Data = 0x08;
 80010fe:	2308      	movs	r3, #8
 8001100:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR << 1, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8001102:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001106:	9302      	str	r3, [sp, #8]
 8001108:	2301      	movs	r3, #1
 800110a:	9301      	str	r3, [sp, #4]
 800110c:	1dbb      	adds	r3, r7, #6
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	2301      	movs	r3, #1
 8001112:	221c      	movs	r2, #28
 8001114:	21d0      	movs	r1, #208	@ 0xd0
 8001116:	4803      	ldr	r0, [pc, #12]	@ (8001124 <MPU6050_Init+0xc4>)
 8001118:	f002 fcde 	bl	8003ad8 <HAL_I2C_Mem_Write>
    }
}
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000250 	.word	0x20000250

08001128 <MPU6050_Read_All>:
    int16_t Gyro_X, Gyro_Y, Gyro_Z;
} MPU6050_t;

MPU6050_t MPU6050_Data;

void MPU6050_Read_All() {
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af04      	add	r7, sp, #16
    uint8_t Rx_Data[14];
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR << 1, ACCEL_XOUT_H_REG, 1, Rx_Data, 14, 1000);
 800112e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001132:	9302      	str	r3, [sp, #8]
 8001134:	230e      	movs	r3, #14
 8001136:	9301      	str	r3, [sp, #4]
 8001138:	463b      	mov	r3, r7
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	2301      	movs	r3, #1
 800113e:	223b      	movs	r2, #59	@ 0x3b
 8001140:	21d0      	movs	r1, #208	@ 0xd0
 8001142:	4821      	ldr	r0, [pc, #132]	@ (80011c8 <MPU6050_Read_All+0xa0>)
 8001144:	f002 fdc2 	bl	8003ccc <HAL_I2C_Mem_Read>

    // Combine high and low bytes to get 16-bit values
    MPU6050_Data.Accel_X = (int16_t)(Rx_Data[0] << 8 | Rx_Data[1]);
 8001148:	783b      	ldrb	r3, [r7, #0]
 800114a:	b21b      	sxth	r3, r3
 800114c:	021b      	lsls	r3, r3, #8
 800114e:	b21a      	sxth	r2, r3
 8001150:	787b      	ldrb	r3, [r7, #1]
 8001152:	b21b      	sxth	r3, r3
 8001154:	4313      	orrs	r3, r2
 8001156:	b21a      	sxth	r2, r3
 8001158:	4b1c      	ldr	r3, [pc, #112]	@ (80011cc <MPU6050_Read_All+0xa4>)
 800115a:	801a      	strh	r2, [r3, #0]
    MPU6050_Data.Accel_Y = (int16_t)(Rx_Data[2] << 8 | Rx_Data[3]);
 800115c:	78bb      	ldrb	r3, [r7, #2]
 800115e:	b21b      	sxth	r3, r3
 8001160:	021b      	lsls	r3, r3, #8
 8001162:	b21a      	sxth	r2, r3
 8001164:	78fb      	ldrb	r3, [r7, #3]
 8001166:	b21b      	sxth	r3, r3
 8001168:	4313      	orrs	r3, r2
 800116a:	b21a      	sxth	r2, r3
 800116c:	4b17      	ldr	r3, [pc, #92]	@ (80011cc <MPU6050_Read_All+0xa4>)
 800116e:	805a      	strh	r2, [r3, #2]
    MPU6050_Data.Accel_Z = (int16_t)(Rx_Data[4] << 8 | Rx_Data[5]);
 8001170:	793b      	ldrb	r3, [r7, #4]
 8001172:	b21b      	sxth	r3, r3
 8001174:	021b      	lsls	r3, r3, #8
 8001176:	b21a      	sxth	r2, r3
 8001178:	797b      	ldrb	r3, [r7, #5]
 800117a:	b21b      	sxth	r3, r3
 800117c:	4313      	orrs	r3, r2
 800117e:	b21a      	sxth	r2, r3
 8001180:	4b12      	ldr	r3, [pc, #72]	@ (80011cc <MPU6050_Read_All+0xa4>)
 8001182:	809a      	strh	r2, [r3, #4]
    MPU6050_Data.Gyro_X = (int16_t)(Rx_Data[8] << 8 | Rx_Data[9]);
 8001184:	7a3b      	ldrb	r3, [r7, #8]
 8001186:	b21b      	sxth	r3, r3
 8001188:	021b      	lsls	r3, r3, #8
 800118a:	b21a      	sxth	r2, r3
 800118c:	7a7b      	ldrb	r3, [r7, #9]
 800118e:	b21b      	sxth	r3, r3
 8001190:	4313      	orrs	r3, r2
 8001192:	b21a      	sxth	r2, r3
 8001194:	4b0d      	ldr	r3, [pc, #52]	@ (80011cc <MPU6050_Read_All+0xa4>)
 8001196:	80da      	strh	r2, [r3, #6]
    MPU6050_Data.Gyro_Y = (int16_t)(Rx_Data[10] << 8 | Rx_Data[11]);
 8001198:	7abb      	ldrb	r3, [r7, #10]
 800119a:	b21b      	sxth	r3, r3
 800119c:	021b      	lsls	r3, r3, #8
 800119e:	b21a      	sxth	r2, r3
 80011a0:	7afb      	ldrb	r3, [r7, #11]
 80011a2:	b21b      	sxth	r3, r3
 80011a4:	4313      	orrs	r3, r2
 80011a6:	b21a      	sxth	r2, r3
 80011a8:	4b08      	ldr	r3, [pc, #32]	@ (80011cc <MPU6050_Read_All+0xa4>)
 80011aa:	811a      	strh	r2, [r3, #8]
    MPU6050_Data.Gyro_Z = (int16_t)(Rx_Data[12] << 8 | Rx_Data[13]);
 80011ac:	7b3b      	ldrb	r3, [r7, #12]
 80011ae:	b21b      	sxth	r3, r3
 80011b0:	021b      	lsls	r3, r3, #8
 80011b2:	b21a      	sxth	r2, r3
 80011b4:	7b7b      	ldrb	r3, [r7, #13]
 80011b6:	b21b      	sxth	r3, r3
 80011b8:	4313      	orrs	r3, r2
 80011ba:	b21a      	sxth	r2, r3
 80011bc:	4b03      	ldr	r3, [pc, #12]	@ (80011cc <MPU6050_Read_All+0xa4>)
 80011be:	815a      	strh	r2, [r3, #10]
}
 80011c0:	bf00      	nop
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000250 	.word	0x20000250
 80011cc:	200004d0 	.word	0x200004d0

080011d0 <__io_putchar>:

int __io_putchar(int ch)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80011d8:	1d39      	adds	r1, r7, #4
 80011da:	f04f 33ff 	mov.w	r3, #4294967295
 80011de:	2201      	movs	r2, #1
 80011e0:	4803      	ldr	r0, [pc, #12]	@ (80011f0 <__io_putchar+0x20>)
 80011e2:	f005 fefb 	bl	8006fdc <HAL_UART_Transmit>
    return ch;
 80011e6:	687b      	ldr	r3, [r7, #4]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	200003e4 	.word	0x200003e4

080011f4 <UART_Print>:

void UART_Print(const char *str)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7ff f857 	bl	80002b0 <strlen>
 8001202:	4603      	mov	r3, r0
 8001204:	b29a      	uxth	r2, r3
 8001206:	f04f 33ff 	mov.w	r3, #4294967295
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	4803      	ldr	r0, [pc, #12]	@ (800121c <UART_Print+0x28>)
 800120e:	f005 fee5 	bl	8006fdc <HAL_UART_Transmit>
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	200003e4 	.word	0x200003e4

08001220 <Read_ADC_Value>:

uint32_t Read_ADC_Value(ADC_HandleTypeDef *hadc)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
    HAL_ADC_Start(hadc);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f001 fc99 	bl	8002b60 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 800122e:	f04f 31ff 	mov.w	r1, #4294967295
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f001 fd99 	bl	8002d6a <HAL_ADC_PollForConversion>
    uint32_t adc_value = HAL_ADC_GetValue(hadc);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f001 fe21 	bl	8002e80 <HAL_ADC_GetValue>
 800123e:	60f8      	str	r0, [r7, #12]
    HAL_ADC_Stop(hadc);
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f001 fd5f 	bl	8002d04 <HAL_ADC_Stop>
    return adc_value;
 8001246:	68fb      	ldr	r3, [r7, #12]
}
 8001248:	4618      	mov	r0, r3
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <Update_PWM_Brightness>:

void Update_PWM_Brightness(TIM_HandleTypeDef *htim, uint32_t channel, uint32_t adc_value)
{
 8001250:	b480      	push	{r7}
 8001252:	b087      	sub	sp, #28
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
    uint32_t pwm_pulse_value = adc_value / 4; // Scale 0–4095 to 0–1023 for PWM
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	089b      	lsrs	r3, r3, #2
 8001260:	617b      	str	r3, [r7, #20]
    __HAL_TIM_SET_COMPARE(htim, channel, pwm_pulse_value);
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d104      	bne.n	8001272 <Update_PWM_Brightness+0x22>
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	697a      	ldr	r2, [r7, #20]
 800126e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001270:	e013      	b.n	800129a <Update_PWM_Brightness+0x4a>
    __HAL_TIM_SET_COMPARE(htim, channel, pwm_pulse_value);
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	2b04      	cmp	r3, #4
 8001276:	d104      	bne.n	8001282 <Update_PWM_Brightness+0x32>
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001280:	e00b      	b.n	800129a <Update_PWM_Brightness+0x4a>
    __HAL_TIM_SET_COMPARE(htim, channel, pwm_pulse_value);
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	2b08      	cmp	r3, #8
 8001286:	d104      	bne.n	8001292 <Update_PWM_Brightness+0x42>
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001290:	e003      	b.n	800129a <Update_PWM_Brightness+0x4a>
    __HAL_TIM_SET_COMPARE(htim, channel, pwm_pulse_value);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800129a:	bf00      	nop
 800129c:	371c      	adds	r7, #28
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
	...

080012a8 <Set_DHT11_GPIO_Output>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Function to set DHT11 Data pin as Output
void Set_DHT11_GPIO_Output(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = DHT11_DATA_Pin; // Assuming DHT11_DATA_Pin is defined for PA8
 80012bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012c0:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c2:	2301      	movs	r3, #1
 80012c4:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW; // Low speed is fine for output
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(DHT11_DATA_GPIO_Port, &GPIO_InitStruct);
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	4619      	mov	r1, r3
 80012d2:	4803      	ldr	r0, [pc, #12]	@ (80012e0 <Set_DHT11_GPIO_Output+0x38>)
 80012d4:	f002 f8f6 	bl	80034c4 <HAL_GPIO_Init>
}
 80012d8:	bf00      	nop
 80012da:	3718      	adds	r7, #24
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40020000 	.word	0x40020000

080012e4 <Set_DHT11_GPIO_Input>:

// Function to set DHT11 Data pin as Input
void Set_DHT11_GPIO_Input(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = DHT11_DATA_Pin;
 80012f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012fc:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012fe:	2300      	movs	r3, #0
 8001300:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL; // Pull-up should be external 10k resistor
 8001302:	2300      	movs	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DHT11_DATA_GPIO_Port, &GPIO_InitStruct);
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	4619      	mov	r1, r3
 800130a:	4803      	ldr	r0, [pc, #12]	@ (8001318 <Set_DHT11_GPIO_Input+0x34>)
 800130c:	f002 f8da 	bl	80034c4 <HAL_GPIO_Init>
}
 8001310:	bf00      	nop
 8001312:	3718      	adds	r7, #24
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40020000 	.word	0x40020000

0800131c <DHT11_Start>:

// Send start signal to DHT11
void DHT11_Start(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
    Set_DHT11_GPIO_Output(); // Set pin as output
 8001320:	f7ff ffc2 	bl	80012a8 <Set_DHT11_GPIO_Output>
    HAL_GPIO_WritePin(DHT11_DATA_GPIO_Port, DHT11_DATA_Pin, GPIO_PIN_RESET); // Pull low
 8001324:	2200      	movs	r2, #0
 8001326:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800132a:	480d      	ldr	r0, [pc, #52]	@ (8001360 <DHT11_Start+0x44>)
 800132c:	f002 fa76 	bl	800381c <HAL_GPIO_WritePin>
    HAL_Delay(18); // Wait for at least 18ms (DHT11 datasheet min 18ms)
 8001330:	2012      	movs	r0, #18
 8001332:	f001 fbad 	bl	8002a90 <HAL_Delay>
    HAL_GPIO_WritePin(DHT11_DATA_GPIO_Port, DHT11_DATA_Pin, GPIO_PIN_SET);  // Pull high
 8001336:	2201      	movs	r2, #1
 8001338:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800133c:	4808      	ldr	r0, [pc, #32]	@ (8001360 <DHT11_Start+0x44>)
 800133e:	f002 fa6d 	bl	800381c <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COUNTER(&htim2, 0); // Reset timer
 8001342:	4b08      	ldr	r3, [pc, #32]	@ (8001364 <DHT11_Start+0x48>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2200      	movs	r2, #0
 8001348:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(&htim2) < 20); // Wait 20-40us (we'll use 20us here)
 800134a:	bf00      	nop
 800134c:	4b05      	ldr	r3, [pc, #20]	@ (8001364 <DHT11_Start+0x48>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001352:	2b13      	cmp	r3, #19
 8001354:	d9fa      	bls.n	800134c <DHT11_Start+0x30>
    Set_DHT11_GPIO_Input(); // Set pin as input to listen for sensor response
 8001356:	f7ff ffc5 	bl	80012e4 <Set_DHT11_GPIO_Input>
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40020000 	.word	0x40020000
 8001364:	2000039c 	.word	0x2000039c

08001368 <DHT11_Check_Response>:

// Check DHT11 response signal
uint8_t DHT11_Check_Response(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
    uint32_t Timeout_Start = __HAL_TIM_GET_COUNTER(&htim2); // Start timeout for response
 800136e:	4b18      	ldr	r3, [pc, #96]	@ (80013d0 <DHT11_Check_Response+0x68>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001374:	607b      	str	r3, [r7, #4]

    // Wait for DHT11 to pull low (80us approx)
    while (HAL_GPIO_ReadPin(DHT11_DATA_GPIO_Port, DHT11_DATA_Pin) == GPIO_PIN_RESET)
 8001376:	e008      	b.n	800138a <DHT11_Check_Response+0x22>
    {
        if ((__HAL_TIM_GET_COUNTER(&htim2) - Timeout_Start) > DHT11_RESPONSE_TIMEOUT_US) return 0; // Timeout
 8001378:	4b15      	ldr	r3, [pc, #84]	@ (80013d0 <DHT11_Check_Response+0x68>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b64      	cmp	r3, #100	@ 0x64
 8001384:	d901      	bls.n	800138a <DHT11_Check_Response+0x22>
 8001386:	2300      	movs	r3, #0
 8001388:	e01e      	b.n	80013c8 <DHT11_Check_Response+0x60>
    while (HAL_GPIO_ReadPin(DHT11_DATA_GPIO_Port, DHT11_DATA_Pin) == GPIO_PIN_RESET)
 800138a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800138e:	4811      	ldr	r0, [pc, #68]	@ (80013d4 <DHT11_Check_Response+0x6c>)
 8001390:	f002 fa2c 	bl	80037ec <HAL_GPIO_ReadPin>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d0ee      	beq.n	8001378 <DHT11_Check_Response+0x10>
    }

    Timeout_Start = __HAL_TIM_GET_COUNTER(&htim2); // Reset timeout for next phase
 800139a:	4b0d      	ldr	r3, [pc, #52]	@ (80013d0 <DHT11_Check_Response+0x68>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013a0:	607b      	str	r3, [r7, #4]
    // Wait for DHT11 to pull high (80us approx)
    while (HAL_GPIO_ReadPin(DHT11_DATA_GPIO_Port, DHT11_DATA_Pin) == GPIO_PIN_SET)
 80013a2:	e008      	b.n	80013b6 <DHT11_Check_Response+0x4e>
    {
        if ((__HAL_TIM_GET_COUNTER(&htim2) - Timeout_Start) > DHT11_RESPONSE_TIMEOUT_US) return 0; // Timeout
 80013a4:	4b0a      	ldr	r3, [pc, #40]	@ (80013d0 <DHT11_Check_Response+0x68>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b64      	cmp	r3, #100	@ 0x64
 80013b0:	d901      	bls.n	80013b6 <DHT11_Check_Response+0x4e>
 80013b2:	2300      	movs	r3, #0
 80013b4:	e008      	b.n	80013c8 <DHT11_Check_Response+0x60>
    while (HAL_GPIO_ReadPin(DHT11_DATA_GPIO_Port, DHT11_DATA_Pin) == GPIO_PIN_SET)
 80013b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013ba:	4806      	ldr	r0, [pc, #24]	@ (80013d4 <DHT11_Check_Response+0x6c>)
 80013bc:	f002 fa16 	bl	80037ec <HAL_GPIO_ReadPin>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d0ee      	beq.n	80013a4 <DHT11_Check_Response+0x3c>
    }
    return 1; // Response received
 80013c6:	2301      	movs	r3, #1
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	2000039c 	.word	0x2000039c
 80013d4:	40020000 	.word	0x40020000

080013d8 <DHT11_Read_Byte>:

// Read a single byte (8 bits) from DHT11
uint8_t DHT11_Read_Byte(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
    uint8_t i, data = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	71bb      	strb	r3, [r7, #6]
    for (i = 0; i < 8; i++)
 80013e2:	2300      	movs	r3, #0
 80013e4:	71fb      	strb	r3, [r7, #7]
 80013e6:	e03c      	b.n	8001462 <DHT11_Read_Byte+0x8a>
    {
        uint32_t Timeout_Start = __HAL_TIM_GET_COUNTER(&htim2);
 80013e8:	4b22      	ldr	r3, [pc, #136]	@ (8001474 <DHT11_Read_Byte+0x9c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ee:	603b      	str	r3, [r7, #0]
        // Wait for low pulse (50us approx)
        while (HAL_GPIO_ReadPin(DHT11_DATA_GPIO_Port, DHT11_DATA_Pin) == GPIO_PIN_RESET)
 80013f0:	e008      	b.n	8001404 <DHT11_Read_Byte+0x2c>
        {
            if ((__HAL_TIM_GET_COUNTER(&htim2) - Timeout_Start) > DHT11_BIT_READ_TIMEOUT_US) return 0; // Timeout
 80013f2:	4b20      	ldr	r3, [pc, #128]	@ (8001474 <DHT11_Read_Byte+0x9c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	2b64      	cmp	r3, #100	@ 0x64
 80013fe:	d901      	bls.n	8001404 <DHT11_Read_Byte+0x2c>
 8001400:	2300      	movs	r3, #0
 8001402:	e032      	b.n	800146a <DHT11_Read_Byte+0x92>
        while (HAL_GPIO_ReadPin(DHT11_DATA_GPIO_Port, DHT11_DATA_Pin) == GPIO_PIN_RESET)
 8001404:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001408:	481b      	ldr	r0, [pc, #108]	@ (8001478 <DHT11_Read_Byte+0xa0>)
 800140a:	f002 f9ef 	bl	80037ec <HAL_GPIO_ReadPin>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d0ee      	beq.n	80013f2 <DHT11_Read_Byte+0x1a>
        }

        Timeout_Start = __HAL_TIM_GET_COUNTER(&htim2); // Start timer to measure high pulse duration
 8001414:	4b17      	ldr	r3, [pc, #92]	@ (8001474 <DHT11_Read_Byte+0x9c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800141a:	603b      	str	r3, [r7, #0]
        // Wait for high pulse (26-28us for '0', 70us for '1')
        while (HAL_GPIO_ReadPin(DHT11_DATA_GPIO_Port, DHT11_DATA_Pin) == GPIO_PIN_SET)
 800141c:	e008      	b.n	8001430 <DHT11_Read_Byte+0x58>
        {
            if ((__HAL_TIM_GET_COUNTER(&htim2) - Timeout_Start) > DHT11_BIT_READ_TIMEOUT_US) return 0; // Timeout
 800141e:	4b15      	ldr	r3, [pc, #84]	@ (8001474 <DHT11_Read_Byte+0x9c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b64      	cmp	r3, #100	@ 0x64
 800142a:	d901      	bls.n	8001430 <DHT11_Read_Byte+0x58>
 800142c:	2300      	movs	r3, #0
 800142e:	e01c      	b.n	800146a <DHT11_Read_Byte+0x92>
        while (HAL_GPIO_ReadPin(DHT11_DATA_GPIO_Port, DHT11_DATA_Pin) == GPIO_PIN_SET)
 8001430:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001434:	4810      	ldr	r0, [pc, #64]	@ (8001478 <DHT11_Read_Byte+0xa0>)
 8001436:	f002 f9d9 	bl	80037ec <HAL_GPIO_ReadPin>
 800143a:	4603      	mov	r3, r0
 800143c:	2b01      	cmp	r3, #1
 800143e:	d0ee      	beq.n	800141e <DHT11_Read_Byte+0x46>
        }

        // Determine if bit is 0 or 1 based on high pulse duration
        data <<= 1; // Shift left to make space for the new bit
 8001440:	79bb      	ldrb	r3, [r7, #6]
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	71bb      	strb	r3, [r7, #6]
        if ((__HAL_TIM_GET_COUNTER(&htim2) - Timeout_Start) > 40) // If high pulse > 40us, it's a '1'
 8001446:	4b0b      	ldr	r3, [pc, #44]	@ (8001474 <DHT11_Read_Byte+0x9c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b28      	cmp	r3, #40	@ 0x28
 8001452:	d903      	bls.n	800145c <DHT11_Read_Byte+0x84>
        {
            data |= 1; // Set the last bit to 1
 8001454:	79bb      	ldrb	r3, [r7, #6]
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	71bb      	strb	r3, [r7, #6]
    for (i = 0; i < 8; i++)
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	3301      	adds	r3, #1
 8001460:	71fb      	strb	r3, [r7, #7]
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	2b07      	cmp	r3, #7
 8001466:	d9bf      	bls.n	80013e8 <DHT11_Read_Byte+0x10>
        }
    }
    return data;
 8001468:	79bb      	ldrb	r3, [r7, #6]
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	2000039c 	.word	0x2000039c
 8001478:	40020000 	.word	0x40020000

0800147c <DHT11_Read_Data>:

// Read all 40 bits of data from DHT11
void DHT11_Read_Data(void)
{
 800147c:	b5b0      	push	{r4, r5, r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af04      	add	r7, sp, #16
    DHT11_Data_OK = 0; // Reset success flag
 8001482:	4b5e      	ldr	r3, [pc, #376]	@ (80015fc <DHT11_Read_Data+0x180>)
 8001484:	2200      	movs	r2, #0
 8001486:	701a      	strb	r2, [r3, #0]

    // Start communication sequence
    DHT11_Start();
 8001488:	f7ff ff48 	bl	800131c <DHT11_Start>

    // Check for sensor response
    if (DHT11_Check_Response())
 800148c:	f7ff ff6c 	bl	8001368 <DHT11_Check_Response>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	f000 80af 	beq.w	80015f6 <DHT11_Read_Data+0x17a>
    {
        // Read 5 bytes of data
        RHR_Byte1 = DHT11_Read_Byte();  // Humidity integer part
 8001498:	f7ff ff9e 	bl	80013d8 <DHT11_Read_Byte>
 800149c:	4603      	mov	r3, r0
 800149e:	461a      	mov	r2, r3
 80014a0:	4b57      	ldr	r3, [pc, #348]	@ (8001600 <DHT11_Read_Data+0x184>)
 80014a2:	701a      	strb	r2, [r3, #0]
        RHR_Byte2 = DHT11_Read_Byte();  // Humidity decimal part (often 0 for DHT11)
 80014a4:	f7ff ff98 	bl	80013d8 <DHT11_Read_Byte>
 80014a8:	4603      	mov	r3, r0
 80014aa:	461a      	mov	r2, r3
 80014ac:	4b55      	ldr	r3, [pc, #340]	@ (8001604 <DHT11_Read_Data+0x188>)
 80014ae:	701a      	strb	r2, [r3, #0]
        TEMP_Byte1 = DHT11_Read_Byte(); // Temperature integer part
 80014b0:	f7ff ff92 	bl	80013d8 <DHT11_Read_Byte>
 80014b4:	4603      	mov	r3, r0
 80014b6:	461a      	mov	r2, r3
 80014b8:	4b53      	ldr	r3, [pc, #332]	@ (8001608 <DHT11_Read_Data+0x18c>)
 80014ba:	701a      	strb	r2, [r3, #0]
        TEMP_Byte2 = DHT11_Read_Byte(); // Temperature decimal part (often 0 for DHT11)
 80014bc:	f7ff ff8c 	bl	80013d8 <DHT11_Read_Byte>
 80014c0:	4603      	mov	r3, r0
 80014c2:	461a      	mov	r2, r3
 80014c4:	4b51      	ldr	r3, [pc, #324]	@ (800160c <DHT11_Read_Data+0x190>)
 80014c6:	701a      	strb	r2, [r3, #0]
        Sum_Check_Byte = DHT11_Read_Byte(); // Checksum byte
 80014c8:	f7ff ff86 	bl	80013d8 <DHT11_Read_Byte>
 80014cc:	4603      	mov	r3, r0
 80014ce:	461a      	mov	r2, r3
 80014d0:	4b4f      	ldr	r3, [pc, #316]	@ (8001610 <DHT11_Read_Data+0x194>)
 80014d2:	701a      	strb	r2, [r3, #0]

        printf("Raw: H1=%d, H2=%d, T1=%d, T2=%d, Sum=%d, Check=%d\r\n", RHR_Byte1, RHR_Byte2, TEMP_Byte1, TEMP_Byte2, Sum_Check_Byte, CheckSum);
 80014d4:	4b4a      	ldr	r3, [pc, #296]	@ (8001600 <DHT11_Read_Data+0x184>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	4618      	mov	r0, r3
 80014da:	4b4a      	ldr	r3, [pc, #296]	@ (8001604 <DHT11_Read_Data+0x188>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	461c      	mov	r4, r3
 80014e0:	4b49      	ldr	r3, [pc, #292]	@ (8001608 <DHT11_Read_Data+0x18c>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	461d      	mov	r5, r3
 80014e6:	4b49      	ldr	r3, [pc, #292]	@ (800160c <DHT11_Read_Data+0x190>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	461a      	mov	r2, r3
 80014ec:	4b48      	ldr	r3, [pc, #288]	@ (8001610 <DHT11_Read_Data+0x194>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	4619      	mov	r1, r3
 80014f2:	4b48      	ldr	r3, [pc, #288]	@ (8001614 <DHT11_Read_Data+0x198>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	9302      	str	r3, [sp, #8]
 80014f8:	9101      	str	r1, [sp, #4]
 80014fa:	9200      	str	r2, [sp, #0]
 80014fc:	462b      	mov	r3, r5
 80014fe:	4622      	mov	r2, r4
 8001500:	4601      	mov	r1, r0
 8001502:	4845      	ldr	r0, [pc, #276]	@ (8001618 <DHT11_Read_Data+0x19c>)
 8001504:	f007 f84c 	bl	80085a0 <iprintf>
        // Calculate checksum
        CheckSum = RHR_Byte1 + RHR_Byte2 + TEMP_Byte1 + TEMP_Byte2;
 8001508:	4b3d      	ldr	r3, [pc, #244]	@ (8001600 <DHT11_Read_Data+0x184>)
 800150a:	781a      	ldrb	r2, [r3, #0]
 800150c:	4b3d      	ldr	r3, [pc, #244]	@ (8001604 <DHT11_Read_Data+0x188>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	4413      	add	r3, r2
 8001512:	b2da      	uxtb	r2, r3
 8001514:	4b3c      	ldr	r3, [pc, #240]	@ (8001608 <DHT11_Read_Data+0x18c>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	4413      	add	r3, r2
 800151a:	b2da      	uxtb	r2, r3
 800151c:	4b3b      	ldr	r3, [pc, #236]	@ (800160c <DHT11_Read_Data+0x190>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	4413      	add	r3, r2
 8001522:	b2da      	uxtb	r2, r3
 8001524:	4b3b      	ldr	r3, [pc, #236]	@ (8001614 <DHT11_Read_Data+0x198>)
 8001526:	701a      	strb	r2, [r3, #0]

        // Verify checksum
        if (CheckSum == Sum_Check_Byte)
 8001528:	4b3a      	ldr	r3, [pc, #232]	@ (8001614 <DHT11_Read_Data+0x198>)
 800152a:	781a      	ldrb	r2, [r3, #0]
 800152c:	4b38      	ldr	r3, [pc, #224]	@ (8001610 <DHT11_Read_Data+0x194>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	429a      	cmp	r2, r3
 8001532:	d160      	bne.n	80015f6 <DHT11_Read_Data+0x17a>
        {
            // Data is valid!
            Humidity = RHR_Byte1 + (float)RHR_Byte2 / 10.0f; // DHT11 typically only integer for DHT11
 8001534:	4b32      	ldr	r3, [pc, #200]	@ (8001600 <DHT11_Read_Data+0x184>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	ee07 3a90 	vmov	s15, r3
 800153c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001540:	4b30      	ldr	r3, [pc, #192]	@ (8001604 <DHT11_Read_Data+0x188>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	ee07 3a90 	vmov	s15, r3
 8001548:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800154c:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 8001550:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001554:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001558:	4b30      	ldr	r3, [pc, #192]	@ (800161c <DHT11_Read_Data+0x1a0>)
 800155a:	edc3 7a00 	vstr	s15, [r3]
            Temperature = TEMP_Byte1 + (float)TEMP_Byte2 / 10.0f; // DHT11 typically only integer for DHT11
 800155e:	4b2a      	ldr	r3, [pc, #168]	@ (8001608 <DHT11_Read_Data+0x18c>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	ee07 3a90 	vmov	s15, r3
 8001566:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800156a:	4b28      	ldr	r3, [pc, #160]	@ (800160c <DHT11_Read_Data+0x190>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	ee07 3a90 	vmov	s15, r3
 8001572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001576:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 800157a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800157e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001582:	4b27      	ldr	r3, [pc, #156]	@ (8001620 <DHT11_Read_Data+0x1a4>)
 8001584:	edc3 7a00 	vstr	s15, [r3]
            // Handle negative temperature for DHT11 (bit 7 of TEMP_Byte1 is 1)
            // For DHT11, Temp_Byte1 is usually the integer part, TEMP_Byte2 is decimal (often 0)
            // If the highest bit (bit 7) of TEMP_Byte1 is 1, it indicates negative temp.
            // The actual temp is (TEMP_Byte1 & 0x7F).
            // This is specific to DHT11. DHT22 has 16-bit signed temp.
            if (TEMP_Byte1 & 0x80) // Check if the MSB is set for negative temperature
 8001588:	4b1f      	ldr	r3, [pc, #124]	@ (8001608 <DHT11_Read_Data+0x18c>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	b25b      	sxtb	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	da19      	bge.n	80015c6 <DHT11_Read_Data+0x14a>
            {
                 Temperature = -((TEMP_Byte1 & 0x7F) + (float)TEMP_Byte2 / 10.0f);
 8001592:	4b1d      	ldr	r3, [pc, #116]	@ (8001608 <DHT11_Read_Data+0x18c>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800159a:	ee07 3a90 	vmov	s15, r3
 800159e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015a2:	4b1a      	ldr	r3, [pc, #104]	@ (800160c <DHT11_Read_Data+0x190>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	ee07 3a90 	vmov	s15, r3
 80015aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80015ae:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80015b2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80015b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ba:	eef1 7a67 	vneg.f32	s15, s15
 80015be:	4b18      	ldr	r3, [pc, #96]	@ (8001620 <DHT11_Read_Data+0x1a4>)
 80015c0:	edc3 7a00 	vstr	s15, [r3]
 80015c4:	e014      	b.n	80015f0 <DHT11_Read_Data+0x174>
            }
            else
            {
                Temperature = TEMP_Byte1 + (float)TEMP_Byte2 / 10.0f;
 80015c6:	4b10      	ldr	r3, [pc, #64]	@ (8001608 <DHT11_Read_Data+0x18c>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	ee07 3a90 	vmov	s15, r3
 80015ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015d2:	4b0e      	ldr	r3, [pc, #56]	@ (800160c <DHT11_Read_Data+0x190>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	ee07 3a90 	vmov	s15, r3
 80015da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80015de:	eeb2 6a04 	vmov.f32	s12, #36	@ 0x41200000  10.0
 80015e2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80015e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001620 <DHT11_Read_Data+0x1a4>)
 80015ec:	edc3 7a00 	vstr	s15, [r3]
            }

            DHT11_Data_OK = 1; // Set success flag
 80015f0:	4b02      	ldr	r3, [pc, #8]	@ (80015fc <DHT11_Read_Data+0x180>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	701a      	strb	r2, [r3, #0]
        }
    }
}
 80015f6:	bf00      	nop
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bdb0      	pop	{r4, r5, r7, pc}
 80015fc:	2000043c 	.word	0x2000043c
 8001600:	2000042c 	.word	0x2000042c
 8001604:	2000042d 	.word	0x2000042d
 8001608:	2000042e 	.word	0x2000042e
 800160c:	2000042f 	.word	0x2000042f
 8001610:	20000430 	.word	0x20000430
 8001614:	20000431 	.word	0x20000431
 8001618:	0800bf20 	.word	0x0800bf20
 800161c:	20000438 	.word	0x20000438
 8001620:	20000434 	.word	0x20000434

08001624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001624:	b5b0      	push	{r4, r5, r7, lr}
 8001626:	b098      	sub	sp, #96	@ 0x60
 8001628:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800162a:	f001 f9bf 	bl	80029ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800162e:	f000 fa03 	bl	8001a38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001632:	f000 fc77 	bl	8001f24 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001636:	f000 fc4b 	bl	8001ed0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800163a:	f000 fac1 	bl	8001bc0 <MX_I2C1_Init>
  MX_SPI1_Init();
 800163e:	f000 faed 	bl	8001c1c <MX_SPI1_Init>
  MX_SPI3_Init();
 8001642:	f000 fb21 	bl	8001c88 <MX_SPI3_Init>
  MX_TIM1_Init();
 8001646:	f000 fb55 	bl	8001cf4 <MX_TIM1_Init>
  MX_TIM2_Init();
 800164a:	f000 fbf5 	bl	8001e38 <MX_TIM2_Init>
  MX_ADC1_Init();
 800164e:	f000 fa65 	bl	8001b1c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8001652:	489c      	ldr	r0, [pc, #624]	@ (80018c4 <main+0x2a0>)
 8001654:	f004 fd7a 	bl	800614c <HAL_TIM_Base_Start>
  MPU6050_Init();
 8001658:	f7ff fd02 	bl	8001060 <MPU6050_Init>
  printf("MPU-6050 Initialized!\n");
 800165c:	489a      	ldr	r0, [pc, #616]	@ (80018c8 <main+0x2a4>)
 800165e:	f007 f807 	bl	8008670 <puts>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001662:	2108      	movs	r1, #8
 8001664:	4899      	ldr	r0, [pc, #612]	@ (80018cc <main+0x2a8>)
 8001666:	f004 fe33 	bl	80062d0 <HAL_TIM_PWM_Start>

	/* USER CODE BEGIN 2 */
	UART_Print("Initializing MCP2515 Transmitter (SPI3)...\r\n\r\n");
 800166a:	4899      	ldr	r0, [pc, #612]	@ (80018d0 <main+0x2ac>)
 800166c:	f7ff fdc2 	bl	80011f4 <UART_Print>
	MCP2515_Init(&hcan_tx, 500000); // 500 kbps
 8001670:	4998      	ldr	r1, [pc, #608]	@ (80018d4 <main+0x2b0>)
 8001672:	4899      	ldr	r0, [pc, #612]	@ (80018d8 <main+0x2b4>)
 8001674:	f000 fdac 	bl	80021d0 <MCP2515_Init>
	UART_Print("Initializing MCP2515 Receiver (SPI1)...\r\n\r\n");
 8001678:	4898      	ldr	r0, [pc, #608]	@ (80018dc <main+0x2b8>)
 800167a:	f7ff fdbb 	bl	80011f4 <UART_Print>
	MCP2515_Init(&hcan_rx, 500000); // 500 kbps
 800167e:	4995      	ldr	r1, [pc, #596]	@ (80018d4 <main+0x2b0>)
 8001680:	4897      	ldr	r0, [pc, #604]	@ (80018e0 <main+0x2bc>)
 8001682:	f000 fda5 	bl	80021d0 <MCP2515_Init>
  /* USER CODE BEGIN WHILE */
	while (1)
	{
	    /* Read sensor data */
	    // Read ADC
	    uint32_t adc_value = Read_ADC_Value(&hadc1);
 8001686:	4897      	ldr	r0, [pc, #604]	@ (80018e4 <main+0x2c0>)
 8001688:	f7ff fdca 	bl	8001220 <Read_ADC_Value>
 800168c:	64b8      	str	r0, [r7, #72]	@ 0x48

	    // Read MPU6050
	    MPU6050_Read_All();
 800168e:	f7ff fd4b 	bl	8001128 <MPU6050_Read_All>
	    printf("Accel: X=%d, Y=%d, Z=%d | Gyro: X=%d, Y=%d, Z=%d\r\n",
	           MPU6050_Data.Accel_X, MPU6050_Data.Accel_Y, MPU6050_Data.Accel_Z,
 8001692:	4b95      	ldr	r3, [pc, #596]	@ (80018e8 <main+0x2c4>)
 8001694:	f9b3 3000 	ldrsh.w	r3, [r3]
	    printf("Accel: X=%d, Y=%d, Z=%d | Gyro: X=%d, Y=%d, Z=%d\r\n",
 8001698:	4618      	mov	r0, r3
	           MPU6050_Data.Accel_X, MPU6050_Data.Accel_Y, MPU6050_Data.Accel_Z,
 800169a:	4b93      	ldr	r3, [pc, #588]	@ (80018e8 <main+0x2c4>)
 800169c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
	    printf("Accel: X=%d, Y=%d, Z=%d | Gyro: X=%d, Y=%d, Z=%d\r\n",
 80016a0:	461c      	mov	r4, r3
	           MPU6050_Data.Accel_X, MPU6050_Data.Accel_Y, MPU6050_Data.Accel_Z,
 80016a2:	4b91      	ldr	r3, [pc, #580]	@ (80018e8 <main+0x2c4>)
 80016a4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	    printf("Accel: X=%d, Y=%d, Z=%d | Gyro: X=%d, Y=%d, Z=%d\r\n",
 80016a8:	461d      	mov	r5, r3
	           MPU6050_Data.Gyro_X, MPU6050_Data.Gyro_Y, MPU6050_Data.Gyro_Z);
 80016aa:	4b8f      	ldr	r3, [pc, #572]	@ (80018e8 <main+0x2c4>)
 80016ac:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
	    printf("Accel: X=%d, Y=%d, Z=%d | Gyro: X=%d, Y=%d, Z=%d\r\n",
 80016b0:	461a      	mov	r2, r3
	           MPU6050_Data.Gyro_X, MPU6050_Data.Gyro_Y, MPU6050_Data.Gyro_Z);
 80016b2:	4b8d      	ldr	r3, [pc, #564]	@ (80018e8 <main+0x2c4>)
 80016b4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
	    printf("Accel: X=%d, Y=%d, Z=%d | Gyro: X=%d, Y=%d, Z=%d\r\n",
 80016b8:	4619      	mov	r1, r3
	           MPU6050_Data.Gyro_X, MPU6050_Data.Gyro_Y, MPU6050_Data.Gyro_Z);
 80016ba:	4b8b      	ldr	r3, [pc, #556]	@ (80018e8 <main+0x2c4>)
 80016bc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
	    printf("Accel: X=%d, Y=%d, Z=%d | Gyro: X=%d, Y=%d, Z=%d\r\n",
 80016c0:	9302      	str	r3, [sp, #8]
 80016c2:	9101      	str	r1, [sp, #4]
 80016c4:	9200      	str	r2, [sp, #0]
 80016c6:	462b      	mov	r3, r5
 80016c8:	4622      	mov	r2, r4
 80016ca:	4601      	mov	r1, r0
 80016cc:	4887      	ldr	r0, [pc, #540]	@ (80018ec <main+0x2c8>)
 80016ce:	f006 ff67 	bl	80085a0 <iprintf>

	    // Read DHT11
	    DHT11_Read_Data();
 80016d2:	f7ff fed3 	bl	800147c <DHT11_Read_Data>
	    if (DHT11_Data_OK)
 80016d6:	4b86      	ldr	r3, [pc, #536]	@ (80018f0 <main+0x2cc>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d015      	beq.n	800170c <main+0xe8>
	    {
	        printf("Temperature: %.1f C, Humidity: %.1f %%\r\n", Temperature, Humidity);
 80016e0:	4b84      	ldr	r3, [pc, #528]	@ (80018f4 <main+0x2d0>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7fe ff4f 	bl	8000588 <__aeabi_f2d>
 80016ea:	4604      	mov	r4, r0
 80016ec:	460d      	mov	r5, r1
 80016ee:	4b82      	ldr	r3, [pc, #520]	@ (80018f8 <main+0x2d4>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7fe ff48 	bl	8000588 <__aeabi_f2d>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	e9cd 2300 	strd	r2, r3, [sp]
 8001700:	4622      	mov	r2, r4
 8001702:	462b      	mov	r3, r5
 8001704:	487d      	ldr	r0, [pc, #500]	@ (80018fc <main+0x2d8>)
 8001706:	f006 ff4b 	bl	80085a0 <iprintf>
 800170a:	e002      	b.n	8001712 <main+0xee>
	    }
	    else
	    {
	        printf("DHT11 Error: No response or Checksum mismatch!\r\n");
 800170c:	487c      	ldr	r0, [pc, #496]	@ (8001900 <main+0x2dc>)
 800170e:	f006 ffaf 	bl	8008670 <puts>
	    }

	    /* Send sensor data via CAN */
	    // ADC Data Transmission (Highest Priority, CAN ID: 0x100)
	    CAN_Message tx_msg_adc = {
 8001712:	f107 0320 	add.w	r3, r7, #32
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
 8001720:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001724:	623b      	str	r3, [r7, #32]
 8001726:	2304      	movs	r3, #4
 8001728:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	        .id = 0x100,
	        .dlc = 4,
	        .data = {(adc_value >> 8) & 0xFF, adc_value & 0xFF, 0x00, 0x00}
 800172c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800172e:	0a1b      	lsrs	r3, r3, #8
	    CAN_Message tx_msg_adc = {
 8001730:	b2db      	uxtb	r3, r3
 8001732:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8001736:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001738:	b2db      	uxtb	r3, r3
 800173a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	    };
	    UART_Print("Sending ADC CAN message (ID: 0x100)...\r\n");
 800173e:	4871      	ldr	r0, [pc, #452]	@ (8001904 <main+0x2e0>)
 8001740:	f7ff fd58 	bl	80011f4 <UART_Print>
	    MCP2515_Transmit(&hcan_tx, &tx_msg_adc);
 8001744:	f107 0320 	add.w	r3, r7, #32
 8001748:	4619      	mov	r1, r3
 800174a:	4863      	ldr	r0, [pc, #396]	@ (80018d8 <main+0x2b4>)
 800174c:	f000 fd7e 	bl	800224c <MCP2515_Transmit>

	    // Accelerometer Data Transmission (Second Priority, CAN ID: 0x200)
	    CAN_Message tx_msg_accel = {
 8001750:	f107 0310 	add.w	r3, r7, #16
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	2306      	movs	r3, #6
 8001766:	753b      	strb	r3, [r7, #20]
	        .id = 0x200,
	        .dlc = 6,
	        .data = {
	            (MPU6050_Data.Accel_X >> 8) & 0xFF, MPU6050_Data.Accel_X & 0xFF,
 8001768:	4b5f      	ldr	r3, [pc, #380]	@ (80018e8 <main+0x2c4>)
 800176a:	f9b3 3000 	ldrsh.w	r3, [r3]
	    CAN_Message tx_msg_accel = {
 800176e:	121b      	asrs	r3, r3, #8
 8001770:	b21b      	sxth	r3, r3
 8001772:	b2db      	uxtb	r3, r3
 8001774:	757b      	strb	r3, [r7, #21]
	            (MPU6050_Data.Accel_X >> 8) & 0xFF, MPU6050_Data.Accel_X & 0xFF,
 8001776:	4b5c      	ldr	r3, [pc, #368]	@ (80018e8 <main+0x2c4>)
 8001778:	f9b3 3000 	ldrsh.w	r3, [r3]
	    CAN_Message tx_msg_accel = {
 800177c:	b2db      	uxtb	r3, r3
 800177e:	75bb      	strb	r3, [r7, #22]
	            (MPU6050_Data.Accel_Y >> 8) & 0xFF, MPU6050_Data.Accel_Y & 0xFF,
 8001780:	4b59      	ldr	r3, [pc, #356]	@ (80018e8 <main+0x2c4>)
 8001782:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
	    CAN_Message tx_msg_accel = {
 8001786:	121b      	asrs	r3, r3, #8
 8001788:	b21b      	sxth	r3, r3
 800178a:	b2db      	uxtb	r3, r3
 800178c:	75fb      	strb	r3, [r7, #23]
	            (MPU6050_Data.Accel_Y >> 8) & 0xFF, MPU6050_Data.Accel_Y & 0xFF,
 800178e:	4b56      	ldr	r3, [pc, #344]	@ (80018e8 <main+0x2c4>)
 8001790:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
	    CAN_Message tx_msg_accel = {
 8001794:	b2db      	uxtb	r3, r3
 8001796:	763b      	strb	r3, [r7, #24]
	            (MPU6050_Data.Accel_Z >> 8) & 0xFF, MPU6050_Data.Accel_Z & 0xFF
 8001798:	4b53      	ldr	r3, [pc, #332]	@ (80018e8 <main+0x2c4>)
 800179a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	    CAN_Message tx_msg_accel = {
 800179e:	121b      	asrs	r3, r3, #8
 80017a0:	b21b      	sxth	r3, r3
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	767b      	strb	r3, [r7, #25]
	            (MPU6050_Data.Accel_Z >> 8) & 0xFF, MPU6050_Data.Accel_Z & 0xFF
 80017a6:	4b50      	ldr	r3, [pc, #320]	@ (80018e8 <main+0x2c4>)
 80017a8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	    CAN_Message tx_msg_accel = {
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	76bb      	strb	r3, [r7, #26]
	        }
	    };
	    UART_Print("Sending Accelerometer CAN message (ID: 0x200)...\r\n");
 80017b0:	4855      	ldr	r0, [pc, #340]	@ (8001908 <main+0x2e4>)
 80017b2:	f7ff fd1f 	bl	80011f4 <UART_Print>
	    MCP2515_Transmit(&hcan_tx, &tx_msg_accel);
 80017b6:	f107 0310 	add.w	r3, r7, #16
 80017ba:	4619      	mov	r1, r3
 80017bc:	4846      	ldr	r0, [pc, #280]	@ (80018d8 <main+0x2b4>)
 80017be:	f000 fd45 	bl	800224c <MCP2515_Transmit>

	    // Temperature Data Transmission (Lowest Priority, CAN ID: 0x300)
	    if (DHT11_Data_OK)
 80017c2:	4b4b      	ldr	r3, [pc, #300]	@ (80018f0 <main+0x2cc>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f000 810f 	beq.w	80019ec <main+0x3c8>
	    {
	        int16_t temp_int = (int16_t)(Temperature * 10); // e.g., 25.3°C -> 253
 80017ce:	4b49      	ldr	r3, [pc, #292]	@ (80018f4 <main+0x2d0>)
 80017d0:	edd3 7a00 	vldr	s15, [r3]
 80017d4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80017d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017e0:	ee17 3a90 	vmov	r3, s15
 80017e4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	        CAN_Message tx_msg_temp = {
 80017e8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80017ec:	603b      	str	r3, [r7, #0]
 80017ee:	2302      	movs	r3, #2
 80017f0:	713b      	strb	r3, [r7, #4]
 80017f2:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 80017f6:	121b      	asrs	r3, r3, #8
 80017f8:	b21b      	sxth	r3, r3
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	717b      	strb	r3, [r7, #5]
 80017fe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001802:	b2db      	uxtb	r3, r3
 8001804:	71bb      	strb	r3, [r7, #6]
 8001806:	2300      	movs	r3, #0
 8001808:	71fb      	strb	r3, [r7, #7]
 800180a:	2300      	movs	r3, #0
 800180c:	723b      	strb	r3, [r7, #8]
 800180e:	2300      	movs	r3, #0
 8001810:	727b      	strb	r3, [r7, #9]
 8001812:	2300      	movs	r3, #0
 8001814:	72bb      	strb	r3, [r7, #10]
 8001816:	2300      	movs	r3, #0
 8001818:	72fb      	strb	r3, [r7, #11]
 800181a:	2300      	movs	r3, #0
 800181c:	733b      	strb	r3, [r7, #12]
	            .id = 0x300,
	            .dlc = 2,
	            .data = {(temp_int >> 8) & 0xFF, temp_int & 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
	        };
	        UART_Print("Sending Temperature CAN message (ID: 0x300)...\r\n");
 800181e:	483b      	ldr	r0, [pc, #236]	@ (800190c <main+0x2e8>)
 8001820:	f7ff fce8 	bl	80011f4 <UART_Print>
	        MCP2515_Transmit(&hcan_tx, &tx_msg_temp);
 8001824:	463b      	mov	r3, r7
 8001826:	4619      	mov	r1, r3
 8001828:	482b      	ldr	r0, [pc, #172]	@ (80018d8 <main+0x2b4>)
 800182a:	f000 fd0f 	bl	800224c <MCP2515_Transmit>
	    }

	    /* Receive and process CAN messages */
	    while (MCP2515_Receive(&hcan_rx, &rx_msg)) // Process all available messages
 800182e:	e0dd      	b.n	80019ec <main+0x3c8>
	    {
	        sprintf(buf, "Received CAN ID: 0x%03lX, DLC: %d, Data: ", rx_msg.id, rx_msg.dlc);
 8001830:	4b37      	ldr	r3, [pc, #220]	@ (8001910 <main+0x2ec>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4b36      	ldr	r3, [pc, #216]	@ (8001910 <main+0x2ec>)
 8001836:	791b      	ldrb	r3, [r3, #4]
 8001838:	4936      	ldr	r1, [pc, #216]	@ (8001914 <main+0x2f0>)
 800183a:	4837      	ldr	r0, [pc, #220]	@ (8001918 <main+0x2f4>)
 800183c:	f006 ff20 	bl	8008680 <siprintf>
	        UART_Print(buf);
 8001840:	4835      	ldr	r0, [pc, #212]	@ (8001918 <main+0x2f4>)
 8001842:	f7ff fcd7 	bl	80011f4 <UART_Print>
	        for (uint8_t i = 0; i < rx_msg.dlc; i++)
 8001846:	2300      	movs	r3, #0
 8001848:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800184c:	e011      	b.n	8001872 <main+0x24e>
	        {
	            sprintf(buf, "%02X ", rx_msg.data[i]);
 800184e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001852:	4a2f      	ldr	r2, [pc, #188]	@ (8001910 <main+0x2ec>)
 8001854:	4413      	add	r3, r2
 8001856:	795b      	ldrb	r3, [r3, #5]
 8001858:	461a      	mov	r2, r3
 800185a:	4930      	ldr	r1, [pc, #192]	@ (800191c <main+0x2f8>)
 800185c:	482e      	ldr	r0, [pc, #184]	@ (8001918 <main+0x2f4>)
 800185e:	f006 ff0f 	bl	8008680 <siprintf>
	            UART_Print(buf);
 8001862:	482d      	ldr	r0, [pc, #180]	@ (8001918 <main+0x2f4>)
 8001864:	f7ff fcc6 	bl	80011f4 <UART_Print>
	        for (uint8_t i = 0; i < rx_msg.dlc; i++)
 8001868:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800186c:	3301      	adds	r3, #1
 800186e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8001872:	4b27      	ldr	r3, [pc, #156]	@ (8001910 <main+0x2ec>)
 8001874:	791b      	ldrb	r3, [r3, #4]
 8001876:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800187a:	429a      	cmp	r2, r3
 800187c:	d3e7      	bcc.n	800184e <main+0x22a>
	        }
	        UART_Print("\r\n");
 800187e:	4828      	ldr	r0, [pc, #160]	@ (8001920 <main+0x2fc>)
 8001880:	f7ff fcb8 	bl	80011f4 <UART_Print>

	        // Process received data based on CAN ID
	        if (rx_msg.id == 0x100 && rx_msg.dlc >= 2) // ADC data
 8001884:	4b22      	ldr	r3, [pc, #136]	@ (8001910 <main+0x2ec>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800188c:	d14c      	bne.n	8001928 <main+0x304>
 800188e:	4b20      	ldr	r3, [pc, #128]	@ (8001910 <main+0x2ec>)
 8001890:	791b      	ldrb	r3, [r3, #4]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d948      	bls.n	8001928 <main+0x304>
	        {
	            uint32_t received_adc = (rx_msg.data[0] << 8) | rx_msg.data[1];
 8001896:	4b1e      	ldr	r3, [pc, #120]	@ (8001910 <main+0x2ec>)
 8001898:	795b      	ldrb	r3, [r3, #5]
 800189a:	021b      	lsls	r3, r3, #8
 800189c:	4a1c      	ldr	r2, [pc, #112]	@ (8001910 <main+0x2ec>)
 800189e:	7992      	ldrb	r2, [r2, #6]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	            Update_PWM_Brightness(&htim1, TIM_CHANNEL_3, received_adc);
 80018a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80018a6:	2108      	movs	r1, #8
 80018a8:	4808      	ldr	r0, [pc, #32]	@ (80018cc <main+0x2a8>)
 80018aa:	f7ff fcd1 	bl	8001250 <Update_PWM_Brightness>
	            sprintf(buf, "Processed ADC: %lu, PWM value: %lu\r\n", received_adc, received_adc / 4);
 80018ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018b0:	089b      	lsrs	r3, r3, #2
 80018b2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80018b4:	491b      	ldr	r1, [pc, #108]	@ (8001924 <main+0x300>)
 80018b6:	4818      	ldr	r0, [pc, #96]	@ (8001918 <main+0x2f4>)
 80018b8:	f006 fee2 	bl	8008680 <siprintf>
	            UART_Print(buf);
 80018bc:	4816      	ldr	r0, [pc, #88]	@ (8001918 <main+0x2f4>)
 80018be:	f7ff fc99 	bl	80011f4 <UART_Print>
	        {
 80018c2:	e093      	b.n	80019ec <main+0x3c8>
 80018c4:	2000039c 	.word	0x2000039c
 80018c8:	0800bf54 	.word	0x0800bf54
 80018cc:	20000354 	.word	0x20000354
 80018d0:	0800bf6c 	.word	0x0800bf6c
 80018d4:	0007a120 	.word	0x0007a120
 80018d8:	20000000 	.word	0x20000000
 80018dc:	0800bf9c 	.word	0x0800bf9c
 80018e0:	2000000c 	.word	0x2000000c
 80018e4:	20000208 	.word	0x20000208
 80018e8:	200004d0 	.word	0x200004d0
 80018ec:	0800bfc8 	.word	0x0800bfc8
 80018f0:	2000043c 	.word	0x2000043c
 80018f4:	20000434 	.word	0x20000434
 80018f8:	20000438 	.word	0x20000438
 80018fc:	0800bffc 	.word	0x0800bffc
 8001900:	0800c028 	.word	0x0800c028
 8001904:	0800c058 	.word	0x0800c058
 8001908:	0800c084 	.word	0x0800c084
 800190c:	0800c0b8 	.word	0x0800c0b8
 8001910:	20000440 	.word	0x20000440
 8001914:	0800c0ec 	.word	0x0800c0ec
 8001918:	20000450 	.word	0x20000450
 800191c:	0800c118 	.word	0x0800c118
 8001920:	0800c120 	.word	0x0800c120
 8001924:	0800c124 	.word	0x0800c124
	        }
	        else if (rx_msg.id == 0x200 && rx_msg.dlc >= 6) // Accelerometer data
 8001928:	4b3d      	ldr	r3, [pc, #244]	@ (8001a20 <main+0x3fc>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001930:	d131      	bne.n	8001996 <main+0x372>
 8001932:	4b3b      	ldr	r3, [pc, #236]	@ (8001a20 <main+0x3fc>)
 8001934:	791b      	ldrb	r3, [r3, #4]
 8001936:	2b05      	cmp	r3, #5
 8001938:	d92d      	bls.n	8001996 <main+0x372>
	        {
	            int16_t accel_x = (rx_msg.data[0] << 8) | rx_msg.data[1];
 800193a:	4b39      	ldr	r3, [pc, #228]	@ (8001a20 <main+0x3fc>)
 800193c:	795b      	ldrb	r3, [r3, #5]
 800193e:	b21b      	sxth	r3, r3
 8001940:	021b      	lsls	r3, r3, #8
 8001942:	b21a      	sxth	r2, r3
 8001944:	4b36      	ldr	r3, [pc, #216]	@ (8001a20 <main+0x3fc>)
 8001946:	799b      	ldrb	r3, [r3, #6]
 8001948:	b21b      	sxth	r3, r3
 800194a:	4313      	orrs	r3, r2
 800194c:	877b      	strh	r3, [r7, #58]	@ 0x3a
	            int16_t accel_y = (rx_msg.data[2] << 8) | rx_msg.data[3];
 800194e:	4b34      	ldr	r3, [pc, #208]	@ (8001a20 <main+0x3fc>)
 8001950:	79db      	ldrb	r3, [r3, #7]
 8001952:	b21b      	sxth	r3, r3
 8001954:	021b      	lsls	r3, r3, #8
 8001956:	b21a      	sxth	r2, r3
 8001958:	4b31      	ldr	r3, [pc, #196]	@ (8001a20 <main+0x3fc>)
 800195a:	7a1b      	ldrb	r3, [r3, #8]
 800195c:	b21b      	sxth	r3, r3
 800195e:	4313      	orrs	r3, r2
 8001960:	873b      	strh	r3, [r7, #56]	@ 0x38
	            int16_t accel_z = (rx_msg.data[4] << 8) | rx_msg.data[5];
 8001962:	4b2f      	ldr	r3, [pc, #188]	@ (8001a20 <main+0x3fc>)
 8001964:	7a5b      	ldrb	r3, [r3, #9]
 8001966:	b21b      	sxth	r3, r3
 8001968:	021b      	lsls	r3, r3, #8
 800196a:	b21a      	sxth	r2, r3
 800196c:	4b2c      	ldr	r3, [pc, #176]	@ (8001a20 <main+0x3fc>)
 800196e:	7a9b      	ldrb	r3, [r3, #10]
 8001970:	b21b      	sxth	r3, r3
 8001972:	4313      	orrs	r3, r2
 8001974:	86fb      	strh	r3, [r7, #54]	@ 0x36
	            sprintf(buf, "Processed Accel: X=%d, Y=%d, Z=%d\r\n", accel_x, accel_y, accel_z);
 8001976:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	@ 0x3a
 800197a:	f9b7 1038 	ldrsh.w	r1, [r7, #56]	@ 0x38
 800197e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	460b      	mov	r3, r1
 8001986:	4927      	ldr	r1, [pc, #156]	@ (8001a24 <main+0x400>)
 8001988:	4827      	ldr	r0, [pc, #156]	@ (8001a28 <main+0x404>)
 800198a:	f006 fe79 	bl	8008680 <siprintf>
	            UART_Print(buf);
 800198e:	4826      	ldr	r0, [pc, #152]	@ (8001a28 <main+0x404>)
 8001990:	f7ff fc30 	bl	80011f4 <UART_Print>
	        {
 8001994:	e02a      	b.n	80019ec <main+0x3c8>
	        }
	        else if (rx_msg.id == 0x300 && rx_msg.dlc >= 2) // Temperature data
 8001996:	4b22      	ldr	r3, [pc, #136]	@ (8001a20 <main+0x3fc>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800199e:	d125      	bne.n	80019ec <main+0x3c8>
 80019a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a20 <main+0x3fc>)
 80019a2:	791b      	ldrb	r3, [r3, #4]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d921      	bls.n	80019ec <main+0x3c8>
	        {
	            int16_t temp_int = (rx_msg.data[0] << 8) | rx_msg.data[1];
 80019a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001a20 <main+0x3fc>)
 80019aa:	795b      	ldrb	r3, [r3, #5]
 80019ac:	b21b      	sxth	r3, r3
 80019ae:	021b      	lsls	r3, r3, #8
 80019b0:	b21a      	sxth	r2, r3
 80019b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001a20 <main+0x3fc>)
 80019b4:	799b      	ldrb	r3, [r3, #6]
 80019b6:	b21b      	sxth	r3, r3
 80019b8:	4313      	orrs	r3, r2
 80019ba:	86bb      	strh	r3, [r7, #52]	@ 0x34
	            float received_temp = (float)temp_int / 10.0f;
 80019bc:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 80019c0:	ee07 3a90 	vmov	s15, r3
 80019c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019c8:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80019cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019d0:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	            sprintf(buf, "Processed Temperature: %.1f C\r\n", received_temp);
 80019d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80019d6:	f7fe fdd7 	bl	8000588 <__aeabi_f2d>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	4913      	ldr	r1, [pc, #76]	@ (8001a2c <main+0x408>)
 80019e0:	4811      	ldr	r0, [pc, #68]	@ (8001a28 <main+0x404>)
 80019e2:	f006 fe4d 	bl	8008680 <siprintf>
	            UART_Print(buf);
 80019e6:	4810      	ldr	r0, [pc, #64]	@ (8001a28 <main+0x404>)
 80019e8:	f7ff fc04 	bl	80011f4 <UART_Print>
	    while (MCP2515_Receive(&hcan_rx, &rx_msg)) // Process all available messages
 80019ec:	490c      	ldr	r1, [pc, #48]	@ (8001a20 <main+0x3fc>)
 80019ee:	4810      	ldr	r0, [pc, #64]	@ (8001a30 <main+0x40c>)
 80019f0:	f000 fc6d 	bl	80022ce <MCP2515_Receive>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f47f af1a 	bne.w	8001830 <main+0x20c>
	        }
	    }

	    /* Print ADC and PWM values for debugging (local sensor) */
	    uint32_t pwm_pulse_value = adc_value / 4;
 80019fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019fe:	089b      	lsrs	r3, r3, #2
 8001a00:	643b      	str	r3, [r7, #64]	@ 0x40
	    sprintf(buf, "Local ADC Value: %lu, PWM value: %lu\r\n", adc_value, pwm_pulse_value);
 8001a02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001a06:	490b      	ldr	r1, [pc, #44]	@ (8001a34 <main+0x410>)
 8001a08:	4807      	ldr	r0, [pc, #28]	@ (8001a28 <main+0x404>)
 8001a0a:	f006 fe39 	bl	8008680 <siprintf>
	    UART_Print(buf);
 8001a0e:	4806      	ldr	r0, [pc, #24]	@ (8001a28 <main+0x404>)
 8001a10:	f7ff fbf0 	bl	80011f4 <UART_Print>

	    HAL_Delay(2000); // Wait 2 seconds before next cycle
 8001a14:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001a18:	f001 f83a 	bl	8002a90 <HAL_Delay>
	{
 8001a1c:	e633      	b.n	8001686 <main+0x62>
 8001a1e:	bf00      	nop
 8001a20:	20000440 	.word	0x20000440
 8001a24:	0800c14c 	.word	0x0800c14c
 8001a28:	20000450 	.word	0x20000450
 8001a2c:	0800c170 	.word	0x0800c170
 8001a30:	2000000c 	.word	0x2000000c
 8001a34:	0800c190 	.word	0x0800c190

08001a38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b094      	sub	sp, #80	@ 0x50
 8001a3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a3e:	f107 031c 	add.w	r3, r7, #28
 8001a42:	2234      	movs	r2, #52	@ 0x34
 8001a44:	2100      	movs	r1, #0
 8001a46:	4618      	mov	r0, r3
 8001a48:	f006 ff14 	bl	8008874 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a4c:	f107 0308 	add.w	r3, r7, #8
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	607b      	str	r3, [r7, #4]
 8001a60:	4b2c      	ldr	r3, [pc, #176]	@ (8001b14 <SystemClock_Config+0xdc>)
 8001a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a64:	4a2b      	ldr	r2, [pc, #172]	@ (8001b14 <SystemClock_Config+0xdc>)
 8001a66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a6c:	4b29      	ldr	r3, [pc, #164]	@ (8001b14 <SystemClock_Config+0xdc>)
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a74:	607b      	str	r3, [r7, #4]
 8001a76:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a78:	2300      	movs	r3, #0
 8001a7a:	603b      	str	r3, [r7, #0]
 8001a7c:	4b26      	ldr	r3, [pc, #152]	@ (8001b18 <SystemClock_Config+0xe0>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a25      	ldr	r2, [pc, #148]	@ (8001b18 <SystemClock_Config+0xe0>)
 8001a82:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a86:	6013      	str	r3, [r2, #0]
 8001a88:	4b23      	ldr	r3, [pc, #140]	@ (8001b18 <SystemClock_Config+0xe0>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a90:	603b      	str	r3, [r7, #0]
 8001a92:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a94:	2301      	movs	r3, #1
 8001a96:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a98:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a9c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001aa2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001aa6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001aa8:	2304      	movs	r3, #4
 8001aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001aac:	23b4      	movs	r3, #180	@ 0xb4
 8001aae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001abc:	f107 031c 	add.w	r3, r7, #28
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f003 fa83 	bl	8004fcc <HAL_RCC_OscConfig>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001acc:	f000 fad2 	bl	8002074 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001ad0:	f002 fee2 	bl	8004898 <HAL_PWREx_EnableOverDrive>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001ada:	f000 facb 	bl	8002074 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ade:	230f      	movs	r3, #15
 8001ae0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001aea:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001aee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001af0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001af4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001af6:	f107 0308 	add.w	r3, r7, #8
 8001afa:	2105      	movs	r1, #5
 8001afc:	4618      	mov	r0, r3
 8001afe:	f002 ff1b 	bl	8004938 <HAL_RCC_ClockConfig>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001b08:	f000 fab4 	bl	8002074 <Error_Handler>
  }
}
 8001b0c:	bf00      	nop
 8001b0e:	3750      	adds	r7, #80	@ 0x50
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40023800 	.word	0x40023800
 8001b18:	40007000 	.word	0x40007000

08001b1c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b22:	463b      	mov	r3, r7
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001b2e:	4b21      	ldr	r3, [pc, #132]	@ (8001bb4 <MX_ADC1_Init+0x98>)
 8001b30:	4a21      	ldr	r2, [pc, #132]	@ (8001bb8 <MX_ADC1_Init+0x9c>)
 8001b32:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b34:	4b1f      	ldr	r3, [pc, #124]	@ (8001bb4 <MX_ADC1_Init+0x98>)
 8001b36:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b3a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b3c:	4b1d      	ldr	r3, [pc, #116]	@ (8001bb4 <MX_ADC1_Init+0x98>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001b42:	4b1c      	ldr	r3, [pc, #112]	@ (8001bb4 <MX_ADC1_Init+0x98>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b48:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb4 <MX_ADC1_Init+0x98>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b4e:	4b19      	ldr	r3, [pc, #100]	@ (8001bb4 <MX_ADC1_Init+0x98>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b56:	4b17      	ldr	r3, [pc, #92]	@ (8001bb4 <MX_ADC1_Init+0x98>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b5c:	4b15      	ldr	r3, [pc, #84]	@ (8001bb4 <MX_ADC1_Init+0x98>)
 8001b5e:	4a17      	ldr	r2, [pc, #92]	@ (8001bbc <MX_ADC1_Init+0xa0>)
 8001b60:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b62:	4b14      	ldr	r3, [pc, #80]	@ (8001bb4 <MX_ADC1_Init+0x98>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b68:	4b12      	ldr	r3, [pc, #72]	@ (8001bb4 <MX_ADC1_Init+0x98>)
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b6e:	4b11      	ldr	r3, [pc, #68]	@ (8001bb4 <MX_ADC1_Init+0x98>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b76:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb4 <MX_ADC1_Init+0x98>)
 8001b78:	2201      	movs	r2, #1
 8001b7a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b7c:	480d      	ldr	r0, [pc, #52]	@ (8001bb4 <MX_ADC1_Init+0x98>)
 8001b7e:	f000 ffab 	bl	8002ad8 <HAL_ADC_Init>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001b88:	f000 fa74 	bl	8002074 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b90:	2301      	movs	r3, #1
 8001b92:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b94:	2300      	movs	r3, #0
 8001b96:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b98:	463b      	mov	r3, r7
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4805      	ldr	r0, [pc, #20]	@ (8001bb4 <MX_ADC1_Init+0x98>)
 8001b9e:	f001 f97d 	bl	8002e9c <HAL_ADC_ConfigChannel>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001ba8:	f000 fa64 	bl	8002074 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001bac:	bf00      	nop
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20000208 	.word	0x20000208
 8001bb8:	40012000 	.word	0x40012000
 8001bbc:	0f000001 	.word	0x0f000001

08001bc0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001bc4:	4b12      	ldr	r3, [pc, #72]	@ (8001c10 <MX_I2C1_Init+0x50>)
 8001bc6:	4a13      	ldr	r2, [pc, #76]	@ (8001c14 <MX_I2C1_Init+0x54>)
 8001bc8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001bca:	4b11      	ldr	r3, [pc, #68]	@ (8001c10 <MX_I2C1_Init+0x50>)
 8001bcc:	4a12      	ldr	r2, [pc, #72]	@ (8001c18 <MX_I2C1_Init+0x58>)
 8001bce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001c10 <MX_I2C1_Init+0x50>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c10 <MX_I2C1_Init+0x50>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001c10 <MX_I2C1_Init+0x50>)
 8001bde:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001be2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001be4:	4b0a      	ldr	r3, [pc, #40]	@ (8001c10 <MX_I2C1_Init+0x50>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001bea:	4b09      	ldr	r3, [pc, #36]	@ (8001c10 <MX_I2C1_Init+0x50>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bf0:	4b07      	ldr	r3, [pc, #28]	@ (8001c10 <MX_I2C1_Init+0x50>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bf6:	4b06      	ldr	r3, [pc, #24]	@ (8001c10 <MX_I2C1_Init+0x50>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bfc:	4804      	ldr	r0, [pc, #16]	@ (8001c10 <MX_I2C1_Init+0x50>)
 8001bfe:	f001 fe27 	bl	8003850 <HAL_I2C_Init>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c08:	f000 fa34 	bl	8002074 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c0c:	bf00      	nop
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20000250 	.word	0x20000250
 8001c14:	40005400 	.word	0x40005400
 8001c18:	000186a0 	.word	0x000186a0

08001c1c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c20:	4b17      	ldr	r3, [pc, #92]	@ (8001c80 <MX_SPI1_Init+0x64>)
 8001c22:	4a18      	ldr	r2, [pc, #96]	@ (8001c84 <MX_SPI1_Init+0x68>)
 8001c24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c26:	4b16      	ldr	r3, [pc, #88]	@ (8001c80 <MX_SPI1_Init+0x64>)
 8001c28:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001c2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c2e:	4b14      	ldr	r3, [pc, #80]	@ (8001c80 <MX_SPI1_Init+0x64>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c34:	4b12      	ldr	r3, [pc, #72]	@ (8001c80 <MX_SPI1_Init+0x64>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c3a:	4b11      	ldr	r3, [pc, #68]	@ (8001c80 <MX_SPI1_Init+0x64>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c40:	4b0f      	ldr	r3, [pc, #60]	@ (8001c80 <MX_SPI1_Init+0x64>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c46:	4b0e      	ldr	r3, [pc, #56]	@ (8001c80 <MX_SPI1_Init+0x64>)
 8001c48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c4c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c80 <MX_SPI1_Init+0x64>)
 8001c50:	2218      	movs	r2, #24
 8001c52:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c54:	4b0a      	ldr	r3, [pc, #40]	@ (8001c80 <MX_SPI1_Init+0x64>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c5a:	4b09      	ldr	r3, [pc, #36]	@ (8001c80 <MX_SPI1_Init+0x64>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c60:	4b07      	ldr	r3, [pc, #28]	@ (8001c80 <MX_SPI1_Init+0x64>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001c66:	4b06      	ldr	r3, [pc, #24]	@ (8001c80 <MX_SPI1_Init+0x64>)
 8001c68:	220a      	movs	r2, #10
 8001c6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c6c:	4804      	ldr	r0, [pc, #16]	@ (8001c80 <MX_SPI1_Init+0x64>)
 8001c6e:	f003 fc4b 	bl	8005508 <HAL_SPI_Init>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001c78:	f000 f9fc 	bl	8002074 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c7c:	bf00      	nop
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	200002a4 	.word	0x200002a4
 8001c84:	40013000 	.word	0x40013000

08001c88 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001c8c:	4b17      	ldr	r3, [pc, #92]	@ (8001cec <MX_SPI3_Init+0x64>)
 8001c8e:	4a18      	ldr	r2, [pc, #96]	@ (8001cf0 <MX_SPI3_Init+0x68>)
 8001c90:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001c92:	4b16      	ldr	r3, [pc, #88]	@ (8001cec <MX_SPI3_Init+0x64>)
 8001c94:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001c98:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001c9a:	4b14      	ldr	r3, [pc, #80]	@ (8001cec <MX_SPI3_Init+0x64>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ca0:	4b12      	ldr	r3, [pc, #72]	@ (8001cec <MX_SPI3_Init+0x64>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ca6:	4b11      	ldr	r3, [pc, #68]	@ (8001cec <MX_SPI3_Init+0x64>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cac:	4b0f      	ldr	r3, [pc, #60]	@ (8001cec <MX_SPI3_Init+0x64>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001cec <MX_SPI3_Init+0x64>)
 8001cb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cb8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001cba:	4b0c      	ldr	r3, [pc, #48]	@ (8001cec <MX_SPI3_Init+0x64>)
 8001cbc:	2210      	movs	r2, #16
 8001cbe:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8001cec <MX_SPI3_Init+0x64>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cc6:	4b09      	ldr	r3, [pc, #36]	@ (8001cec <MX_SPI3_Init+0x64>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ccc:	4b07      	ldr	r3, [pc, #28]	@ (8001cec <MX_SPI3_Init+0x64>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001cd2:	4b06      	ldr	r3, [pc, #24]	@ (8001cec <MX_SPI3_Init+0x64>)
 8001cd4:	220a      	movs	r2, #10
 8001cd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001cd8:	4804      	ldr	r0, [pc, #16]	@ (8001cec <MX_SPI3_Init+0x64>)
 8001cda:	f003 fc15 	bl	8005508 <HAL_SPI_Init>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001ce4:	f000 f9c6 	bl	8002074 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001ce8:	bf00      	nop
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	200002fc 	.word	0x200002fc
 8001cf0:	40003c00 	.word	0x40003c00

08001cf4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b096      	sub	sp, #88	@ 0x58
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cfa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	605a      	str	r2, [r3, #4]
 8001d04:	609a      	str	r2, [r3, #8]
 8001d06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d08:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	605a      	str	r2, [r3, #4]
 8001d1c:	609a      	str	r2, [r3, #8]
 8001d1e:	60da      	str	r2, [r3, #12]
 8001d20:	611a      	str	r2, [r3, #16]
 8001d22:	615a      	str	r2, [r3, #20]
 8001d24:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d26:	1d3b      	adds	r3, r7, #4
 8001d28:	2220      	movs	r2, #32
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f006 fda1 	bl	8008874 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d32:	4b3f      	ldr	r3, [pc, #252]	@ (8001e30 <MX_TIM1_Init+0x13c>)
 8001d34:	4a3f      	ldr	r2, [pc, #252]	@ (8001e34 <MX_TIM1_Init+0x140>)
 8001d36:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 179;
 8001d38:	4b3d      	ldr	r3, [pc, #244]	@ (8001e30 <MX_TIM1_Init+0x13c>)
 8001d3a:	22b3      	movs	r2, #179	@ 0xb3
 8001d3c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d3e:	4b3c      	ldr	r3, [pc, #240]	@ (8001e30 <MX_TIM1_Init+0x13c>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001d44:	4b3a      	ldr	r3, [pc, #232]	@ (8001e30 <MX_TIM1_Init+0x13c>)
 8001d46:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d4a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d4c:	4b38      	ldr	r3, [pc, #224]	@ (8001e30 <MX_TIM1_Init+0x13c>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d52:	4b37      	ldr	r3, [pc, #220]	@ (8001e30 <MX_TIM1_Init+0x13c>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d58:	4b35      	ldr	r3, [pc, #212]	@ (8001e30 <MX_TIM1_Init+0x13c>)
 8001d5a:	2280      	movs	r2, #128	@ 0x80
 8001d5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d5e:	4834      	ldr	r0, [pc, #208]	@ (8001e30 <MX_TIM1_Init+0x13c>)
 8001d60:	f004 f9a4 	bl	80060ac <HAL_TIM_Base_Init>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001d6a:	f000 f983 	bl	8002074 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d72:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d74:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001d78:	4619      	mov	r1, r3
 8001d7a:	482d      	ldr	r0, [pc, #180]	@ (8001e30 <MX_TIM1_Init+0x13c>)
 8001d7c:	f004 fc32 	bl	80065e4 <HAL_TIM_ConfigClockSource>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001d86:	f000 f975 	bl	8002074 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d8a:	4829      	ldr	r0, [pc, #164]	@ (8001e30 <MX_TIM1_Init+0x13c>)
 8001d8c:	f004 fa46 	bl	800621c <HAL_TIM_PWM_Init>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001d96:	f000 f96d 	bl	8002074 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001da2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001da6:	4619      	mov	r1, r3
 8001da8:	4821      	ldr	r0, [pc, #132]	@ (8001e30 <MX_TIM1_Init+0x13c>)
 8001daa:	f004 fff9 	bl	8006da0 <HAL_TIMEx_MasterConfigSynchronization>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001db4:	f000 f95e 	bl	8002074 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001db8:	2360      	movs	r3, #96	@ 0x60
 8001dba:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 1000;
 8001dbc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001dd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dda:	2208      	movs	r2, #8
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4814      	ldr	r0, [pc, #80]	@ (8001e30 <MX_TIM1_Init+0x13c>)
 8001de0:	f004 fb3e 	bl	8006460 <HAL_TIM_PWM_ConfigChannel>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001dea:	f000 f943 	bl	8002074 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001dee:	2300      	movs	r3, #0
 8001df0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001df2:	2300      	movs	r3, #0
 8001df4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001df6:	2300      	movs	r3, #0
 8001df8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e06:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e0c:	1d3b      	adds	r3, r7, #4
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4807      	ldr	r0, [pc, #28]	@ (8001e30 <MX_TIM1_Init+0x13c>)
 8001e12:	f005 f841 	bl	8006e98 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001e1c:	f000 f92a 	bl	8002074 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e20:	4803      	ldr	r0, [pc, #12]	@ (8001e30 <MX_TIM1_Init+0x13c>)
 8001e22:	f000 fc0f 	bl	8002644 <HAL_TIM_MspPostInit>

}
 8001e26:	bf00      	nop
 8001e28:	3758      	adds	r7, #88	@ 0x58
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20000354 	.word	0x20000354
 8001e34:	40010000 	.word	0x40010000

08001e38 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e3e:	f107 0308 	add.w	r3, r7, #8
 8001e42:	2200      	movs	r2, #0
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	605a      	str	r2, [r3, #4]
 8001e48:	609a      	str	r2, [r3, #8]
 8001e4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e4c:	463b      	mov	r3, r7
 8001e4e:	2200      	movs	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e54:	4b1d      	ldr	r3, [pc, #116]	@ (8001ecc <MX_TIM2_Init+0x94>)
 8001e56:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 89;
 8001e5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001ecc <MX_TIM2_Init+0x94>)
 8001e5e:	2259      	movs	r2, #89	@ 0x59
 8001e60:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e62:	4b1a      	ldr	r3, [pc, #104]	@ (8001ecc <MX_TIM2_Init+0x94>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001e68:	4b18      	ldr	r3, [pc, #96]	@ (8001ecc <MX_TIM2_Init+0x94>)
 8001e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8001e6e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e70:	4b16      	ldr	r3, [pc, #88]	@ (8001ecc <MX_TIM2_Init+0x94>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e76:	4b15      	ldr	r3, [pc, #84]	@ (8001ecc <MX_TIM2_Init+0x94>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e7c:	4813      	ldr	r0, [pc, #76]	@ (8001ecc <MX_TIM2_Init+0x94>)
 8001e7e:	f004 f915 	bl	80060ac <HAL_TIM_Base_Init>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001e88:	f000 f8f4 	bl	8002074 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e92:	f107 0308 	add.w	r3, r7, #8
 8001e96:	4619      	mov	r1, r3
 8001e98:	480c      	ldr	r0, [pc, #48]	@ (8001ecc <MX_TIM2_Init+0x94>)
 8001e9a:	f004 fba3 	bl	80065e4 <HAL_TIM_ConfigClockSource>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001ea4:	f000 f8e6 	bl	8002074 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eac:	2300      	movs	r3, #0
 8001eae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001eb0:	463b      	mov	r3, r7
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4805      	ldr	r0, [pc, #20]	@ (8001ecc <MX_TIM2_Init+0x94>)
 8001eb6:	f004 ff73 	bl	8006da0 <HAL_TIMEx_MasterConfigSynchronization>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001ec0:	f000 f8d8 	bl	8002074 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ec4:	bf00      	nop
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	2000039c 	.word	0x2000039c

08001ed0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ed4:	4b11      	ldr	r3, [pc, #68]	@ (8001f1c <MX_USART2_UART_Init+0x4c>)
 8001ed6:	4a12      	ldr	r2, [pc, #72]	@ (8001f20 <MX_USART2_UART_Init+0x50>)
 8001ed8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001eda:	4b10      	ldr	r3, [pc, #64]	@ (8001f1c <MX_USART2_UART_Init+0x4c>)
 8001edc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ee0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8001f1c <MX_USART2_UART_Init+0x4c>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8001f1c <MX_USART2_UART_Init+0x4c>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001eee:	4b0b      	ldr	r3, [pc, #44]	@ (8001f1c <MX_USART2_UART_Init+0x4c>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ef4:	4b09      	ldr	r3, [pc, #36]	@ (8001f1c <MX_USART2_UART_Init+0x4c>)
 8001ef6:	220c      	movs	r2, #12
 8001ef8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001efa:	4b08      	ldr	r3, [pc, #32]	@ (8001f1c <MX_USART2_UART_Init+0x4c>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f00:	4b06      	ldr	r3, [pc, #24]	@ (8001f1c <MX_USART2_UART_Init+0x4c>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f06:	4805      	ldr	r0, [pc, #20]	@ (8001f1c <MX_USART2_UART_Init+0x4c>)
 8001f08:	f005 f818 	bl	8006f3c <HAL_UART_Init>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f12:	f000 f8af 	bl	8002074 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	200003e4 	.word	0x200003e4
 8001f20:	40004400 	.word	0x40004400

08001f24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08a      	sub	sp, #40	@ 0x28
 8001f28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2a:	f107 0314 	add.w	r3, r7, #20
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	605a      	str	r2, [r3, #4]
 8001f34:	609a      	str	r2, [r3, #8]
 8001f36:	60da      	str	r2, [r3, #12]
 8001f38:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	613b      	str	r3, [r7, #16]
 8001f3e:	4b48      	ldr	r3, [pc, #288]	@ (8002060 <MX_GPIO_Init+0x13c>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f42:	4a47      	ldr	r2, [pc, #284]	@ (8002060 <MX_GPIO_Init+0x13c>)
 8001f44:	f043 0304 	orr.w	r3, r3, #4
 8001f48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f4a:	4b45      	ldr	r3, [pc, #276]	@ (8002060 <MX_GPIO_Init+0x13c>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4e:	f003 0304 	and.w	r3, r3, #4
 8001f52:	613b      	str	r3, [r7, #16]
 8001f54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	60fb      	str	r3, [r7, #12]
 8001f5a:	4b41      	ldr	r3, [pc, #260]	@ (8002060 <MX_GPIO_Init+0x13c>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5e:	4a40      	ldr	r2, [pc, #256]	@ (8002060 <MX_GPIO_Init+0x13c>)
 8001f60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f66:	4b3e      	ldr	r3, [pc, #248]	@ (8002060 <MX_GPIO_Init+0x13c>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	60bb      	str	r3, [r7, #8]
 8001f76:	4b3a      	ldr	r3, [pc, #232]	@ (8002060 <MX_GPIO_Init+0x13c>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7a:	4a39      	ldr	r2, [pc, #228]	@ (8002060 <MX_GPIO_Init+0x13c>)
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f82:	4b37      	ldr	r3, [pc, #220]	@ (8002060 <MX_GPIO_Init+0x13c>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	60bb      	str	r3, [r7, #8]
 8001f8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	607b      	str	r3, [r7, #4]
 8001f92:	4b33      	ldr	r3, [pc, #204]	@ (8002060 <MX_GPIO_Init+0x13c>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f96:	4a32      	ldr	r2, [pc, #200]	@ (8002060 <MX_GPIO_Init+0x13c>)
 8001f98:	f043 0308 	orr.w	r3, r3, #8
 8001f9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f9e:	4b30      	ldr	r3, [pc, #192]	@ (8002060 <MX_GPIO_Init+0x13c>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	607b      	str	r3, [r7, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	603b      	str	r3, [r7, #0]
 8001fae:	4b2c      	ldr	r3, [pc, #176]	@ (8002060 <MX_GPIO_Init+0x13c>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb2:	4a2b      	ldr	r2, [pc, #172]	@ (8002060 <MX_GPIO_Init+0x13c>)
 8001fb4:	f043 0302 	orr.w	r3, r3, #2
 8001fb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fba:	4b29      	ldr	r3, [pc, #164]	@ (8002060 <MX_GPIO_Init+0x13c>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	603b      	str	r3, [r7, #0]
 8001fc4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_DATA_GPIO_Port, DHT11_DATA_Pin, GPIO_PIN_RESET);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001fcc:	4825      	ldr	r0, [pc, #148]	@ (8002064 <MX_GPIO_Init+0x140>)
 8001fce:	f001 fc25 	bl	800381c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCP2515_CS_TX_GPIO_Port, MCP2515_CS_TX_Pin, GPIO_PIN_RESET);
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	2104      	movs	r1, #4
 8001fd6:	4824      	ldr	r0, [pc, #144]	@ (8002068 <MX_GPIO_Init+0x144>)
 8001fd8:	f001 fc20 	bl	800381c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCP2515_CS_RX_GPIO_Port, MCP2515_CS_RX_Pin, GPIO_PIN_RESET);
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2140      	movs	r1, #64	@ 0x40
 8001fe0:	4822      	ldr	r0, [pc, #136]	@ (800206c <MX_GPIO_Init+0x148>)
 8001fe2:	f001 fc1b 	bl	800381c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001fe6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001fea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001fec:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001ff0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ff6:	f107 0314 	add.w	r3, r7, #20
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	481c      	ldr	r0, [pc, #112]	@ (8002070 <MX_GPIO_Init+0x14c>)
 8001ffe:	f001 fa61 	bl	80034c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_DATA_Pin */
  GPIO_InitStruct.Pin = DHT11_DATA_Pin;
 8002002:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002006:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002008:	2301      	movs	r3, #1
 800200a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200c:	2300      	movs	r3, #0
 800200e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002010:	2300      	movs	r3, #0
 8002012:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DHT11_DATA_GPIO_Port, &GPIO_InitStruct);
 8002014:	f107 0314 	add.w	r3, r7, #20
 8002018:	4619      	mov	r1, r3
 800201a:	4812      	ldr	r0, [pc, #72]	@ (8002064 <MX_GPIO_Init+0x140>)
 800201c:	f001 fa52 	bl	80034c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCP2515_CS_TX_Pin */
  GPIO_InitStruct.Pin = MCP2515_CS_TX_Pin;
 8002020:	2304      	movs	r3, #4
 8002022:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002024:	2301      	movs	r3, #1
 8002026:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002028:	2300      	movs	r3, #0
 800202a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202c:	2300      	movs	r3, #0
 800202e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MCP2515_CS_TX_GPIO_Port, &GPIO_InitStruct);
 8002030:	f107 0314 	add.w	r3, r7, #20
 8002034:	4619      	mov	r1, r3
 8002036:	480c      	ldr	r0, [pc, #48]	@ (8002068 <MX_GPIO_Init+0x144>)
 8002038:	f001 fa44 	bl	80034c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCP2515_CS_RX_Pin */
  GPIO_InitStruct.Pin = MCP2515_CS_RX_Pin;
 800203c:	2340      	movs	r3, #64	@ 0x40
 800203e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002040:	2301      	movs	r3, #1
 8002042:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002048:	2300      	movs	r3, #0
 800204a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MCP2515_CS_RX_GPIO_Port, &GPIO_InitStruct);
 800204c:	f107 0314 	add.w	r3, r7, #20
 8002050:	4619      	mov	r1, r3
 8002052:	4806      	ldr	r0, [pc, #24]	@ (800206c <MX_GPIO_Init+0x148>)
 8002054:	f001 fa36 	bl	80034c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002058:	bf00      	nop
 800205a:	3728      	adds	r7, #40	@ 0x28
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40023800 	.word	0x40023800
 8002064:	40020000 	.word	0x40020000
 8002068:	40020c00 	.word	0x40020c00
 800206c:	40020400 	.word	0x40020400
 8002070:	40020800 	.word	0x40020800

08002074 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002078:	b672      	cpsid	i
}
 800207a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800207c:	bf00      	nop
 800207e:	e7fd      	b.n	800207c <Error_Handler+0x8>

08002080 <MCP2515_Select>:
#include "mcp2515.h"
#include <string.h>

// Helper function to control CS pin
static void MCP2515_Select(MCP2515_Handle *hcan) {
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(hcan->cs_port, hcan->cs_pin, GPIO_PIN_RESET);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6858      	ldr	r0, [r3, #4]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	891b      	ldrh	r3, [r3, #8]
 8002090:	2200      	movs	r2, #0
 8002092:	4619      	mov	r1, r3
 8002094:	f001 fbc2 	bl	800381c <HAL_GPIO_WritePin>
}
 8002098:	bf00      	nop
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <MCP2515_Deselect>:

static void MCP2515_Deselect(MCP2515_Handle *hcan) {
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(hcan->cs_port, hcan->cs_pin, GPIO_PIN_SET);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6858      	ldr	r0, [r3, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	891b      	ldrh	r3, [r3, #8]
 80020b0:	2201      	movs	r2, #1
 80020b2:	4619      	mov	r1, r3
 80020b4:	f001 fbb2 	bl	800381c <HAL_GPIO_WritePin>
}
 80020b8:	bf00      	nop
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <MCP2515_WriteReg>:

// Write to MCP2515 register
void MCP2515_WriteReg(MCP2515_Handle *hcan, uint8_t reg, uint8_t value) {
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	460b      	mov	r3, r1
 80020ca:	70fb      	strb	r3, [r7, #3]
 80020cc:	4613      	mov	r3, r2
 80020ce:	70bb      	strb	r3, [r7, #2]
    uint8_t tx_buf[3] = {MCP2515_WRITE, reg, value};
 80020d0:	2302      	movs	r3, #2
 80020d2:	733b      	strb	r3, [r7, #12]
 80020d4:	78fb      	ldrb	r3, [r7, #3]
 80020d6:	737b      	strb	r3, [r7, #13]
 80020d8:	78bb      	ldrb	r3, [r7, #2]
 80020da:	73bb      	strb	r3, [r7, #14]
    MCP2515_Select(hcan);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f7ff ffcf 	bl	8002080 <MCP2515_Select>
    HAL_SPI_Transmit(hcan->hspi, tx_buf, 3, HAL_MAX_DELAY);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6818      	ldr	r0, [r3, #0]
 80020e6:	f107 010c 	add.w	r1, r7, #12
 80020ea:	f04f 33ff 	mov.w	r3, #4294967295
 80020ee:	2203      	movs	r2, #3
 80020f0:	f003 fa93 	bl	800561a <HAL_SPI_Transmit>
    MCP2515_Deselect(hcan);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f7ff ffd3 	bl	80020a0 <MCP2515_Deselect>
}
 80020fa:	bf00      	nop
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <MCP2515_ReadReg>:

// Read from MCP2515 register
uint8_t MCP2515_ReadReg(MCP2515_Handle *hcan, uint8_t reg) {
 8002102:	b580      	push	{r7, lr}
 8002104:	b084      	sub	sp, #16
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	460b      	mov	r3, r1
 800210c:	70fb      	strb	r3, [r7, #3]
    uint8_t tx_buf[2] = {MCP2515_READ, reg};
 800210e:	2303      	movs	r3, #3
 8002110:	733b      	strb	r3, [r7, #12]
 8002112:	78fb      	ldrb	r3, [r7, #3]
 8002114:	737b      	strb	r3, [r7, #13]
    uint8_t rx_buf = 0;
 8002116:	2300      	movs	r3, #0
 8002118:	72fb      	strb	r3, [r7, #11]
    MCP2515_Select(hcan);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7ff ffb0 	bl	8002080 <MCP2515_Select>
    HAL_SPI_Transmit(hcan->hspi, tx_buf, 2, HAL_MAX_DELAY);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6818      	ldr	r0, [r3, #0]
 8002124:	f107 010c 	add.w	r1, r7, #12
 8002128:	f04f 33ff 	mov.w	r3, #4294967295
 800212c:	2202      	movs	r2, #2
 800212e:	f003 fa74 	bl	800561a <HAL_SPI_Transmit>
    HAL_SPI_Receive(hcan->hspi, &rx_buf, 1, HAL_MAX_DELAY);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6818      	ldr	r0, [r3, #0]
 8002136:	f107 010b 	add.w	r1, r7, #11
 800213a:	f04f 33ff 	mov.w	r3, #4294967295
 800213e:	2201      	movs	r2, #1
 8002140:	f003 fbaf 	bl	80058a2 <HAL_SPI_Receive>
    MCP2515_Deselect(hcan);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7ff ffab 	bl	80020a0 <MCP2515_Deselect>
    return rx_buf;
 800214a:	7afb      	ldrb	r3, [r7, #11]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3710      	adds	r7, #16
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <MCP2515_Reset>:

// Reset MCP2515
static void MCP2515_Reset(MCP2515_Handle *hcan) {
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
    uint8_t tx_buf = MCP2515_RESET;
 800215c:	23c0      	movs	r3, #192	@ 0xc0
 800215e:	73fb      	strb	r3, [r7, #15]
    MCP2515_Select(hcan);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f7ff ff8d 	bl	8002080 <MCP2515_Select>
    HAL_SPI_Transmit(hcan->hspi, &tx_buf, 1, HAL_MAX_DELAY);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6818      	ldr	r0, [r3, #0]
 800216a:	f107 010f 	add.w	r1, r7, #15
 800216e:	f04f 33ff 	mov.w	r3, #4294967295
 8002172:	2201      	movs	r2, #1
 8002174:	f003 fa51 	bl	800561a <HAL_SPI_Transmit>
    MCP2515_Deselect(hcan);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff ff91 	bl	80020a0 <MCP2515_Deselect>
    HAL_Delay(10); // Wait for reset
 800217e:	200a      	movs	r0, #10
 8002180:	f000 fc86 	bl	8002a90 <HAL_Delay>
}
 8002184:	bf00      	nop
 8002186:	3710      	adds	r7, #16
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <MCP2515_SetMode>:

// Set MCP2515 mode
void MCP2515_SetMode(MCP2515_Handle *hcan, uint8_t mode) {
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	460b      	mov	r3, r1
 8002196:	70fb      	strb	r3, [r7, #3]
    MCP2515_WriteReg(hcan, MCP2515_CANCTRL, mode);
 8002198:	78fb      	ldrb	r3, [r7, #3]
 800219a:	461a      	mov	r2, r3
 800219c:	210f      	movs	r1, #15
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7ff ff8e 	bl	80020c0 <MCP2515_WriteReg>
    HAL_Delay(1);
 80021a4:	2001      	movs	r0, #1
 80021a6:	f000 fc73 	bl	8002a90 <HAL_Delay>
    while ((MCP2515_ReadReg(hcan, MCP2515_CANSTAT) & 0xE0) != mode) {
 80021aa:	e002      	b.n	80021b2 <MCP2515_SetMode+0x26>
        HAL_Delay(1); // Wait for mode change
 80021ac:	2001      	movs	r0, #1
 80021ae:	f000 fc6f 	bl	8002a90 <HAL_Delay>
    while ((MCP2515_ReadReg(hcan, MCP2515_CANSTAT) & 0xE0) != mode) {
 80021b2:	210e      	movs	r1, #14
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff ffa4 	bl	8002102 <MCP2515_ReadReg>
 80021ba:	4603      	mov	r3, r0
 80021bc:	f003 02e0 	and.w	r2, r3, #224	@ 0xe0
 80021c0:	78fb      	ldrb	r3, [r7, #3]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d1f2      	bne.n	80021ac <MCP2515_SetMode+0x20>
    }
}
 80021c6:	bf00      	nop
 80021c8:	bf00      	nop
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <MCP2515_Init>:

// Initialize MCP2515
void MCP2515_Init(MCP2515_Handle *hcan, uint32_t bitrate) {
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
    // Reset MCP2515
    MCP2515_Reset(hcan);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7ff ffba 	bl	8002154 <MCP2515_Reset>

    // Enter configuration mode
    MCP2515_SetMode(hcan, MCP2515_MODE_CONFIG);
 80021e0:	2180      	movs	r1, #128	@ 0x80
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7ff ffd2 	bl	800218c <MCP2515_SetMode>

    // Configure bitrate (500 kbps @ 16 MHz MCP2515 clock)
    if (bitrate == 500000) {
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	4a17      	ldr	r2, [pc, #92]	@ (8002248 <MCP2515_Init+0x78>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d10e      	bne.n	800220e <MCP2515_Init+0x3e>
        MCP2515_WriteReg(hcan, MCP2515_CNF1, 0x01); // SJW=1, BRP=1
 80021f0:	2201      	movs	r2, #1
 80021f2:	212a      	movs	r1, #42	@ 0x2a
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f7ff ff63 	bl	80020c0 <MCP2515_WriteReg>
        MCP2515_WriteReg(hcan, MCP2515_CNF2, 0xB1); // BTLMODE=1, PHSEG1=6, PRSEG=1
 80021fa:	22b1      	movs	r2, #177	@ 0xb1
 80021fc:	2129      	movs	r1, #41	@ 0x29
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f7ff ff5e 	bl	80020c0 <MCP2515_WriteReg>
        MCP2515_WriteReg(hcan, MCP2515_CNF3, 0x05); // PHSEG2=6
 8002204:	2205      	movs	r2, #5
 8002206:	2128      	movs	r1, #40	@ 0x28
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f7ff ff59 	bl	80020c0 <MCP2515_WriteReg>
    }

    // Configure RX buffer (receive all messages)
    MCP2515_WriteReg(hcan, MCP2515_RXB0CTRL, 0x60); // Receive all
 800220e:	2260      	movs	r2, #96	@ 0x60
 8002210:	2160      	movs	r1, #96	@ 0x60
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7ff ff54 	bl	80020c0 <MCP2515_WriteReg>
    MCP2515_WriteReg(hcan, MCP2515_RXB0SIDH, 0x00); // Filter ID 0
 8002218:	2200      	movs	r2, #0
 800221a:	2161      	movs	r1, #97	@ 0x61
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f7ff ff4f 	bl	80020c0 <MCP2515_WriteReg>
    MCP2515_WriteReg(hcan, MCP2515_RXB0SIDL, 0x00);
 8002222:	2200      	movs	r2, #0
 8002224:	2162      	movs	r1, #98	@ 0x62
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7ff ff4a 	bl	80020c0 <MCP2515_WriteReg>

    // Enable interrupts (optional, for polling we disable)
    MCP2515_WriteReg(hcan, MCP2515_CANINTE, 0x00); // No interrupts
 800222c:	2200      	movs	r2, #0
 800222e:	212b      	movs	r1, #43	@ 0x2b
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f7ff ff45 	bl	80020c0 <MCP2515_WriteReg>

    // Enter normal mode
    MCP2515_SetMode(hcan, MCP2515_MODE_NORMAL);
 8002236:	2100      	movs	r1, #0
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7ff ffa7 	bl	800218c <MCP2515_SetMode>
}
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	0007a120 	.word	0x0007a120

0800224c <MCP2515_Transmit>:

// Transmit CAN message
void MCP2515_Transmit(MCP2515_Handle *hcan, CAN_Message *msg) {
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
    // Write message to TXB0
    MCP2515_WriteReg(hcan, MCP2515_TXB0SIDH, (msg->id >> 3));           // SIDH
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	08db      	lsrs	r3, r3, #3
 800225c:	b2db      	uxtb	r3, r3
 800225e:	461a      	mov	r2, r3
 8002260:	2131      	movs	r1, #49	@ 0x31
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f7ff ff2c 	bl	80020c0 <MCP2515_WriteReg>
    MCP2515_WriteReg(hcan, MCP2515_TXB0SIDL, ((msg->id & 0x07) << 5));  // SIDL
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	b2db      	uxtb	r3, r3
 800226e:	015b      	lsls	r3, r3, #5
 8002270:	b2db      	uxtb	r3, r3
 8002272:	461a      	mov	r2, r3
 8002274:	2132      	movs	r1, #50	@ 0x32
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7ff ff22 	bl	80020c0 <MCP2515_WriteReg>
    MCP2515_WriteReg(hcan, MCP2515_TXB0DLC, msg->dlc & 0x0F);           // DLC
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	791b      	ldrb	r3, [r3, #4]
 8002280:	f003 030f 	and.w	r3, r3, #15
 8002284:	b2db      	uxtb	r3, r3
 8002286:	461a      	mov	r2, r3
 8002288:	2135      	movs	r1, #53	@ 0x35
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7ff ff18 	bl	80020c0 <MCP2515_WriteReg>
    for (uint8_t i = 0; i < msg->dlc; i++) {
 8002290:	2300      	movs	r3, #0
 8002292:	73fb      	strb	r3, [r7, #15]
 8002294:	e00d      	b.n	80022b2 <MCP2515_Transmit+0x66>
        MCP2515_WriteReg(hcan, MCP2515_TXB0D0 + i, msg->data[i]);       // Data
 8002296:	7bfb      	ldrb	r3, [r7, #15]
 8002298:	3336      	adds	r3, #54	@ 0x36
 800229a:	b2d9      	uxtb	r1, r3
 800229c:	7bfb      	ldrb	r3, [r7, #15]
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	4413      	add	r3, r2
 80022a2:	795b      	ldrb	r3, [r3, #5]
 80022a4:	461a      	mov	r2, r3
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7ff ff0a 	bl	80020c0 <MCP2515_WriteReg>
    for (uint8_t i = 0; i < msg->dlc; i++) {
 80022ac:	7bfb      	ldrb	r3, [r7, #15]
 80022ae:	3301      	adds	r3, #1
 80022b0:	73fb      	strb	r3, [r7, #15]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	791b      	ldrb	r3, [r3, #4]
 80022b6:	7bfa      	ldrb	r2, [r7, #15]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d3ec      	bcc.n	8002296 <MCP2515_Transmit+0x4a>
    }

    // Request transmission
    MCP2515_WriteReg(hcan, MCP2515_TXB0CTRL, 0x08); // Set TXREQ
 80022bc:	2208      	movs	r2, #8
 80022be:	2130      	movs	r1, #48	@ 0x30
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7ff fefd 	bl	80020c0 <MCP2515_WriteReg>
}
 80022c6:	bf00      	nop
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <MCP2515_Receive>:

// Receive CAN message (polling)
uint8_t MCP2515_Receive(MCP2515_Handle *hcan, CAN_Message *msg) {
 80022ce:	b590      	push	{r4, r7, lr}
 80022d0:	b085      	sub	sp, #20
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
 80022d6:	6039      	str	r1, [r7, #0]
    // Check RXB0 status
    uint8_t status = MCP2515_ReadReg(hcan, MCP2515_CANINTF);
 80022d8:	212c      	movs	r1, #44	@ 0x2c
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7ff ff11 	bl	8002102 <MCP2515_ReadReg>
 80022e0:	4603      	mov	r3, r0
 80022e2:	73bb      	strb	r3, [r7, #14]
    if (!(status & MCP2515_INT_RX0IF)) {
 80022e4:	7bbb      	ldrb	r3, [r7, #14]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <MCP2515_Receive+0x24>
        return 0; // No message
 80022ee:	2300      	movs	r3, #0
 80022f0:	e03c      	b.n	800236c <MCP2515_Receive+0x9e>
    }

    // Read message
    msg->id = (MCP2515_ReadReg(hcan, MCP2515_RXB0SIDH) << 3) |
 80022f2:	2161      	movs	r1, #97	@ 0x61
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f7ff ff04 	bl	8002102 <MCP2515_ReadReg>
 80022fa:	4603      	mov	r3, r0
 80022fc:	00dc      	lsls	r4, r3, #3
              (MCP2515_ReadReg(hcan, MCP2515_RXB0SIDL) >> 5);
 80022fe:	2162      	movs	r1, #98	@ 0x62
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f7ff fefe 	bl	8002102 <MCP2515_ReadReg>
 8002306:	4603      	mov	r3, r0
 8002308:	095b      	lsrs	r3, r3, #5
 800230a:	b2db      	uxtb	r3, r3
    msg->id = (MCP2515_ReadReg(hcan, MCP2515_RXB0SIDH) << 3) |
 800230c:	4323      	orrs	r3, r4
 800230e:	461a      	mov	r2, r3
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	601a      	str	r2, [r3, #0]
    msg->dlc = MCP2515_ReadReg(hcan, MCP2515_RXB0DLC) & 0x0F;
 8002314:	2165      	movs	r1, #101	@ 0x65
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7ff fef3 	bl	8002102 <MCP2515_ReadReg>
 800231c:	4603      	mov	r3, r0
 800231e:	f003 030f 	and.w	r3, r3, #15
 8002322:	b2da      	uxtb	r2, r3
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	711a      	strb	r2, [r3, #4]
    for (uint8_t i = 0; i < msg->dlc; i++) {
 8002328:	2300      	movs	r3, #0
 800232a:	73fb      	strb	r3, [r7, #15]
 800232c:	e00f      	b.n	800234e <MCP2515_Receive+0x80>
        msg->data[i] = MCP2515_ReadReg(hcan, MCP2515_RXB0D0 + i);
 800232e:	7bfb      	ldrb	r3, [r7, #15]
 8002330:	3366      	adds	r3, #102	@ 0x66
 8002332:	b2db      	uxtb	r3, r3
 8002334:	7bfc      	ldrb	r4, [r7, #15]
 8002336:	4619      	mov	r1, r3
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f7ff fee2 	bl	8002102 <MCP2515_ReadReg>
 800233e:	4603      	mov	r3, r0
 8002340:	461a      	mov	r2, r3
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	4423      	add	r3, r4
 8002346:	715a      	strb	r2, [r3, #5]
    for (uint8_t i = 0; i < msg->dlc; i++) {
 8002348:	7bfb      	ldrb	r3, [r7, #15]
 800234a:	3301      	adds	r3, #1
 800234c:	73fb      	strb	r3, [r7, #15]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	791b      	ldrb	r3, [r3, #4]
 8002352:	7bfa      	ldrb	r2, [r7, #15]
 8002354:	429a      	cmp	r2, r3
 8002356:	d3ea      	bcc.n	800232e <MCP2515_Receive+0x60>
    }

    // Clear RX interrupt flag
    MCP2515_WriteReg(hcan, MCP2515_CANINTF, status & ~MCP2515_INT_RX0IF);
 8002358:	7bbb      	ldrb	r3, [r7, #14]
 800235a:	f023 0301 	bic.w	r3, r3, #1
 800235e:	b2db      	uxtb	r3, r3
 8002360:	461a      	mov	r2, r3
 8002362:	212c      	movs	r1, #44	@ 0x2c
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f7ff feab 	bl	80020c0 <MCP2515_WriteReg>
    return 1; // Message received
 800236a:	2301      	movs	r3, #1
 800236c:	4618      	mov	r0, r3
 800236e:	3714      	adds	r7, #20
 8002370:	46bd      	mov	sp, r7
 8002372:	bd90      	pop	{r4, r7, pc}

08002374 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	607b      	str	r3, [r7, #4]
 800237e:	4b10      	ldr	r3, [pc, #64]	@ (80023c0 <HAL_MspInit+0x4c>)
 8002380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002382:	4a0f      	ldr	r2, [pc, #60]	@ (80023c0 <HAL_MspInit+0x4c>)
 8002384:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002388:	6453      	str	r3, [r2, #68]	@ 0x44
 800238a:	4b0d      	ldr	r3, [pc, #52]	@ (80023c0 <HAL_MspInit+0x4c>)
 800238c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800238e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002392:	607b      	str	r3, [r7, #4]
 8002394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	603b      	str	r3, [r7, #0]
 800239a:	4b09      	ldr	r3, [pc, #36]	@ (80023c0 <HAL_MspInit+0x4c>)
 800239c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239e:	4a08      	ldr	r2, [pc, #32]	@ (80023c0 <HAL_MspInit+0x4c>)
 80023a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80023a6:	4b06      	ldr	r3, [pc, #24]	@ (80023c0 <HAL_MspInit+0x4c>)
 80023a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ae:	603b      	str	r3, [r7, #0]
 80023b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80023b2:	2007      	movs	r0, #7
 80023b4:	f001 f852 	bl	800345c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023b8:	bf00      	nop
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40023800 	.word	0x40023800

080023c4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b08a      	sub	sp, #40	@ 0x28
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023cc:	f107 0314 	add.w	r3, r7, #20
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	60da      	str	r2, [r3, #12]
 80023da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a17      	ldr	r2, [pc, #92]	@ (8002440 <HAL_ADC_MspInit+0x7c>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d127      	bne.n	8002436 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	613b      	str	r3, [r7, #16]
 80023ea:	4b16      	ldr	r3, [pc, #88]	@ (8002444 <HAL_ADC_MspInit+0x80>)
 80023ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ee:	4a15      	ldr	r2, [pc, #84]	@ (8002444 <HAL_ADC_MspInit+0x80>)
 80023f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80023f6:	4b13      	ldr	r3, [pc, #76]	@ (8002444 <HAL_ADC_MspInit+0x80>)
 80023f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023fe:	613b      	str	r3, [r7, #16]
 8002400:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	4b0f      	ldr	r3, [pc, #60]	@ (8002444 <HAL_ADC_MspInit+0x80>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240a:	4a0e      	ldr	r2, [pc, #56]	@ (8002444 <HAL_ADC_MspInit+0x80>)
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	6313      	str	r3, [r2, #48]	@ 0x30
 8002412:	4b0c      	ldr	r3, [pc, #48]	@ (8002444 <HAL_ADC_MspInit+0x80>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800241e:	2301      	movs	r3, #1
 8002420:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002422:	2303      	movs	r3, #3
 8002424:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242a:	f107 0314 	add.w	r3, r7, #20
 800242e:	4619      	mov	r1, r3
 8002430:	4805      	ldr	r0, [pc, #20]	@ (8002448 <HAL_ADC_MspInit+0x84>)
 8002432:	f001 f847 	bl	80034c4 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002436:	bf00      	nop
 8002438:	3728      	adds	r7, #40	@ 0x28
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40012000 	.word	0x40012000
 8002444:	40023800 	.word	0x40023800
 8002448:	40020000 	.word	0x40020000

0800244c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b08a      	sub	sp, #40	@ 0x28
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002454:	f107 0314 	add.w	r3, r7, #20
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	605a      	str	r2, [r3, #4]
 800245e:	609a      	str	r2, [r3, #8]
 8002460:	60da      	str	r2, [r3, #12]
 8002462:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a19      	ldr	r2, [pc, #100]	@ (80024d0 <HAL_I2C_MspInit+0x84>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d12c      	bne.n	80024c8 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	613b      	str	r3, [r7, #16]
 8002472:	4b18      	ldr	r3, [pc, #96]	@ (80024d4 <HAL_I2C_MspInit+0x88>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002476:	4a17      	ldr	r2, [pc, #92]	@ (80024d4 <HAL_I2C_MspInit+0x88>)
 8002478:	f043 0302 	orr.w	r3, r3, #2
 800247c:	6313      	str	r3, [r2, #48]	@ 0x30
 800247e:	4b15      	ldr	r3, [pc, #84]	@ (80024d4 <HAL_I2C_MspInit+0x88>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	613b      	str	r3, [r7, #16]
 8002488:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800248a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800248e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002490:	2312      	movs	r3, #18
 8002492:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002494:	2300      	movs	r3, #0
 8002496:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002498:	2303      	movs	r3, #3
 800249a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800249c:	2304      	movs	r3, #4
 800249e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a0:	f107 0314 	add.w	r3, r7, #20
 80024a4:	4619      	mov	r1, r3
 80024a6:	480c      	ldr	r0, [pc, #48]	@ (80024d8 <HAL_I2C_MspInit+0x8c>)
 80024a8:	f001 f80c 	bl	80034c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024ac:	2300      	movs	r3, #0
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	4b08      	ldr	r3, [pc, #32]	@ (80024d4 <HAL_I2C_MspInit+0x88>)
 80024b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b4:	4a07      	ldr	r2, [pc, #28]	@ (80024d4 <HAL_I2C_MspInit+0x88>)
 80024b6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80024ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80024bc:	4b05      	ldr	r3, [pc, #20]	@ (80024d4 <HAL_I2C_MspInit+0x88>)
 80024be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80024c8:	bf00      	nop
 80024ca:	3728      	adds	r7, #40	@ 0x28
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40005400 	.word	0x40005400
 80024d4:	40023800 	.word	0x40023800
 80024d8:	40020400 	.word	0x40020400

080024dc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08c      	sub	sp, #48	@ 0x30
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e4:	f107 031c 	add.w	r3, r7, #28
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	605a      	str	r2, [r3, #4]
 80024ee:	609a      	str	r2, [r3, #8]
 80024f0:	60da      	str	r2, [r3, #12]
 80024f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a32      	ldr	r2, [pc, #200]	@ (80025c4 <HAL_SPI_MspInit+0xe8>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d12c      	bne.n	8002558 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024fe:	2300      	movs	r3, #0
 8002500:	61bb      	str	r3, [r7, #24]
 8002502:	4b31      	ldr	r3, [pc, #196]	@ (80025c8 <HAL_SPI_MspInit+0xec>)
 8002504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002506:	4a30      	ldr	r2, [pc, #192]	@ (80025c8 <HAL_SPI_MspInit+0xec>)
 8002508:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800250c:	6453      	str	r3, [r2, #68]	@ 0x44
 800250e:	4b2e      	ldr	r3, [pc, #184]	@ (80025c8 <HAL_SPI_MspInit+0xec>)
 8002510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002512:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002516:	61bb      	str	r3, [r7, #24]
 8002518:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	617b      	str	r3, [r7, #20]
 800251e:	4b2a      	ldr	r3, [pc, #168]	@ (80025c8 <HAL_SPI_MspInit+0xec>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002522:	4a29      	ldr	r2, [pc, #164]	@ (80025c8 <HAL_SPI_MspInit+0xec>)
 8002524:	f043 0301 	orr.w	r3, r3, #1
 8002528:	6313      	str	r3, [r2, #48]	@ 0x30
 800252a:	4b27      	ldr	r3, [pc, #156]	@ (80025c8 <HAL_SPI_MspInit+0xec>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	617b      	str	r3, [r7, #20]
 8002534:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002536:	23e0      	movs	r3, #224	@ 0xe0
 8002538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253a:	2302      	movs	r3, #2
 800253c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253e:	2300      	movs	r3, #0
 8002540:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002542:	2303      	movs	r3, #3
 8002544:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002546:	2305      	movs	r3, #5
 8002548:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800254a:	f107 031c 	add.w	r3, r7, #28
 800254e:	4619      	mov	r1, r3
 8002550:	481e      	ldr	r0, [pc, #120]	@ (80025cc <HAL_SPI_MspInit+0xf0>)
 8002552:	f000 ffb7 	bl	80034c4 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002556:	e031      	b.n	80025bc <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI3)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a1c      	ldr	r2, [pc, #112]	@ (80025d0 <HAL_SPI_MspInit+0xf4>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d12c      	bne.n	80025bc <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	613b      	str	r3, [r7, #16]
 8002566:	4b18      	ldr	r3, [pc, #96]	@ (80025c8 <HAL_SPI_MspInit+0xec>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256a:	4a17      	ldr	r2, [pc, #92]	@ (80025c8 <HAL_SPI_MspInit+0xec>)
 800256c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002570:	6413      	str	r3, [r2, #64]	@ 0x40
 8002572:	4b15      	ldr	r3, [pc, #84]	@ (80025c8 <HAL_SPI_MspInit+0xec>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002576:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800257a:	613b      	str	r3, [r7, #16]
 800257c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800257e:	2300      	movs	r3, #0
 8002580:	60fb      	str	r3, [r7, #12]
 8002582:	4b11      	ldr	r3, [pc, #68]	@ (80025c8 <HAL_SPI_MspInit+0xec>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002586:	4a10      	ldr	r2, [pc, #64]	@ (80025c8 <HAL_SPI_MspInit+0xec>)
 8002588:	f043 0304 	orr.w	r3, r3, #4
 800258c:	6313      	str	r3, [r2, #48]	@ 0x30
 800258e:	4b0e      	ldr	r3, [pc, #56]	@ (80025c8 <HAL_SPI_MspInit+0xec>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002592:	f003 0304 	and.w	r3, r3, #4
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800259a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800259e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a0:	2302      	movs	r3, #2
 80025a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a4:	2300      	movs	r3, #0
 80025a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a8:	2303      	movs	r3, #3
 80025aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80025ac:	2306      	movs	r3, #6
 80025ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025b0:	f107 031c 	add.w	r3, r7, #28
 80025b4:	4619      	mov	r1, r3
 80025b6:	4807      	ldr	r0, [pc, #28]	@ (80025d4 <HAL_SPI_MspInit+0xf8>)
 80025b8:	f000 ff84 	bl	80034c4 <HAL_GPIO_Init>
}
 80025bc:	bf00      	nop
 80025be:	3730      	adds	r7, #48	@ 0x30
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40013000 	.word	0x40013000
 80025c8:	40023800 	.word	0x40023800
 80025cc:	40020000 	.word	0x40020000
 80025d0:	40003c00 	.word	0x40003c00
 80025d4:	40020800 	.word	0x40020800

080025d8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a15      	ldr	r2, [pc, #84]	@ (800263c <HAL_TIM_Base_MspInit+0x64>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d10e      	bne.n	8002608 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	4b14      	ldr	r3, [pc, #80]	@ (8002640 <HAL_TIM_Base_MspInit+0x68>)
 80025f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f2:	4a13      	ldr	r2, [pc, #76]	@ (8002640 <HAL_TIM_Base_MspInit+0x68>)
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80025fa:	4b11      	ldr	r3, [pc, #68]	@ (8002640 <HAL_TIM_Base_MspInit+0x68>)
 80025fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002606:	e012      	b.n	800262e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002610:	d10d      	bne.n	800262e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002612:	2300      	movs	r3, #0
 8002614:	60bb      	str	r3, [r7, #8]
 8002616:	4b0a      	ldr	r3, [pc, #40]	@ (8002640 <HAL_TIM_Base_MspInit+0x68>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261a:	4a09      	ldr	r2, [pc, #36]	@ (8002640 <HAL_TIM_Base_MspInit+0x68>)
 800261c:	f043 0301 	orr.w	r3, r3, #1
 8002620:	6413      	str	r3, [r2, #64]	@ 0x40
 8002622:	4b07      	ldr	r3, [pc, #28]	@ (8002640 <HAL_TIM_Base_MspInit+0x68>)
 8002624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	60bb      	str	r3, [r7, #8]
 800262c:	68bb      	ldr	r3, [r7, #8]
}
 800262e:	bf00      	nop
 8002630:	3714      	adds	r7, #20
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	40010000 	.word	0x40010000
 8002640:	40023800 	.word	0x40023800

08002644 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b088      	sub	sp, #32
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264c:	f107 030c 	add.w	r3, r7, #12
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	605a      	str	r2, [r3, #4]
 8002656:	609a      	str	r2, [r3, #8]
 8002658:	60da      	str	r2, [r3, #12]
 800265a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a12      	ldr	r2, [pc, #72]	@ (80026ac <HAL_TIM_MspPostInit+0x68>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d11e      	bne.n	80026a4 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	60bb      	str	r3, [r7, #8]
 800266a:	4b11      	ldr	r3, [pc, #68]	@ (80026b0 <HAL_TIM_MspPostInit+0x6c>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266e:	4a10      	ldr	r2, [pc, #64]	@ (80026b0 <HAL_TIM_MspPostInit+0x6c>)
 8002670:	f043 0301 	orr.w	r3, r3, #1
 8002674:	6313      	str	r3, [r2, #48]	@ 0x30
 8002676:	4b0e      	ldr	r3, [pc, #56]	@ (80026b0 <HAL_TIM_MspPostInit+0x6c>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	60bb      	str	r3, [r7, #8]
 8002680:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002682:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002686:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002688:	2302      	movs	r3, #2
 800268a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268c:	2300      	movs	r3, #0
 800268e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002690:	2300      	movs	r3, #0
 8002692:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002694:	2301      	movs	r3, #1
 8002696:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002698:	f107 030c 	add.w	r3, r7, #12
 800269c:	4619      	mov	r1, r3
 800269e:	4805      	ldr	r0, [pc, #20]	@ (80026b4 <HAL_TIM_MspPostInit+0x70>)
 80026a0:	f000 ff10 	bl	80034c4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80026a4:	bf00      	nop
 80026a6:	3720      	adds	r7, #32
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40010000 	.word	0x40010000
 80026b0:	40023800 	.word	0x40023800
 80026b4:	40020000 	.word	0x40020000

080026b8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b08a      	sub	sp, #40	@ 0x28
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c0:	f107 0314 	add.w	r3, r7, #20
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	605a      	str	r2, [r3, #4]
 80026ca:	609a      	str	r2, [r3, #8]
 80026cc:	60da      	str	r2, [r3, #12]
 80026ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a19      	ldr	r2, [pc, #100]	@ (800273c <HAL_UART_MspInit+0x84>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d12b      	bne.n	8002732 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	613b      	str	r3, [r7, #16]
 80026de:	4b18      	ldr	r3, [pc, #96]	@ (8002740 <HAL_UART_MspInit+0x88>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e2:	4a17      	ldr	r2, [pc, #92]	@ (8002740 <HAL_UART_MspInit+0x88>)
 80026e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80026ea:	4b15      	ldr	r3, [pc, #84]	@ (8002740 <HAL_UART_MspInit+0x88>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f2:	613b      	str	r3, [r7, #16]
 80026f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	4b11      	ldr	r3, [pc, #68]	@ (8002740 <HAL_UART_MspInit+0x88>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fe:	4a10      	ldr	r2, [pc, #64]	@ (8002740 <HAL_UART_MspInit+0x88>)
 8002700:	f043 0301 	orr.w	r3, r3, #1
 8002704:	6313      	str	r3, [r2, #48]	@ 0x30
 8002706:	4b0e      	ldr	r3, [pc, #56]	@ (8002740 <HAL_UART_MspInit+0x88>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002712:	230c      	movs	r3, #12
 8002714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002716:	2302      	movs	r3, #2
 8002718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271a:	2300      	movs	r3, #0
 800271c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800271e:	2303      	movs	r3, #3
 8002720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002722:	2307      	movs	r3, #7
 8002724:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002726:	f107 0314 	add.w	r3, r7, #20
 800272a:	4619      	mov	r1, r3
 800272c:	4805      	ldr	r0, [pc, #20]	@ (8002744 <HAL_UART_MspInit+0x8c>)
 800272e:	f000 fec9 	bl	80034c4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002732:	bf00      	nop
 8002734:	3728      	adds	r7, #40	@ 0x28
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40004400 	.word	0x40004400
 8002740:	40023800 	.word	0x40023800
 8002744:	40020000 	.word	0x40020000

08002748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800274c:	bf00      	nop
 800274e:	e7fd      	b.n	800274c <NMI_Handler+0x4>

08002750 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002754:	bf00      	nop
 8002756:	e7fd      	b.n	8002754 <HardFault_Handler+0x4>

08002758 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800275c:	bf00      	nop
 800275e:	e7fd      	b.n	800275c <MemManage_Handler+0x4>

08002760 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002764:	bf00      	nop
 8002766:	e7fd      	b.n	8002764 <BusFault_Handler+0x4>

08002768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800276c:	bf00      	nop
 800276e:	e7fd      	b.n	800276c <UsageFault_Handler+0x4>

08002770 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002774:	bf00      	nop
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800277e:	b480      	push	{r7}
 8002780:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002782:	bf00      	nop
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002790:	bf00      	nop
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800279e:	f000 f957 	bl	8002a50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027a2:	bf00      	nop
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027a6:	b480      	push	{r7}
 80027a8:	af00      	add	r7, sp, #0
  return 1;
 80027aa:	2301      	movs	r3, #1
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <_kill>:

int _kill(int pid, int sig)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b082      	sub	sp, #8
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
 80027be:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80027c0:	f006 f8aa 	bl	8008918 <__errno>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2216      	movs	r2, #22
 80027c8:	601a      	str	r2, [r3, #0]
  return -1;
 80027ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <_exit>:

void _exit (int status)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b082      	sub	sp, #8
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80027de:	f04f 31ff 	mov.w	r1, #4294967295
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7ff ffe7 	bl	80027b6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80027e8:	bf00      	nop
 80027ea:	e7fd      	b.n	80027e8 <_exit+0x12>

080027ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027f8:	2300      	movs	r3, #0
 80027fa:	617b      	str	r3, [r7, #20]
 80027fc:	e00a      	b.n	8002814 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80027fe:	f3af 8000 	nop.w
 8002802:	4601      	mov	r1, r0
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	1c5a      	adds	r2, r3, #1
 8002808:	60ba      	str	r2, [r7, #8]
 800280a:	b2ca      	uxtb	r2, r1
 800280c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	3301      	adds	r3, #1
 8002812:	617b      	str	r3, [r7, #20]
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	429a      	cmp	r2, r3
 800281a:	dbf0      	blt.n	80027fe <_read+0x12>
  }

  return len;
 800281c:	687b      	ldr	r3, [r7, #4]
}
 800281e:	4618      	mov	r0, r3
 8002820:	3718      	adds	r7, #24
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b086      	sub	sp, #24
 800282a:	af00      	add	r7, sp, #0
 800282c:	60f8      	str	r0, [r7, #12]
 800282e:	60b9      	str	r1, [r7, #8]
 8002830:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002832:	2300      	movs	r3, #0
 8002834:	617b      	str	r3, [r7, #20]
 8002836:	e009      	b.n	800284c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	60ba      	str	r2, [r7, #8]
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f7fe fcc5 	bl	80011d0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	3301      	adds	r3, #1
 800284a:	617b      	str	r3, [r7, #20]
 800284c:	697a      	ldr	r2, [r7, #20]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	429a      	cmp	r2, r3
 8002852:	dbf1      	blt.n	8002838 <_write+0x12>
  }
  return len;
 8002854:	687b      	ldr	r3, [r7, #4]
}
 8002856:	4618      	mov	r0, r3
 8002858:	3718      	adds	r7, #24
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <_close>:

int _close(int file)
{
 800285e:	b480      	push	{r7}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002866:	f04f 33ff 	mov.w	r3, #4294967295
}
 800286a:	4618      	mov	r0, r3
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
 800287e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002886:	605a      	str	r2, [r3, #4]
  return 0;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <_isatty>:

int _isatty(int file)
{
 8002896:	b480      	push	{r7}
 8002898:	b083      	sub	sp, #12
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800289e:	2301      	movs	r3, #1
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
	...

080028c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028d0:	4a14      	ldr	r2, [pc, #80]	@ (8002924 <_sbrk+0x5c>)
 80028d2:	4b15      	ldr	r3, [pc, #84]	@ (8002928 <_sbrk+0x60>)
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028dc:	4b13      	ldr	r3, [pc, #76]	@ (800292c <_sbrk+0x64>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d102      	bne.n	80028ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028e4:	4b11      	ldr	r3, [pc, #68]	@ (800292c <_sbrk+0x64>)
 80028e6:	4a12      	ldr	r2, [pc, #72]	@ (8002930 <_sbrk+0x68>)
 80028e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028ea:	4b10      	ldr	r3, [pc, #64]	@ (800292c <_sbrk+0x64>)
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4413      	add	r3, r2
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d207      	bcs.n	8002908 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028f8:	f006 f80e 	bl	8008918 <__errno>
 80028fc:	4603      	mov	r3, r0
 80028fe:	220c      	movs	r2, #12
 8002900:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002902:	f04f 33ff 	mov.w	r3, #4294967295
 8002906:	e009      	b.n	800291c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002908:	4b08      	ldr	r3, [pc, #32]	@ (800292c <_sbrk+0x64>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800290e:	4b07      	ldr	r3, [pc, #28]	@ (800292c <_sbrk+0x64>)
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4413      	add	r3, r2
 8002916:	4a05      	ldr	r2, [pc, #20]	@ (800292c <_sbrk+0x64>)
 8002918:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800291a:	68fb      	ldr	r3, [r7, #12]
}
 800291c:	4618      	mov	r0, r3
 800291e:	3718      	adds	r7, #24
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	20020000 	.word	0x20020000
 8002928:	00000400 	.word	0x00000400
 800292c:	200004dc 	.word	0x200004dc
 8002930:	20000630 	.word	0x20000630

08002934 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002938:	4b06      	ldr	r3, [pc, #24]	@ (8002954 <SystemInit+0x20>)
 800293a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800293e:	4a05      	ldr	r2, [pc, #20]	@ (8002954 <SystemInit+0x20>)
 8002940:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002944:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002948:	bf00      	nop
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	e000ed00 	.word	0xe000ed00

08002958 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002958:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002990 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800295c:	f7ff ffea 	bl	8002934 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002960:	480c      	ldr	r0, [pc, #48]	@ (8002994 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002962:	490d      	ldr	r1, [pc, #52]	@ (8002998 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002964:	4a0d      	ldr	r2, [pc, #52]	@ (800299c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002966:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002968:	e002      	b.n	8002970 <LoopCopyDataInit>

0800296a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800296a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800296c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800296e:	3304      	adds	r3, #4

08002970 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002970:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002972:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002974:	d3f9      	bcc.n	800296a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002976:	4a0a      	ldr	r2, [pc, #40]	@ (80029a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002978:	4c0a      	ldr	r4, [pc, #40]	@ (80029a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800297a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800297c:	e001      	b.n	8002982 <LoopFillZerobss>

0800297e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800297e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002980:	3204      	adds	r2, #4

08002982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002982:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002984:	d3fb      	bcc.n	800297e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002986:	f005 ffcd 	bl	8008924 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800298a:	f7fe fe4b 	bl	8001624 <main>
  bx  lr    
 800298e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002990:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002998:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 800299c:	0800c60c 	.word	0x0800c60c
  ldr r2, =_sbss
 80029a0:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80029a4:	20000630 	.word	0x20000630

080029a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029a8:	e7fe      	b.n	80029a8 <ADC_IRQHandler>
	...

080029ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029b0:	4b0e      	ldr	r3, [pc, #56]	@ (80029ec <HAL_Init+0x40>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a0d      	ldr	r2, [pc, #52]	@ (80029ec <HAL_Init+0x40>)
 80029b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029bc:	4b0b      	ldr	r3, [pc, #44]	@ (80029ec <HAL_Init+0x40>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a0a      	ldr	r2, [pc, #40]	@ (80029ec <HAL_Init+0x40>)
 80029c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029c8:	4b08      	ldr	r3, [pc, #32]	@ (80029ec <HAL_Init+0x40>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a07      	ldr	r2, [pc, #28]	@ (80029ec <HAL_Init+0x40>)
 80029ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029d4:	2003      	movs	r0, #3
 80029d6:	f000 fd41 	bl	800345c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029da:	2000      	movs	r0, #0
 80029dc:	f000 f808 	bl	80029f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029e0:	f7ff fcc8 	bl	8002374 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	40023c00 	.word	0x40023c00

080029f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029f8:	4b12      	ldr	r3, [pc, #72]	@ (8002a44 <HAL_InitTick+0x54>)
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	4b12      	ldr	r3, [pc, #72]	@ (8002a48 <HAL_InitTick+0x58>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	4619      	mov	r1, r3
 8002a02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a06:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f000 fd4b 	bl	80034aa <HAL_SYSTICK_Config>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e00e      	b.n	8002a3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2b0f      	cmp	r3, #15
 8002a22:	d80a      	bhi.n	8002a3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a24:	2200      	movs	r2, #0
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	f04f 30ff 	mov.w	r0, #4294967295
 8002a2c:	f000 fd21 	bl	8003472 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a30:	4a06      	ldr	r2, [pc, #24]	@ (8002a4c <HAL_InitTick+0x5c>)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
 8002a38:	e000      	b.n	8002a3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	20000018 	.word	0x20000018
 8002a48:	20000020 	.word	0x20000020
 8002a4c:	2000001c 	.word	0x2000001c

08002a50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a54:	4b06      	ldr	r3, [pc, #24]	@ (8002a70 <HAL_IncTick+0x20>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	461a      	mov	r2, r3
 8002a5a:	4b06      	ldr	r3, [pc, #24]	@ (8002a74 <HAL_IncTick+0x24>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4413      	add	r3, r2
 8002a60:	4a04      	ldr	r2, [pc, #16]	@ (8002a74 <HAL_IncTick+0x24>)
 8002a62:	6013      	str	r3, [r2, #0]
}
 8002a64:	bf00      	nop
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	20000020 	.word	0x20000020
 8002a74:	200004e0 	.word	0x200004e0

08002a78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a7c:	4b03      	ldr	r3, [pc, #12]	@ (8002a8c <HAL_GetTick+0x14>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	200004e0 	.word	0x200004e0

08002a90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a98:	f7ff ffee 	bl	8002a78 <HAL_GetTick>
 8002a9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa8:	d005      	beq.n	8002ab6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8002ad4 <HAL_Delay+0x44>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ab6:	bf00      	nop
 8002ab8:	f7ff ffde 	bl	8002a78 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d8f7      	bhi.n	8002ab8 <HAL_Delay+0x28>
  {
  }
}
 8002ac8:	bf00      	nop
 8002aca:	bf00      	nop
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	20000020 	.word	0x20000020

08002ad8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e033      	b.n	8002b56 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d109      	bne.n	8002b0a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7ff fc64 	bl	80023c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0e:	f003 0310 	and.w	r3, r3, #16
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d118      	bne.n	8002b48 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002b1e:	f023 0302 	bic.w	r3, r3, #2
 8002b22:	f043 0202 	orr.w	r2, r3, #2
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 fae8 	bl	8003100 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3a:	f023 0303 	bic.w	r3, r3, #3
 8002b3e:	f043 0201 	orr.w	r2, r3, #1
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	641a      	str	r2, [r3, #64]	@ 0x40
 8002b46:	e001      	b.n	8002b4c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
	...

08002b60 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d101      	bne.n	8002b7a <HAL_ADC_Start+0x1a>
 8002b76:	2302      	movs	r3, #2
 8002b78:	e0b2      	b.n	8002ce0 <HAL_ADC_Start+0x180>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d018      	beq.n	8002bc2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689a      	ldr	r2, [r3, #8]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f042 0201 	orr.w	r2, r2, #1
 8002b9e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ba0:	4b52      	ldr	r3, [pc, #328]	@ (8002cec <HAL_ADC_Start+0x18c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a52      	ldr	r2, [pc, #328]	@ (8002cf0 <HAL_ADC_Start+0x190>)
 8002ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8002baa:	0c9a      	lsrs	r2, r3, #18
 8002bac:	4613      	mov	r3, r2
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	4413      	add	r3, r2
 8002bb2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002bb4:	e002      	b.n	8002bbc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1f9      	bne.n	8002bb6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d17a      	bne.n	8002cc6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002bd8:	f023 0301 	bic.w	r3, r3, #1
 8002bdc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d007      	beq.n	8002c02 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002bfa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c0e:	d106      	bne.n	8002c1e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c14:	f023 0206 	bic.w	r2, r3, #6
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	645a      	str	r2, [r3, #68]	@ 0x44
 8002c1c:	e002      	b.n	8002c24 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c2c:	4b31      	ldr	r3, [pc, #196]	@ (8002cf4 <HAL_ADC_Start+0x194>)
 8002c2e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002c38:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f003 031f 	and.w	r3, r3, #31
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d12a      	bne.n	8002c9c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a2b      	ldr	r2, [pc, #172]	@ (8002cf8 <HAL_ADC_Start+0x198>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d015      	beq.n	8002c7c <HAL_ADC_Start+0x11c>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a29      	ldr	r2, [pc, #164]	@ (8002cfc <HAL_ADC_Start+0x19c>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d105      	bne.n	8002c66 <HAL_ADC_Start+0x106>
 8002c5a:	4b26      	ldr	r3, [pc, #152]	@ (8002cf4 <HAL_ADC_Start+0x194>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f003 031f 	and.w	r3, r3, #31
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00a      	beq.n	8002c7c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a25      	ldr	r2, [pc, #148]	@ (8002d00 <HAL_ADC_Start+0x1a0>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d136      	bne.n	8002cde <HAL_ADC_Start+0x17e>
 8002c70:	4b20      	ldr	r3, [pc, #128]	@ (8002cf4 <HAL_ADC_Start+0x194>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f003 0310 	and.w	r3, r3, #16
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d130      	bne.n	8002cde <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d129      	bne.n	8002cde <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002c98:	609a      	str	r2, [r3, #8]
 8002c9a:	e020      	b.n	8002cde <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a15      	ldr	r2, [pc, #84]	@ (8002cf8 <HAL_ADC_Start+0x198>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d11b      	bne.n	8002cde <HAL_ADC_Start+0x17e>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d114      	bne.n	8002cde <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689a      	ldr	r2, [r3, #8]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002cc2:	609a      	str	r2, [r3, #8]
 8002cc4:	e00b      	b.n	8002cde <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cca:	f043 0210 	orr.w	r2, r3, #16
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd6:	f043 0201 	orr.w	r2, r3, #1
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3714      	adds	r7, #20
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	20000018 	.word	0x20000018
 8002cf0:	431bde83 	.word	0x431bde83
 8002cf4:	40012300 	.word	0x40012300
 8002cf8:	40012000 	.word	0x40012000
 8002cfc:	40012100 	.word	0x40012100
 8002d00:	40012200 	.word	0x40012200

08002d04 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d101      	bne.n	8002d1a <HAL_ADC_Stop+0x16>
 8002d16:	2302      	movs	r3, #2
 8002d18:	e021      	b.n	8002d5e <HAL_ADC_Stop+0x5a>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 0201 	bic.w	r2, r2, #1
 8002d30:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d109      	bne.n	8002d54 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d44:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002d48:	f023 0301 	bic.w	r3, r3, #1
 8002d4c:	f043 0201 	orr.w	r2, r3, #1
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b084      	sub	sp, #16
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
 8002d72:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002d74:	2300      	movs	r3, #0
 8002d76:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d86:	d113      	bne.n	8002db0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002d92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d96:	d10b      	bne.n	8002db0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9c:	f043 0220 	orr.w	r2, r3, #32
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e063      	b.n	8002e78 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002db0:	f7ff fe62 	bl	8002a78 <HAL_GetTick>
 8002db4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002db6:	e021      	b.n	8002dfc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dbe:	d01d      	beq.n	8002dfc <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d007      	beq.n	8002dd6 <HAL_ADC_PollForConversion+0x6c>
 8002dc6:	f7ff fe57 	bl	8002a78 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d212      	bcs.n	8002dfc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d00b      	beq.n	8002dfc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de8:	f043 0204 	orr.w	r2, r3, #4
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e03d      	b.n	8002e78 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d1d6      	bne.n	8002db8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f06f 0212 	mvn.w	r2, #18
 8002e12:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e18:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d123      	bne.n	8002e76 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d11f      	bne.n	8002e76 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e3c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d006      	beq.n	8002e52 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d111      	bne.n	8002e76 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e56:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d105      	bne.n	8002e76 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6e:	f043 0201 	orr.w	r2, r3, #1
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
	...

08002e9c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d101      	bne.n	8002eb8 <HAL_ADC_ConfigChannel+0x1c>
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	e113      	b.n	80030e0 <HAL_ADC_ConfigChannel+0x244>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2b09      	cmp	r3, #9
 8002ec6:	d925      	bls.n	8002f14 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68d9      	ldr	r1, [r3, #12]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	4413      	add	r3, r2
 8002edc:	3b1e      	subs	r3, #30
 8002ede:	2207      	movs	r2, #7
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	43da      	mvns	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	400a      	ands	r2, r1
 8002eec:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68d9      	ldr	r1, [r3, #12]
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	4618      	mov	r0, r3
 8002f00:	4603      	mov	r3, r0
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	4403      	add	r3, r0
 8002f06:	3b1e      	subs	r3, #30
 8002f08:	409a      	lsls	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	60da      	str	r2, [r3, #12]
 8002f12:	e022      	b.n	8002f5a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6919      	ldr	r1, [r3, #16]
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	461a      	mov	r2, r3
 8002f22:	4613      	mov	r3, r2
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	4413      	add	r3, r2
 8002f28:	2207      	movs	r2, #7
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	43da      	mvns	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	400a      	ands	r2, r1
 8002f36:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6919      	ldr	r1, [r3, #16]
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	689a      	ldr	r2, [r3, #8]
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	4618      	mov	r0, r3
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	4403      	add	r3, r0
 8002f50:	409a      	lsls	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	2b06      	cmp	r3, #6
 8002f60:	d824      	bhi.n	8002fac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685a      	ldr	r2, [r3, #4]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	4413      	add	r3, r2
 8002f72:	3b05      	subs	r3, #5
 8002f74:	221f      	movs	r2, #31
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	43da      	mvns	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	400a      	ands	r2, r1
 8002f82:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	4618      	mov	r0, r3
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	4613      	mov	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	3b05      	subs	r3, #5
 8002f9e:	fa00 f203 	lsl.w	r2, r0, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	635a      	str	r2, [r3, #52]	@ 0x34
 8002faa:	e04c      	b.n	8003046 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	2b0c      	cmp	r3, #12
 8002fb2:	d824      	bhi.n	8002ffe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685a      	ldr	r2, [r3, #4]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4413      	add	r3, r2
 8002fc4:	3b23      	subs	r3, #35	@ 0x23
 8002fc6:	221f      	movs	r2, #31
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	43da      	mvns	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	400a      	ands	r2, r1
 8002fd4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	3b23      	subs	r3, #35	@ 0x23
 8002ff0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ffc:	e023      	b.n	8003046 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	4613      	mov	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4413      	add	r3, r2
 800300e:	3b41      	subs	r3, #65	@ 0x41
 8003010:	221f      	movs	r2, #31
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	43da      	mvns	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	400a      	ands	r2, r1
 800301e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	b29b      	uxth	r3, r3
 800302c:	4618      	mov	r0, r3
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	4613      	mov	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4413      	add	r3, r2
 8003038:	3b41      	subs	r3, #65	@ 0x41
 800303a:	fa00 f203 	lsl.w	r2, r0, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003046:	4b29      	ldr	r3, [pc, #164]	@ (80030ec <HAL_ADC_ConfigChannel+0x250>)
 8003048:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a28      	ldr	r2, [pc, #160]	@ (80030f0 <HAL_ADC_ConfigChannel+0x254>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d10f      	bne.n	8003074 <HAL_ADC_ConfigChannel+0x1d8>
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2b12      	cmp	r3, #18
 800305a:	d10b      	bne.n	8003074 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a1d      	ldr	r2, [pc, #116]	@ (80030f0 <HAL_ADC_ConfigChannel+0x254>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d12b      	bne.n	80030d6 <HAL_ADC_ConfigChannel+0x23a>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a1c      	ldr	r2, [pc, #112]	@ (80030f4 <HAL_ADC_ConfigChannel+0x258>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d003      	beq.n	8003090 <HAL_ADC_ConfigChannel+0x1f4>
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2b11      	cmp	r3, #17
 800308e:	d122      	bne.n	80030d6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a11      	ldr	r2, [pc, #68]	@ (80030f4 <HAL_ADC_ConfigChannel+0x258>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d111      	bne.n	80030d6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030b2:	4b11      	ldr	r3, [pc, #68]	@ (80030f8 <HAL_ADC_ConfigChannel+0x25c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a11      	ldr	r2, [pc, #68]	@ (80030fc <HAL_ADC_ConfigChannel+0x260>)
 80030b8:	fba2 2303 	umull	r2, r3, r2, r3
 80030bc:	0c9a      	lsrs	r2, r3, #18
 80030be:	4613      	mov	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	4413      	add	r3, r2
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80030c8:	e002      	b.n	80030d0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	3b01      	subs	r3, #1
 80030ce:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1f9      	bne.n	80030ca <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3714      	adds	r7, #20
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr
 80030ec:	40012300 	.word	0x40012300
 80030f0:	40012000 	.word	0x40012000
 80030f4:	10000012 	.word	0x10000012
 80030f8:	20000018 	.word	0x20000018
 80030fc:	431bde83 	.word	0x431bde83

08003100 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003108:	4b79      	ldr	r3, [pc, #484]	@ (80032f0 <ADC_Init+0x1f0>)
 800310a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	685a      	ldr	r2, [r3, #4]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	431a      	orrs	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003134:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6859      	ldr	r1, [r3, #4]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	021a      	lsls	r2, r3, #8
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	430a      	orrs	r2, r1
 8003148:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003158:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	6859      	ldr	r1, [r3, #4]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689a      	ldr	r2, [r3, #8]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	430a      	orrs	r2, r1
 800316a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689a      	ldr	r2, [r3, #8]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800317a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6899      	ldr	r1, [r3, #8]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68da      	ldr	r2, [r3, #12]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003192:	4a58      	ldr	r2, [pc, #352]	@ (80032f4 <ADC_Init+0x1f4>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d022      	beq.n	80031de <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689a      	ldr	r2, [r3, #8]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80031a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6899      	ldr	r1, [r3, #8]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80031c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6899      	ldr	r1, [r3, #8]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	430a      	orrs	r2, r1
 80031da:	609a      	str	r2, [r3, #8]
 80031dc:	e00f      	b.n	80031fe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80031ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80031fc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 0202 	bic.w	r2, r2, #2
 800320c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6899      	ldr	r1, [r3, #8]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	7e1b      	ldrb	r3, [r3, #24]
 8003218:	005a      	lsls	r2, r3, #1
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d01b      	beq.n	8003264 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800323a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800324a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6859      	ldr	r1, [r3, #4]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003256:	3b01      	subs	r3, #1
 8003258:	035a      	lsls	r2, r3, #13
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	430a      	orrs	r2, r1
 8003260:	605a      	str	r2, [r3, #4]
 8003262:	e007      	b.n	8003274 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003272:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003282:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	3b01      	subs	r3, #1
 8003290:	051a      	lsls	r2, r3, #20
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	430a      	orrs	r2, r1
 8003298:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80032a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6899      	ldr	r1, [r3, #8]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80032b6:	025a      	lsls	r2, r3, #9
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689a      	ldr	r2, [r3, #8]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6899      	ldr	r1, [r3, #8]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	029a      	lsls	r2, r3, #10
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	430a      	orrs	r2, r1
 80032e2:	609a      	str	r2, [r3, #8]
}
 80032e4:	bf00      	nop
 80032e6:	3714      	adds	r7, #20
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	40012300 	.word	0x40012300
 80032f4:	0f000001 	.word	0x0f000001

080032f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f003 0307 	and.w	r3, r3, #7
 8003306:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003308:	4b0c      	ldr	r3, [pc, #48]	@ (800333c <__NVIC_SetPriorityGrouping+0x44>)
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800330e:	68ba      	ldr	r2, [r7, #8]
 8003310:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003314:	4013      	ands	r3, r2
 8003316:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003320:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003324:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003328:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800332a:	4a04      	ldr	r2, [pc, #16]	@ (800333c <__NVIC_SetPriorityGrouping+0x44>)
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	60d3      	str	r3, [r2, #12]
}
 8003330:	bf00      	nop
 8003332:	3714      	adds	r7, #20
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	e000ed00 	.word	0xe000ed00

08003340 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003344:	4b04      	ldr	r3, [pc, #16]	@ (8003358 <__NVIC_GetPriorityGrouping+0x18>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	0a1b      	lsrs	r3, r3, #8
 800334a:	f003 0307 	and.w	r3, r3, #7
}
 800334e:	4618      	mov	r0, r3
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	e000ed00 	.word	0xe000ed00

0800335c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	4603      	mov	r3, r0
 8003364:	6039      	str	r1, [r7, #0]
 8003366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336c:	2b00      	cmp	r3, #0
 800336e:	db0a      	blt.n	8003386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	b2da      	uxtb	r2, r3
 8003374:	490c      	ldr	r1, [pc, #48]	@ (80033a8 <__NVIC_SetPriority+0x4c>)
 8003376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337a:	0112      	lsls	r2, r2, #4
 800337c:	b2d2      	uxtb	r2, r2
 800337e:	440b      	add	r3, r1
 8003380:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003384:	e00a      	b.n	800339c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	b2da      	uxtb	r2, r3
 800338a:	4908      	ldr	r1, [pc, #32]	@ (80033ac <__NVIC_SetPriority+0x50>)
 800338c:	79fb      	ldrb	r3, [r7, #7]
 800338e:	f003 030f 	and.w	r3, r3, #15
 8003392:	3b04      	subs	r3, #4
 8003394:	0112      	lsls	r2, r2, #4
 8003396:	b2d2      	uxtb	r2, r2
 8003398:	440b      	add	r3, r1
 800339a:	761a      	strb	r2, [r3, #24]
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	e000e100 	.word	0xe000e100
 80033ac:	e000ed00 	.word	0xe000ed00

080033b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b089      	sub	sp, #36	@ 0x24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f003 0307 	and.w	r3, r3, #7
 80033c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	f1c3 0307 	rsb	r3, r3, #7
 80033ca:	2b04      	cmp	r3, #4
 80033cc:	bf28      	it	cs
 80033ce:	2304      	movcs	r3, #4
 80033d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	3304      	adds	r3, #4
 80033d6:	2b06      	cmp	r3, #6
 80033d8:	d902      	bls.n	80033e0 <NVIC_EncodePriority+0x30>
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	3b03      	subs	r3, #3
 80033de:	e000      	b.n	80033e2 <NVIC_EncodePriority+0x32>
 80033e0:	2300      	movs	r3, #0
 80033e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033e4:	f04f 32ff 	mov.w	r2, #4294967295
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	43da      	mvns	r2, r3
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	401a      	ands	r2, r3
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033f8:	f04f 31ff 	mov.w	r1, #4294967295
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003402:	43d9      	mvns	r1, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003408:	4313      	orrs	r3, r2
         );
}
 800340a:	4618      	mov	r0, r3
 800340c:	3724      	adds	r7, #36	@ 0x24
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
	...

08003418 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3b01      	subs	r3, #1
 8003424:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003428:	d301      	bcc.n	800342e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800342a:	2301      	movs	r3, #1
 800342c:	e00f      	b.n	800344e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800342e:	4a0a      	ldr	r2, [pc, #40]	@ (8003458 <SysTick_Config+0x40>)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	3b01      	subs	r3, #1
 8003434:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003436:	210f      	movs	r1, #15
 8003438:	f04f 30ff 	mov.w	r0, #4294967295
 800343c:	f7ff ff8e 	bl	800335c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003440:	4b05      	ldr	r3, [pc, #20]	@ (8003458 <SysTick_Config+0x40>)
 8003442:	2200      	movs	r2, #0
 8003444:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003446:	4b04      	ldr	r3, [pc, #16]	@ (8003458 <SysTick_Config+0x40>)
 8003448:	2207      	movs	r2, #7
 800344a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	e000e010 	.word	0xe000e010

0800345c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f7ff ff47 	bl	80032f8 <__NVIC_SetPriorityGrouping>
}
 800346a:	bf00      	nop
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003472:	b580      	push	{r7, lr}
 8003474:	b086      	sub	sp, #24
 8003476:	af00      	add	r7, sp, #0
 8003478:	4603      	mov	r3, r0
 800347a:	60b9      	str	r1, [r7, #8]
 800347c:	607a      	str	r2, [r7, #4]
 800347e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003480:	2300      	movs	r3, #0
 8003482:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003484:	f7ff ff5c 	bl	8003340 <__NVIC_GetPriorityGrouping>
 8003488:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	68b9      	ldr	r1, [r7, #8]
 800348e:	6978      	ldr	r0, [r7, #20]
 8003490:	f7ff ff8e 	bl	80033b0 <NVIC_EncodePriority>
 8003494:	4602      	mov	r2, r0
 8003496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800349a:	4611      	mov	r1, r2
 800349c:	4618      	mov	r0, r3
 800349e:	f7ff ff5d 	bl	800335c <__NVIC_SetPriority>
}
 80034a2:	bf00      	nop
 80034a4:	3718      	adds	r7, #24
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b082      	sub	sp, #8
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7ff ffb0 	bl	8003418 <SysTick_Config>
 80034b8:	4603      	mov	r3, r0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
	...

080034c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b089      	sub	sp, #36	@ 0x24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034ce:	2300      	movs	r3, #0
 80034d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034d2:	2300      	movs	r3, #0
 80034d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034d6:	2300      	movs	r3, #0
 80034d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034da:	2300      	movs	r3, #0
 80034dc:	61fb      	str	r3, [r7, #28]
 80034de:	e165      	b.n	80037ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034e0:	2201      	movs	r2, #1
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	4013      	ands	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	f040 8154 	bne.w	80037a6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f003 0303 	and.w	r3, r3, #3
 8003506:	2b01      	cmp	r3, #1
 8003508:	d005      	beq.n	8003516 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003512:	2b02      	cmp	r3, #2
 8003514:	d130      	bne.n	8003578 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	2203      	movs	r2, #3
 8003522:	fa02 f303 	lsl.w	r3, r2, r3
 8003526:	43db      	mvns	r3, r3
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	4013      	ands	r3, r2
 800352c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	68da      	ldr	r2, [r3, #12]
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	fa02 f303 	lsl.w	r3, r2, r3
 800353a:	69ba      	ldr	r2, [r7, #24]
 800353c:	4313      	orrs	r3, r2
 800353e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800354c:	2201      	movs	r2, #1
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	fa02 f303 	lsl.w	r3, r2, r3
 8003554:	43db      	mvns	r3, r3
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	4013      	ands	r3, r2
 800355a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	091b      	lsrs	r3, r3, #4
 8003562:	f003 0201 	and.w	r2, r3, #1
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	4313      	orrs	r3, r2
 8003570:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f003 0303 	and.w	r3, r3, #3
 8003580:	2b03      	cmp	r3, #3
 8003582:	d017      	beq.n	80035b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	2203      	movs	r2, #3
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	43db      	mvns	r3, r3
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	4013      	ands	r3, r2
 800359a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	fa02 f303 	lsl.w	r3, r2, r3
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f003 0303 	and.w	r3, r3, #3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d123      	bne.n	8003608 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	08da      	lsrs	r2, r3, #3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3208      	adds	r2, #8
 80035c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	f003 0307 	and.w	r3, r3, #7
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	220f      	movs	r2, #15
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	43db      	mvns	r3, r3
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	4013      	ands	r3, r2
 80035e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	691a      	ldr	r2, [r3, #16]
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	f003 0307 	and.w	r3, r3, #7
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	08da      	lsrs	r2, r3, #3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	3208      	adds	r2, #8
 8003602:	69b9      	ldr	r1, [r7, #24]
 8003604:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	2203      	movs	r2, #3
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	43db      	mvns	r3, r3
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	4013      	ands	r3, r2
 800361e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f003 0203 	and.w	r2, r3, #3
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	4313      	orrs	r3, r2
 8003634:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 80ae 	beq.w	80037a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800364a:	2300      	movs	r3, #0
 800364c:	60fb      	str	r3, [r7, #12]
 800364e:	4b5d      	ldr	r3, [pc, #372]	@ (80037c4 <HAL_GPIO_Init+0x300>)
 8003650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003652:	4a5c      	ldr	r2, [pc, #368]	@ (80037c4 <HAL_GPIO_Init+0x300>)
 8003654:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003658:	6453      	str	r3, [r2, #68]	@ 0x44
 800365a:	4b5a      	ldr	r3, [pc, #360]	@ (80037c4 <HAL_GPIO_Init+0x300>)
 800365c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800365e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003666:	4a58      	ldr	r2, [pc, #352]	@ (80037c8 <HAL_GPIO_Init+0x304>)
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	089b      	lsrs	r3, r3, #2
 800366c:	3302      	adds	r3, #2
 800366e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003672:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	f003 0303 	and.w	r3, r3, #3
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	220f      	movs	r2, #15
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	43db      	mvns	r3, r3
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	4013      	ands	r3, r2
 8003688:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a4f      	ldr	r2, [pc, #316]	@ (80037cc <HAL_GPIO_Init+0x308>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d025      	beq.n	80036de <HAL_GPIO_Init+0x21a>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a4e      	ldr	r2, [pc, #312]	@ (80037d0 <HAL_GPIO_Init+0x30c>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d01f      	beq.n	80036da <HAL_GPIO_Init+0x216>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a4d      	ldr	r2, [pc, #308]	@ (80037d4 <HAL_GPIO_Init+0x310>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d019      	beq.n	80036d6 <HAL_GPIO_Init+0x212>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a4c      	ldr	r2, [pc, #304]	@ (80037d8 <HAL_GPIO_Init+0x314>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d013      	beq.n	80036d2 <HAL_GPIO_Init+0x20e>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a4b      	ldr	r2, [pc, #300]	@ (80037dc <HAL_GPIO_Init+0x318>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d00d      	beq.n	80036ce <HAL_GPIO_Init+0x20a>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a4a      	ldr	r2, [pc, #296]	@ (80037e0 <HAL_GPIO_Init+0x31c>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d007      	beq.n	80036ca <HAL_GPIO_Init+0x206>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a49      	ldr	r2, [pc, #292]	@ (80037e4 <HAL_GPIO_Init+0x320>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d101      	bne.n	80036c6 <HAL_GPIO_Init+0x202>
 80036c2:	2306      	movs	r3, #6
 80036c4:	e00c      	b.n	80036e0 <HAL_GPIO_Init+0x21c>
 80036c6:	2307      	movs	r3, #7
 80036c8:	e00a      	b.n	80036e0 <HAL_GPIO_Init+0x21c>
 80036ca:	2305      	movs	r3, #5
 80036cc:	e008      	b.n	80036e0 <HAL_GPIO_Init+0x21c>
 80036ce:	2304      	movs	r3, #4
 80036d0:	e006      	b.n	80036e0 <HAL_GPIO_Init+0x21c>
 80036d2:	2303      	movs	r3, #3
 80036d4:	e004      	b.n	80036e0 <HAL_GPIO_Init+0x21c>
 80036d6:	2302      	movs	r3, #2
 80036d8:	e002      	b.n	80036e0 <HAL_GPIO_Init+0x21c>
 80036da:	2301      	movs	r3, #1
 80036dc:	e000      	b.n	80036e0 <HAL_GPIO_Init+0x21c>
 80036de:	2300      	movs	r3, #0
 80036e0:	69fa      	ldr	r2, [r7, #28]
 80036e2:	f002 0203 	and.w	r2, r2, #3
 80036e6:	0092      	lsls	r2, r2, #2
 80036e8:	4093      	lsls	r3, r2
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036f0:	4935      	ldr	r1, [pc, #212]	@ (80037c8 <HAL_GPIO_Init+0x304>)
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	089b      	lsrs	r3, r3, #2
 80036f6:	3302      	adds	r3, #2
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036fe:	4b3a      	ldr	r3, [pc, #232]	@ (80037e8 <HAL_GPIO_Init+0x324>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	43db      	mvns	r3, r3
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	4013      	ands	r3, r2
 800370c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d003      	beq.n	8003722 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800371a:	69ba      	ldr	r2, [r7, #24]
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	4313      	orrs	r3, r2
 8003720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003722:	4a31      	ldr	r2, [pc, #196]	@ (80037e8 <HAL_GPIO_Init+0x324>)
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003728:	4b2f      	ldr	r3, [pc, #188]	@ (80037e8 <HAL_GPIO_Init+0x324>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	43db      	mvns	r3, r3
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	4013      	ands	r3, r2
 8003736:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d003      	beq.n	800374c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	4313      	orrs	r3, r2
 800374a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800374c:	4a26      	ldr	r2, [pc, #152]	@ (80037e8 <HAL_GPIO_Init+0x324>)
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003752:	4b25      	ldr	r3, [pc, #148]	@ (80037e8 <HAL_GPIO_Init+0x324>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	43db      	mvns	r3, r3
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	4013      	ands	r3, r2
 8003760:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d003      	beq.n	8003776 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	4313      	orrs	r3, r2
 8003774:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003776:	4a1c      	ldr	r2, [pc, #112]	@ (80037e8 <HAL_GPIO_Init+0x324>)
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800377c:	4b1a      	ldr	r3, [pc, #104]	@ (80037e8 <HAL_GPIO_Init+0x324>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	43db      	mvns	r3, r3
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	4013      	ands	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d003      	beq.n	80037a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	4313      	orrs	r3, r2
 800379e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037a0:	4a11      	ldr	r2, [pc, #68]	@ (80037e8 <HAL_GPIO_Init+0x324>)
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	3301      	adds	r3, #1
 80037aa:	61fb      	str	r3, [r7, #28]
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	2b0f      	cmp	r3, #15
 80037b0:	f67f ae96 	bls.w	80034e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037b4:	bf00      	nop
 80037b6:	bf00      	nop
 80037b8:	3724      	adds	r7, #36	@ 0x24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	40023800 	.word	0x40023800
 80037c8:	40013800 	.word	0x40013800
 80037cc:	40020000 	.word	0x40020000
 80037d0:	40020400 	.word	0x40020400
 80037d4:	40020800 	.word	0x40020800
 80037d8:	40020c00 	.word	0x40020c00
 80037dc:	40021000 	.word	0x40021000
 80037e0:	40021400 	.word	0x40021400
 80037e4:	40021800 	.word	0x40021800
 80037e8:	40013c00 	.word	0x40013c00

080037ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	460b      	mov	r3, r1
 80037f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	691a      	ldr	r2, [r3, #16]
 80037fc:	887b      	ldrh	r3, [r7, #2]
 80037fe:	4013      	ands	r3, r2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d002      	beq.n	800380a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003804:	2301      	movs	r3, #1
 8003806:	73fb      	strb	r3, [r7, #15]
 8003808:	e001      	b.n	800380e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800380a:	2300      	movs	r3, #0
 800380c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800380e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003810:	4618      	mov	r0, r3
 8003812:	3714      	adds	r7, #20
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	460b      	mov	r3, r1
 8003826:	807b      	strh	r3, [r7, #2]
 8003828:	4613      	mov	r3, r2
 800382a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800382c:	787b      	ldrb	r3, [r7, #1]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003832:	887a      	ldrh	r2, [r7, #2]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003838:	e003      	b.n	8003842 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800383a:	887b      	ldrh	r3, [r7, #2]
 800383c:	041a      	lsls	r2, r3, #16
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	619a      	str	r2, [r3, #24]
}
 8003842:	bf00      	nop
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
	...

08003850 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e12b      	b.n	8003aba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d106      	bne.n	800387c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f7fe fde8 	bl	800244c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2224      	movs	r2, #36	@ 0x24
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f022 0201 	bic.w	r2, r2, #1
 8003892:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80038b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038b4:	f001 f932 	bl	8004b1c <HAL_RCC_GetPCLK1Freq>
 80038b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	4a81      	ldr	r2, [pc, #516]	@ (8003ac4 <HAL_I2C_Init+0x274>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d807      	bhi.n	80038d4 <HAL_I2C_Init+0x84>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	4a80      	ldr	r2, [pc, #512]	@ (8003ac8 <HAL_I2C_Init+0x278>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	bf94      	ite	ls
 80038cc:	2301      	movls	r3, #1
 80038ce:	2300      	movhi	r3, #0
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	e006      	b.n	80038e2 <HAL_I2C_Init+0x92>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	4a7d      	ldr	r2, [pc, #500]	@ (8003acc <HAL_I2C_Init+0x27c>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	bf94      	ite	ls
 80038dc:	2301      	movls	r3, #1
 80038de:	2300      	movhi	r3, #0
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e0e7      	b.n	8003aba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	4a78      	ldr	r2, [pc, #480]	@ (8003ad0 <HAL_I2C_Init+0x280>)
 80038ee:	fba2 2303 	umull	r2, r3, r2, r3
 80038f2:	0c9b      	lsrs	r3, r3, #18
 80038f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	430a      	orrs	r2, r1
 8003908:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	4a6a      	ldr	r2, [pc, #424]	@ (8003ac4 <HAL_I2C_Init+0x274>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d802      	bhi.n	8003924 <HAL_I2C_Init+0xd4>
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	3301      	adds	r3, #1
 8003922:	e009      	b.n	8003938 <HAL_I2C_Init+0xe8>
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800392a:	fb02 f303 	mul.w	r3, r2, r3
 800392e:	4a69      	ldr	r2, [pc, #420]	@ (8003ad4 <HAL_I2C_Init+0x284>)
 8003930:	fba2 2303 	umull	r2, r3, r2, r3
 8003934:	099b      	lsrs	r3, r3, #6
 8003936:	3301      	adds	r3, #1
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	6812      	ldr	r2, [r2, #0]
 800393c:	430b      	orrs	r3, r1
 800393e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800394a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	495c      	ldr	r1, [pc, #368]	@ (8003ac4 <HAL_I2C_Init+0x274>)
 8003954:	428b      	cmp	r3, r1
 8003956:	d819      	bhi.n	800398c <HAL_I2C_Init+0x13c>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	1e59      	subs	r1, r3, #1
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	fbb1 f3f3 	udiv	r3, r1, r3
 8003966:	1c59      	adds	r1, r3, #1
 8003968:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800396c:	400b      	ands	r3, r1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00a      	beq.n	8003988 <HAL_I2C_Init+0x138>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	1e59      	subs	r1, r3, #1
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003980:	3301      	adds	r3, #1
 8003982:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003986:	e051      	b.n	8003a2c <HAL_I2C_Init+0x1dc>
 8003988:	2304      	movs	r3, #4
 800398a:	e04f      	b.n	8003a2c <HAL_I2C_Init+0x1dc>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d111      	bne.n	80039b8 <HAL_I2C_Init+0x168>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	1e58      	subs	r0, r3, #1
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6859      	ldr	r1, [r3, #4]
 800399c:	460b      	mov	r3, r1
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	440b      	add	r3, r1
 80039a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80039a6:	3301      	adds	r3, #1
 80039a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	bf0c      	ite	eq
 80039b0:	2301      	moveq	r3, #1
 80039b2:	2300      	movne	r3, #0
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	e012      	b.n	80039de <HAL_I2C_Init+0x18e>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	1e58      	subs	r0, r3, #1
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6859      	ldr	r1, [r3, #4]
 80039c0:	460b      	mov	r3, r1
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	440b      	add	r3, r1
 80039c6:	0099      	lsls	r1, r3, #2
 80039c8:	440b      	add	r3, r1
 80039ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80039ce:	3301      	adds	r3, #1
 80039d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	bf0c      	ite	eq
 80039d8:	2301      	moveq	r3, #1
 80039da:	2300      	movne	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <HAL_I2C_Init+0x196>
 80039e2:	2301      	movs	r3, #1
 80039e4:	e022      	b.n	8003a2c <HAL_I2C_Init+0x1dc>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10e      	bne.n	8003a0c <HAL_I2C_Init+0x1bc>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	1e58      	subs	r0, r3, #1
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6859      	ldr	r1, [r3, #4]
 80039f6:	460b      	mov	r3, r1
 80039f8:	005b      	lsls	r3, r3, #1
 80039fa:	440b      	add	r3, r1
 80039fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a00:	3301      	adds	r3, #1
 8003a02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a0a:	e00f      	b.n	8003a2c <HAL_I2C_Init+0x1dc>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	1e58      	subs	r0, r3, #1
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6859      	ldr	r1, [r3, #4]
 8003a14:	460b      	mov	r3, r1
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	440b      	add	r3, r1
 8003a1a:	0099      	lsls	r1, r3, #2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a22:	3301      	adds	r3, #1
 8003a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a28:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a2c:	6879      	ldr	r1, [r7, #4]
 8003a2e:	6809      	ldr	r1, [r1, #0]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	69da      	ldr	r2, [r3, #28]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	431a      	orrs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003a5a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	6911      	ldr	r1, [r2, #16]
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	68d2      	ldr	r2, [r2, #12]
 8003a66:	4311      	orrs	r1, r2
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	6812      	ldr	r2, [r2, #0]
 8003a6c:	430b      	orrs	r3, r1
 8003a6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	695a      	ldr	r2, [r3, #20]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	431a      	orrs	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0201 	orr.w	r2, r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	000186a0 	.word	0x000186a0
 8003ac8:	001e847f 	.word	0x001e847f
 8003acc:	003d08ff 	.word	0x003d08ff
 8003ad0:	431bde83 	.word	0x431bde83
 8003ad4:	10624dd3 	.word	0x10624dd3

08003ad8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b088      	sub	sp, #32
 8003adc:	af02      	add	r7, sp, #8
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	4608      	mov	r0, r1
 8003ae2:	4611      	mov	r1, r2
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	817b      	strh	r3, [r7, #10]
 8003aea:	460b      	mov	r3, r1
 8003aec:	813b      	strh	r3, [r7, #8]
 8003aee:	4613      	mov	r3, r2
 8003af0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003af2:	f7fe ffc1 	bl	8002a78 <HAL_GetTick>
 8003af6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b20      	cmp	r3, #32
 8003b02:	f040 80d9 	bne.w	8003cb8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	2319      	movs	r3, #25
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	496d      	ldr	r1, [pc, #436]	@ (8003cc4 <HAL_I2C_Mem_Write+0x1ec>)
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f000 fc8b 	bl	800442c <I2C_WaitOnFlagUntilTimeout>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	e0cc      	b.n	8003cba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d101      	bne.n	8003b2e <HAL_I2C_Mem_Write+0x56>
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	e0c5      	b.n	8003cba <HAL_I2C_Mem_Write+0x1e2>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d007      	beq.n	8003b54 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f042 0201 	orr.w	r2, r2, #1
 8003b52:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b62:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2221      	movs	r2, #33	@ 0x21
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2240      	movs	r2, #64	@ 0x40
 8003b70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6a3a      	ldr	r2, [r7, #32]
 8003b7e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003b84:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	4a4d      	ldr	r2, [pc, #308]	@ (8003cc8 <HAL_I2C_Mem_Write+0x1f0>)
 8003b94:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b96:	88f8      	ldrh	r0, [r7, #6]
 8003b98:	893a      	ldrh	r2, [r7, #8]
 8003b9a:	8979      	ldrh	r1, [r7, #10]
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	9301      	str	r3, [sp, #4]
 8003ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f000 fac2 	bl	8004130 <I2C_RequestMemoryWrite>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d052      	beq.n	8003c58 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e081      	b.n	8003cba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f000 fd50 	bl	8004660 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00d      	beq.n	8003be2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	d107      	bne.n	8003bde <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bdc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e06b      	b.n	8003cba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be6:	781a      	ldrb	r2, [r3, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf2:	1c5a      	adds	r2, r3, #1
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	f003 0304 	and.w	r3, r3, #4
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d11b      	bne.n	8003c58 <HAL_I2C_Mem_Write+0x180>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d017      	beq.n	8003c58 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c2c:	781a      	ldrb	r2, [r3, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c38:	1c5a      	adds	r2, r3, #1
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c42:	3b01      	subs	r3, #1
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	3b01      	subs	r3, #1
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1aa      	bne.n	8003bb6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f000 fd43 	bl	80046f0 <I2C_WaitOnBTFFlagUntilTimeout>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00d      	beq.n	8003c8c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c74:	2b04      	cmp	r3, #4
 8003c76:	d107      	bne.n	8003c88 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c86:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e016      	b.n	8003cba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	e000      	b.n	8003cba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003cb8:	2302      	movs	r3, #2
  }
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3718      	adds	r7, #24
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	00100002 	.word	0x00100002
 8003cc8:	ffff0000 	.word	0xffff0000

08003ccc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b08c      	sub	sp, #48	@ 0x30
 8003cd0:	af02      	add	r7, sp, #8
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	4608      	mov	r0, r1
 8003cd6:	4611      	mov	r1, r2
 8003cd8:	461a      	mov	r2, r3
 8003cda:	4603      	mov	r3, r0
 8003cdc:	817b      	strh	r3, [r7, #10]
 8003cde:	460b      	mov	r3, r1
 8003ce0:	813b      	strh	r3, [r7, #8]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ce6:	f7fe fec7 	bl	8002a78 <HAL_GetTick>
 8003cea:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b20      	cmp	r3, #32
 8003cf6:	f040 8214 	bne.w	8004122 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfc:	9300      	str	r3, [sp, #0]
 8003cfe:	2319      	movs	r3, #25
 8003d00:	2201      	movs	r2, #1
 8003d02:	497b      	ldr	r1, [pc, #492]	@ (8003ef0 <HAL_I2C_Mem_Read+0x224>)
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f000 fb91 	bl	800442c <I2C_WaitOnFlagUntilTimeout>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003d10:	2302      	movs	r3, #2
 8003d12:	e207      	b.n	8004124 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d101      	bne.n	8003d22 <HAL_I2C_Mem_Read+0x56>
 8003d1e:	2302      	movs	r3, #2
 8003d20:	e200      	b.n	8004124 <HAL_I2C_Mem_Read+0x458>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0301 	and.w	r3, r3, #1
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d007      	beq.n	8003d48 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0201 	orr.w	r2, r2, #1
 8003d46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2222      	movs	r2, #34	@ 0x22
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2240      	movs	r2, #64	@ 0x40
 8003d64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d72:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003d78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	4a5b      	ldr	r2, [pc, #364]	@ (8003ef4 <HAL_I2C_Mem_Read+0x228>)
 8003d88:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d8a:	88f8      	ldrh	r0, [r7, #6]
 8003d8c:	893a      	ldrh	r2, [r7, #8]
 8003d8e:	8979      	ldrh	r1, [r7, #10]
 8003d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d92:	9301      	str	r3, [sp, #4]
 8003d94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	4603      	mov	r3, r0
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f000 fa5e 	bl	800425c <I2C_RequestMemoryRead>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e1bc      	b.n	8004124 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d113      	bne.n	8003dda <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003db2:	2300      	movs	r3, #0
 8003db4:	623b      	str	r3, [r7, #32]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	623b      	str	r3, [r7, #32]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	623b      	str	r3, [r7, #32]
 8003dc6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dd6:	601a      	str	r2, [r3, #0]
 8003dd8:	e190      	b.n	80040fc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d11b      	bne.n	8003e1a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003df0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003df2:	2300      	movs	r3, #0
 8003df4:	61fb      	str	r3, [r7, #28]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	695b      	ldr	r3, [r3, #20]
 8003dfc:	61fb      	str	r3, [r7, #28]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	61fb      	str	r3, [r7, #28]
 8003e06:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e16:	601a      	str	r2, [r3, #0]
 8003e18:	e170      	b.n	80040fc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d11b      	bne.n	8003e5a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e30:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e42:	2300      	movs	r3, #0
 8003e44:	61bb      	str	r3, [r7, #24]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	695b      	ldr	r3, [r3, #20]
 8003e4c:	61bb      	str	r3, [r7, #24]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	61bb      	str	r3, [r7, #24]
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	e150      	b.n	80040fc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	617b      	str	r3, [r7, #20]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	695b      	ldr	r3, [r3, #20]
 8003e64:	617b      	str	r3, [r7, #20]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	617b      	str	r3, [r7, #20]
 8003e6e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003e70:	e144      	b.n	80040fc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e76:	2b03      	cmp	r3, #3
 8003e78:	f200 80f1 	bhi.w	800405e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d123      	bne.n	8003ecc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e86:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f000 fc79 	bl	8004780 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d001      	beq.n	8003e98 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e145      	b.n	8004124 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	691a      	ldr	r2, [r3, #16]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea2:	b2d2      	uxtb	r2, r2
 8003ea4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eaa:	1c5a      	adds	r2, r3, #1
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003eca:	e117      	b.n	80040fc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d14e      	bne.n	8003f72 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eda:	2200      	movs	r2, #0
 8003edc:	4906      	ldr	r1, [pc, #24]	@ (8003ef8 <HAL_I2C_Mem_Read+0x22c>)
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f000 faa4 	bl	800442c <I2C_WaitOnFlagUntilTimeout>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d008      	beq.n	8003efc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e11a      	b.n	8004124 <HAL_I2C_Mem_Read+0x458>
 8003eee:	bf00      	nop
 8003ef0:	00100002 	.word	0x00100002
 8003ef4:	ffff0000 	.word	0xffff0000
 8003ef8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	691a      	ldr	r2, [r3, #16]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f16:	b2d2      	uxtb	r2, r2
 8003f18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1e:	1c5a      	adds	r2, r3, #1
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	3b01      	subs	r3, #1
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	691a      	ldr	r2, [r3, #16]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f48:	b2d2      	uxtb	r2, r2
 8003f4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f50:	1c5a      	adds	r2, r3, #1
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f70:	e0c4      	b.n	80040fc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f78:	2200      	movs	r2, #0
 8003f7a:	496c      	ldr	r1, [pc, #432]	@ (800412c <HAL_I2C_Mem_Read+0x460>)
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f000 fa55 	bl	800442c <I2C_WaitOnFlagUntilTimeout>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e0cb      	b.n	8004124 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	691a      	ldr	r2, [r3, #16]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa6:	b2d2      	uxtb	r2, r2
 8003fa8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fae:	1c5a      	adds	r2, r3, #1
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	4955      	ldr	r1, [pc, #340]	@ (800412c <HAL_I2C_Mem_Read+0x460>)
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f000 fa27 	bl	800442c <I2C_WaitOnFlagUntilTimeout>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d001      	beq.n	8003fe8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e09d      	b.n	8004124 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ff6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	691a      	ldr	r2, [r3, #16]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004002:	b2d2      	uxtb	r2, r2
 8004004:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800400a:	1c5a      	adds	r2, r3, #1
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004014:	3b01      	subs	r3, #1
 8004016:	b29a      	uxth	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004020:	b29b      	uxth	r3, r3
 8004022:	3b01      	subs	r3, #1
 8004024:	b29a      	uxth	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	691a      	ldr	r2, [r3, #16]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004034:	b2d2      	uxtb	r2, r2
 8004036:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403c:	1c5a      	adds	r2, r3, #1
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004046:	3b01      	subs	r3, #1
 8004048:	b29a      	uxth	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004052:	b29b      	uxth	r3, r3
 8004054:	3b01      	subs	r3, #1
 8004056:	b29a      	uxth	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800405c:	e04e      	b.n	80040fc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800405e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004060:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f000 fb8c 	bl	8004780 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e058      	b.n	8004124 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	691a      	ldr	r2, [r3, #16]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407c:	b2d2      	uxtb	r2, r2
 800407e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004084:	1c5a      	adds	r2, r3, #1
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800408e:	3b01      	subs	r3, #1
 8004090:	b29a      	uxth	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800409a:	b29b      	uxth	r3, r3
 800409c:	3b01      	subs	r3, #1
 800409e:	b29a      	uxth	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	f003 0304 	and.w	r3, r3, #4
 80040ae:	2b04      	cmp	r3, #4
 80040b0:	d124      	bne.n	80040fc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040b6:	2b03      	cmp	r3, #3
 80040b8:	d107      	bne.n	80040ca <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040c8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	691a      	ldr	r2, [r3, #16]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d4:	b2d2      	uxtb	r2, r2
 80040d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040dc:	1c5a      	adds	r2, r3, #1
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040e6:	3b01      	subs	r3, #1
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	3b01      	subs	r3, #1
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004100:	2b00      	cmp	r3, #0
 8004102:	f47f aeb6 	bne.w	8003e72 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2220      	movs	r2, #32
 800410a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800411e:	2300      	movs	r3, #0
 8004120:	e000      	b.n	8004124 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004122:	2302      	movs	r3, #2
  }
}
 8004124:	4618      	mov	r0, r3
 8004126:	3728      	adds	r7, #40	@ 0x28
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	00010004 	.word	0x00010004

08004130 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b088      	sub	sp, #32
 8004134:	af02      	add	r7, sp, #8
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	4608      	mov	r0, r1
 800413a:	4611      	mov	r1, r2
 800413c:	461a      	mov	r2, r3
 800413e:	4603      	mov	r3, r0
 8004140:	817b      	strh	r3, [r7, #10]
 8004142:	460b      	mov	r3, r1
 8004144:	813b      	strh	r3, [r7, #8]
 8004146:	4613      	mov	r3, r2
 8004148:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004158:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800415a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415c:	9300      	str	r3, [sp, #0]
 800415e:	6a3b      	ldr	r3, [r7, #32]
 8004160:	2200      	movs	r2, #0
 8004162:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	f000 f960 	bl	800442c <I2C_WaitOnFlagUntilTimeout>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00d      	beq.n	800418e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800417c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004180:	d103      	bne.n	800418a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004188:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e05f      	b.n	800424e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800418e:	897b      	ldrh	r3, [r7, #10]
 8004190:	b2db      	uxtb	r3, r3
 8004192:	461a      	mov	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800419c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800419e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a0:	6a3a      	ldr	r2, [r7, #32]
 80041a2:	492d      	ldr	r1, [pc, #180]	@ (8004258 <I2C_RequestMemoryWrite+0x128>)
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f000 f9bb 	bl	8004520 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d001      	beq.n	80041b4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e04c      	b.n	800424e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041b4:	2300      	movs	r3, #0
 80041b6:	617b      	str	r3, [r7, #20]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	617b      	str	r3, [r7, #20]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	617b      	str	r3, [r7, #20]
 80041c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041cc:	6a39      	ldr	r1, [r7, #32]
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	f000 fa46 	bl	8004660 <I2C_WaitOnTXEFlagUntilTimeout>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00d      	beq.n	80041f6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041de:	2b04      	cmp	r3, #4
 80041e0:	d107      	bne.n	80041f2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e02b      	b.n	800424e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041f6:	88fb      	ldrh	r3, [r7, #6]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d105      	bne.n	8004208 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041fc:	893b      	ldrh	r3, [r7, #8]
 80041fe:	b2da      	uxtb	r2, r3
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	611a      	str	r2, [r3, #16]
 8004206:	e021      	b.n	800424c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004208:	893b      	ldrh	r3, [r7, #8]
 800420a:	0a1b      	lsrs	r3, r3, #8
 800420c:	b29b      	uxth	r3, r3
 800420e:	b2da      	uxtb	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004218:	6a39      	ldr	r1, [r7, #32]
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f000 fa20 	bl	8004660 <I2C_WaitOnTXEFlagUntilTimeout>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00d      	beq.n	8004242 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422a:	2b04      	cmp	r3, #4
 800422c:	d107      	bne.n	800423e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800423c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e005      	b.n	800424e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004242:	893b      	ldrh	r3, [r7, #8]
 8004244:	b2da      	uxtb	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3718      	adds	r7, #24
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	00010002 	.word	0x00010002

0800425c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b088      	sub	sp, #32
 8004260:	af02      	add	r7, sp, #8
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	4608      	mov	r0, r1
 8004266:	4611      	mov	r1, r2
 8004268:	461a      	mov	r2, r3
 800426a:	4603      	mov	r3, r0
 800426c:	817b      	strh	r3, [r7, #10]
 800426e:	460b      	mov	r3, r1
 8004270:	813b      	strh	r3, [r7, #8]
 8004272:	4613      	mov	r3, r2
 8004274:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004284:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004294:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004298:	9300      	str	r3, [sp, #0]
 800429a:	6a3b      	ldr	r3, [r7, #32]
 800429c:	2200      	movs	r2, #0
 800429e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f000 f8c2 	bl	800442c <I2C_WaitOnFlagUntilTimeout>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00d      	beq.n	80042ca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042bc:	d103      	bne.n	80042c6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042c4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e0aa      	b.n	8004420 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042ca:	897b      	ldrh	r3, [r7, #10]
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	461a      	mov	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80042d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042dc:	6a3a      	ldr	r2, [r7, #32]
 80042de:	4952      	ldr	r1, [pc, #328]	@ (8004428 <I2C_RequestMemoryRead+0x1cc>)
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f000 f91d 	bl	8004520 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d001      	beq.n	80042f0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e097      	b.n	8004420 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042f0:	2300      	movs	r3, #0
 80042f2:	617b      	str	r3, [r7, #20]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	617b      	str	r3, [r7, #20]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	617b      	str	r3, [r7, #20]
 8004304:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004306:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004308:	6a39      	ldr	r1, [r7, #32]
 800430a:	68f8      	ldr	r0, [r7, #12]
 800430c:	f000 f9a8 	bl	8004660 <I2C_WaitOnTXEFlagUntilTimeout>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00d      	beq.n	8004332 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431a:	2b04      	cmp	r3, #4
 800431c:	d107      	bne.n	800432e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800432c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e076      	b.n	8004420 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004332:	88fb      	ldrh	r3, [r7, #6]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d105      	bne.n	8004344 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004338:	893b      	ldrh	r3, [r7, #8]
 800433a:	b2da      	uxtb	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	611a      	str	r2, [r3, #16]
 8004342:	e021      	b.n	8004388 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004344:	893b      	ldrh	r3, [r7, #8]
 8004346:	0a1b      	lsrs	r3, r3, #8
 8004348:	b29b      	uxth	r3, r3
 800434a:	b2da      	uxtb	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004352:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004354:	6a39      	ldr	r1, [r7, #32]
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f000 f982 	bl	8004660 <I2C_WaitOnTXEFlagUntilTimeout>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00d      	beq.n	800437e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004366:	2b04      	cmp	r3, #4
 8004368:	d107      	bne.n	800437a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004378:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e050      	b.n	8004420 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800437e:	893b      	ldrh	r3, [r7, #8]
 8004380:	b2da      	uxtb	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004388:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800438a:	6a39      	ldr	r1, [r7, #32]
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f000 f967 	bl	8004660 <I2C_WaitOnTXEFlagUntilTimeout>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00d      	beq.n	80043b4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800439c:	2b04      	cmp	r3, #4
 800439e:	d107      	bne.n	80043b0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043ae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e035      	b.n	8004420 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043c2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c6:	9300      	str	r3, [sp, #0]
 80043c8:	6a3b      	ldr	r3, [r7, #32]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f000 f82b 	bl	800442c <I2C_WaitOnFlagUntilTimeout>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00d      	beq.n	80043f8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043ea:	d103      	bne.n	80043f4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043f2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e013      	b.n	8004420 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80043f8:	897b      	ldrh	r3, [r7, #10]
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	f043 0301 	orr.w	r3, r3, #1
 8004400:	b2da      	uxtb	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800440a:	6a3a      	ldr	r2, [r7, #32]
 800440c:	4906      	ldr	r1, [pc, #24]	@ (8004428 <I2C_RequestMemoryRead+0x1cc>)
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f000 f886 	bl	8004520 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e000      	b.n	8004420 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3718      	adds	r7, #24
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	00010002 	.word	0x00010002

0800442c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	603b      	str	r3, [r7, #0]
 8004438:	4613      	mov	r3, r2
 800443a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800443c:	e048      	b.n	80044d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004444:	d044      	beq.n	80044d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004446:	f7fe fb17 	bl	8002a78 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	683a      	ldr	r2, [r7, #0]
 8004452:	429a      	cmp	r2, r3
 8004454:	d302      	bcc.n	800445c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d139      	bne.n	80044d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	0c1b      	lsrs	r3, r3, #16
 8004460:	b2db      	uxtb	r3, r3
 8004462:	2b01      	cmp	r3, #1
 8004464:	d10d      	bne.n	8004482 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	43da      	mvns	r2, r3
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	4013      	ands	r3, r2
 8004472:	b29b      	uxth	r3, r3
 8004474:	2b00      	cmp	r3, #0
 8004476:	bf0c      	ite	eq
 8004478:	2301      	moveq	r3, #1
 800447a:	2300      	movne	r3, #0
 800447c:	b2db      	uxtb	r3, r3
 800447e:	461a      	mov	r2, r3
 8004480:	e00c      	b.n	800449c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	43da      	mvns	r2, r3
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	4013      	ands	r3, r2
 800448e:	b29b      	uxth	r3, r3
 8004490:	2b00      	cmp	r3, #0
 8004492:	bf0c      	ite	eq
 8004494:	2301      	moveq	r3, #1
 8004496:	2300      	movne	r3, #0
 8004498:	b2db      	uxtb	r3, r3
 800449a:	461a      	mov	r2, r3
 800449c:	79fb      	ldrb	r3, [r7, #7]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d116      	bne.n	80044d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2220      	movs	r2, #32
 80044ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044bc:	f043 0220 	orr.w	r2, r3, #32
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e023      	b.n	8004518 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	0c1b      	lsrs	r3, r3, #16
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d10d      	bne.n	80044f6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	695b      	ldr	r3, [r3, #20]
 80044e0:	43da      	mvns	r2, r3
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	4013      	ands	r3, r2
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	bf0c      	ite	eq
 80044ec:	2301      	moveq	r3, #1
 80044ee:	2300      	movne	r3, #0
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	461a      	mov	r2, r3
 80044f4:	e00c      	b.n	8004510 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	43da      	mvns	r2, r3
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	4013      	ands	r3, r2
 8004502:	b29b      	uxth	r3, r3
 8004504:	2b00      	cmp	r3, #0
 8004506:	bf0c      	ite	eq
 8004508:	2301      	moveq	r3, #1
 800450a:	2300      	movne	r3, #0
 800450c:	b2db      	uxtb	r3, r3
 800450e:	461a      	mov	r2, r3
 8004510:	79fb      	ldrb	r3, [r7, #7]
 8004512:	429a      	cmp	r2, r3
 8004514:	d093      	beq.n	800443e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
 800452c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800452e:	e071      	b.n	8004614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800453a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800453e:	d123      	bne.n	8004588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800454e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004558:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2220      	movs	r2, #32
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004574:	f043 0204 	orr.w	r2, r3, #4
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e067      	b.n	8004658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800458e:	d041      	beq.n	8004614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004590:	f7fe fa72 	bl	8002a78 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	429a      	cmp	r2, r3
 800459e:	d302      	bcc.n	80045a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d136      	bne.n	8004614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	0c1b      	lsrs	r3, r3, #16
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d10c      	bne.n	80045ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	43da      	mvns	r2, r3
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	4013      	ands	r3, r2
 80045bc:	b29b      	uxth	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	bf14      	ite	ne
 80045c2:	2301      	movne	r3, #1
 80045c4:	2300      	moveq	r3, #0
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	e00b      	b.n	80045e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	43da      	mvns	r2, r3
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	4013      	ands	r3, r2
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	2b00      	cmp	r3, #0
 80045da:	bf14      	ite	ne
 80045dc:	2301      	movne	r3, #1
 80045de:	2300      	moveq	r3, #0
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d016      	beq.n	8004614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2220      	movs	r2, #32
 80045f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004600:	f043 0220 	orr.w	r2, r3, #32
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e021      	b.n	8004658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	0c1b      	lsrs	r3, r3, #16
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b01      	cmp	r3, #1
 800461c:	d10c      	bne.n	8004638 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	43da      	mvns	r2, r3
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	4013      	ands	r3, r2
 800462a:	b29b      	uxth	r3, r3
 800462c:	2b00      	cmp	r3, #0
 800462e:	bf14      	ite	ne
 8004630:	2301      	movne	r3, #1
 8004632:	2300      	moveq	r3, #0
 8004634:	b2db      	uxtb	r3, r3
 8004636:	e00b      	b.n	8004650 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	43da      	mvns	r2, r3
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	4013      	ands	r3, r2
 8004644:	b29b      	uxth	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	bf14      	ite	ne
 800464a:	2301      	movne	r3, #1
 800464c:	2300      	moveq	r3, #0
 800464e:	b2db      	uxtb	r3, r3
 8004650:	2b00      	cmp	r3, #0
 8004652:	f47f af6d 	bne.w	8004530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3710      	adds	r7, #16
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800466c:	e034      	b.n	80046d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f000 f8e3 	bl	800483a <I2C_IsAcknowledgeFailed>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e034      	b.n	80046e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004684:	d028      	beq.n	80046d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004686:	f7fe f9f7 	bl	8002a78 <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	429a      	cmp	r2, r3
 8004694:	d302      	bcc.n	800469c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d11d      	bne.n	80046d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046a6:	2b80      	cmp	r3, #128	@ 0x80
 80046a8:	d016      	beq.n	80046d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2220      	movs	r2, #32
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c4:	f043 0220 	orr.w	r2, r3, #32
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e007      	b.n	80046e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046e2:	2b80      	cmp	r3, #128	@ 0x80
 80046e4:	d1c3      	bne.n	800466e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3710      	adds	r7, #16
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046fc:	e034      	b.n	8004768 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	f000 f89b 	bl	800483a <I2C_IsAcknowledgeFailed>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d001      	beq.n	800470e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e034      	b.n	8004778 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004714:	d028      	beq.n	8004768 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004716:	f7fe f9af 	bl	8002a78 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	68ba      	ldr	r2, [r7, #8]
 8004722:	429a      	cmp	r2, r3
 8004724:	d302      	bcc.n	800472c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d11d      	bne.n	8004768 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	f003 0304 	and.w	r3, r3, #4
 8004736:	2b04      	cmp	r3, #4
 8004738:	d016      	beq.n	8004768 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2220      	movs	r2, #32
 8004744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004754:	f043 0220 	orr.w	r2, r3, #32
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e007      	b.n	8004778 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	f003 0304 	and.w	r3, r3, #4
 8004772:	2b04      	cmp	r3, #4
 8004774:	d1c3      	bne.n	80046fe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800478c:	e049      	b.n	8004822 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	695b      	ldr	r3, [r3, #20]
 8004794:	f003 0310 	and.w	r3, r3, #16
 8004798:	2b10      	cmp	r3, #16
 800479a:	d119      	bne.n	80047d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f06f 0210 	mvn.w	r2, #16
 80047a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2220      	movs	r2, #32
 80047b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e030      	b.n	8004832 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047d0:	f7fe f952 	bl	8002a78 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d302      	bcc.n	80047e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d11d      	bne.n	8004822 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	695b      	ldr	r3, [r3, #20]
 80047ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047f0:	2b40      	cmp	r3, #64	@ 0x40
 80047f2:	d016      	beq.n	8004822 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2220      	movs	r2, #32
 80047fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800480e:	f043 0220 	orr.w	r2, r3, #32
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e007      	b.n	8004832 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	695b      	ldr	r3, [r3, #20]
 8004828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800482c:	2b40      	cmp	r3, #64	@ 0x40
 800482e:	d1ae      	bne.n	800478e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800483a:	b480      	push	{r7}
 800483c:	b083      	sub	sp, #12
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	695b      	ldr	r3, [r3, #20]
 8004848:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800484c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004850:	d11b      	bne.n	800488a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800485a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2220      	movs	r2, #32
 8004866:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004876:	f043 0204 	orr.w	r2, r3, #4
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e000      	b.n	800488c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800489e:	2300      	movs	r3, #0
 80048a0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80048a2:	2300      	movs	r3, #0
 80048a4:	603b      	str	r3, [r7, #0]
 80048a6:	4b20      	ldr	r3, [pc, #128]	@ (8004928 <HAL_PWREx_EnableOverDrive+0x90>)
 80048a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048aa:	4a1f      	ldr	r2, [pc, #124]	@ (8004928 <HAL_PWREx_EnableOverDrive+0x90>)
 80048ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80048b2:	4b1d      	ldr	r3, [pc, #116]	@ (8004928 <HAL_PWREx_EnableOverDrive+0x90>)
 80048b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048ba:	603b      	str	r3, [r7, #0]
 80048bc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80048be:	4b1b      	ldr	r3, [pc, #108]	@ (800492c <HAL_PWREx_EnableOverDrive+0x94>)
 80048c0:	2201      	movs	r2, #1
 80048c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048c4:	f7fe f8d8 	bl	8002a78 <HAL_GetTick>
 80048c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80048ca:	e009      	b.n	80048e0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80048cc:	f7fe f8d4 	bl	8002a78 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80048da:	d901      	bls.n	80048e0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e01f      	b.n	8004920 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80048e0:	4b13      	ldr	r3, [pc, #76]	@ (8004930 <HAL_PWREx_EnableOverDrive+0x98>)
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048ec:	d1ee      	bne.n	80048cc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80048ee:	4b11      	ldr	r3, [pc, #68]	@ (8004934 <HAL_PWREx_EnableOverDrive+0x9c>)
 80048f0:	2201      	movs	r2, #1
 80048f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048f4:	f7fe f8c0 	bl	8002a78 <HAL_GetTick>
 80048f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80048fa:	e009      	b.n	8004910 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80048fc:	f7fe f8bc 	bl	8002a78 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800490a:	d901      	bls.n	8004910 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e007      	b.n	8004920 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004910:	4b07      	ldr	r3, [pc, #28]	@ (8004930 <HAL_PWREx_EnableOverDrive+0x98>)
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004918:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800491c:	d1ee      	bne.n	80048fc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3708      	adds	r7, #8
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	40023800 	.word	0x40023800
 800492c:	420e0040 	.word	0x420e0040
 8004930:	40007000 	.word	0x40007000
 8004934:	420e0044 	.word	0x420e0044

08004938 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d101      	bne.n	800494c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e0cc      	b.n	8004ae6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800494c:	4b68      	ldr	r3, [pc, #416]	@ (8004af0 <HAL_RCC_ClockConfig+0x1b8>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 030f 	and.w	r3, r3, #15
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	429a      	cmp	r2, r3
 8004958:	d90c      	bls.n	8004974 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800495a:	4b65      	ldr	r3, [pc, #404]	@ (8004af0 <HAL_RCC_ClockConfig+0x1b8>)
 800495c:	683a      	ldr	r2, [r7, #0]
 800495e:	b2d2      	uxtb	r2, r2
 8004960:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004962:	4b63      	ldr	r3, [pc, #396]	@ (8004af0 <HAL_RCC_ClockConfig+0x1b8>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 030f 	and.w	r3, r3, #15
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	429a      	cmp	r2, r3
 800496e:	d001      	beq.n	8004974 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e0b8      	b.n	8004ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0302 	and.w	r3, r3, #2
 800497c:	2b00      	cmp	r3, #0
 800497e:	d020      	beq.n	80049c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0304 	and.w	r3, r3, #4
 8004988:	2b00      	cmp	r3, #0
 800498a:	d005      	beq.n	8004998 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800498c:	4b59      	ldr	r3, [pc, #356]	@ (8004af4 <HAL_RCC_ClockConfig+0x1bc>)
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	4a58      	ldr	r2, [pc, #352]	@ (8004af4 <HAL_RCC_ClockConfig+0x1bc>)
 8004992:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004996:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0308 	and.w	r3, r3, #8
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d005      	beq.n	80049b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049a4:	4b53      	ldr	r3, [pc, #332]	@ (8004af4 <HAL_RCC_ClockConfig+0x1bc>)
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	4a52      	ldr	r2, [pc, #328]	@ (8004af4 <HAL_RCC_ClockConfig+0x1bc>)
 80049aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80049ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049b0:	4b50      	ldr	r3, [pc, #320]	@ (8004af4 <HAL_RCC_ClockConfig+0x1bc>)
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	494d      	ldr	r1, [pc, #308]	@ (8004af4 <HAL_RCC_ClockConfig+0x1bc>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d044      	beq.n	8004a58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d107      	bne.n	80049e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049d6:	4b47      	ldr	r3, [pc, #284]	@ (8004af4 <HAL_RCC_ClockConfig+0x1bc>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d119      	bne.n	8004a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e07f      	b.n	8004ae6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d003      	beq.n	80049f6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049f2:	2b03      	cmp	r3, #3
 80049f4:	d107      	bne.n	8004a06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049f6:	4b3f      	ldr	r3, [pc, #252]	@ (8004af4 <HAL_RCC_ClockConfig+0x1bc>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d109      	bne.n	8004a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e06f      	b.n	8004ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a06:	4b3b      	ldr	r3, [pc, #236]	@ (8004af4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e067      	b.n	8004ae6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a16:	4b37      	ldr	r3, [pc, #220]	@ (8004af4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f023 0203 	bic.w	r2, r3, #3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	4934      	ldr	r1, [pc, #208]	@ (8004af4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a28:	f7fe f826 	bl	8002a78 <HAL_GetTick>
 8004a2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a2e:	e00a      	b.n	8004a46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a30:	f7fe f822 	bl	8002a78 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e04f      	b.n	8004ae6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a46:	4b2b      	ldr	r3, [pc, #172]	@ (8004af4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f003 020c 	and.w	r2, r3, #12
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d1eb      	bne.n	8004a30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a58:	4b25      	ldr	r3, [pc, #148]	@ (8004af0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 030f 	and.w	r3, r3, #15
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d20c      	bcs.n	8004a80 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a66:	4b22      	ldr	r3, [pc, #136]	@ (8004af0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a68:	683a      	ldr	r2, [r7, #0]
 8004a6a:	b2d2      	uxtb	r2, r2
 8004a6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a6e:	4b20      	ldr	r3, [pc, #128]	@ (8004af0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 030f 	and.w	r3, r3, #15
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d001      	beq.n	8004a80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e032      	b.n	8004ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0304 	and.w	r3, r3, #4
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d008      	beq.n	8004a9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a8c:	4b19      	ldr	r3, [pc, #100]	@ (8004af4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	4916      	ldr	r1, [pc, #88]	@ (8004af4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0308 	and.w	r3, r3, #8
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d009      	beq.n	8004abe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004aaa:	4b12      	ldr	r3, [pc, #72]	@ (8004af4 <HAL_RCC_ClockConfig+0x1bc>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	00db      	lsls	r3, r3, #3
 8004ab8:	490e      	ldr	r1, [pc, #56]	@ (8004af4 <HAL_RCC_ClockConfig+0x1bc>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004abe:	f000 f855 	bl	8004b6c <HAL_RCC_GetSysClockFreq>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8004af4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	091b      	lsrs	r3, r3, #4
 8004aca:	f003 030f 	and.w	r3, r3, #15
 8004ace:	490a      	ldr	r1, [pc, #40]	@ (8004af8 <HAL_RCC_ClockConfig+0x1c0>)
 8004ad0:	5ccb      	ldrb	r3, [r1, r3]
 8004ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ad6:	4a09      	ldr	r2, [pc, #36]	@ (8004afc <HAL_RCC_ClockConfig+0x1c4>)
 8004ad8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004ada:	4b09      	ldr	r3, [pc, #36]	@ (8004b00 <HAL_RCC_ClockConfig+0x1c8>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7fd ff86 	bl	80029f0 <HAL_InitTick>

  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	40023c00 	.word	0x40023c00
 8004af4:	40023800 	.word	0x40023800
 8004af8:	0800c1b8 	.word	0x0800c1b8
 8004afc:	20000018 	.word	0x20000018
 8004b00:	2000001c 	.word	0x2000001c

08004b04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b04:	b480      	push	{r7}
 8004b06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b08:	4b03      	ldr	r3, [pc, #12]	@ (8004b18 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	20000018 	.word	0x20000018

08004b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b20:	f7ff fff0 	bl	8004b04 <HAL_RCC_GetHCLKFreq>
 8004b24:	4602      	mov	r2, r0
 8004b26:	4b05      	ldr	r3, [pc, #20]	@ (8004b3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	0a9b      	lsrs	r3, r3, #10
 8004b2c:	f003 0307 	and.w	r3, r3, #7
 8004b30:	4903      	ldr	r1, [pc, #12]	@ (8004b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b32:	5ccb      	ldrb	r3, [r1, r3]
 8004b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	40023800 	.word	0x40023800
 8004b40:	0800c1c8 	.word	0x0800c1c8

08004b44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b48:	f7ff ffdc 	bl	8004b04 <HAL_RCC_GetHCLKFreq>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	4b05      	ldr	r3, [pc, #20]	@ (8004b64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	0b5b      	lsrs	r3, r3, #13
 8004b54:	f003 0307 	and.w	r3, r3, #7
 8004b58:	4903      	ldr	r1, [pc, #12]	@ (8004b68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b5a:	5ccb      	ldrb	r3, [r1, r3]
 8004b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	40023800 	.word	0x40023800
 8004b68:	0800c1c8 	.word	0x0800c1c8

08004b6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b70:	b0ae      	sub	sp, #184	@ 0xb8
 8004b72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b74:	2300      	movs	r3, #0
 8004b76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004b80:	2300      	movs	r3, #0
 8004b82:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004b86:	2300      	movs	r3, #0
 8004b88:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b92:	4bcb      	ldr	r3, [pc, #812]	@ (8004ec0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f003 030c 	and.w	r3, r3, #12
 8004b9a:	2b0c      	cmp	r3, #12
 8004b9c:	f200 8206 	bhi.w	8004fac <HAL_RCC_GetSysClockFreq+0x440>
 8004ba0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ba8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba6:	bf00      	nop
 8004ba8:	08004bdd 	.word	0x08004bdd
 8004bac:	08004fad 	.word	0x08004fad
 8004bb0:	08004fad 	.word	0x08004fad
 8004bb4:	08004fad 	.word	0x08004fad
 8004bb8:	08004be5 	.word	0x08004be5
 8004bbc:	08004fad 	.word	0x08004fad
 8004bc0:	08004fad 	.word	0x08004fad
 8004bc4:	08004fad 	.word	0x08004fad
 8004bc8:	08004bed 	.word	0x08004bed
 8004bcc:	08004fad 	.word	0x08004fad
 8004bd0:	08004fad 	.word	0x08004fad
 8004bd4:	08004fad 	.word	0x08004fad
 8004bd8:	08004ddd 	.word	0x08004ddd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bdc:	4bb9      	ldr	r3, [pc, #740]	@ (8004ec4 <HAL_RCC_GetSysClockFreq+0x358>)
 8004bde:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004be2:	e1e7      	b.n	8004fb4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004be4:	4bb8      	ldr	r3, [pc, #736]	@ (8004ec8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004be6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004bea:	e1e3      	b.n	8004fb4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bec:	4bb4      	ldr	r3, [pc, #720]	@ (8004ec0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bf4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bf8:	4bb1      	ldr	r3, [pc, #708]	@ (8004ec0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d071      	beq.n	8004ce8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c04:	4bae      	ldr	r3, [pc, #696]	@ (8004ec0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	099b      	lsrs	r3, r3, #6
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004c10:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004c14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c1c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004c20:	2300      	movs	r3, #0
 8004c22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004c26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004c2a:	4622      	mov	r2, r4
 8004c2c:	462b      	mov	r3, r5
 8004c2e:	f04f 0000 	mov.w	r0, #0
 8004c32:	f04f 0100 	mov.w	r1, #0
 8004c36:	0159      	lsls	r1, r3, #5
 8004c38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c3c:	0150      	lsls	r0, r2, #5
 8004c3e:	4602      	mov	r2, r0
 8004c40:	460b      	mov	r3, r1
 8004c42:	4621      	mov	r1, r4
 8004c44:	1a51      	subs	r1, r2, r1
 8004c46:	6439      	str	r1, [r7, #64]	@ 0x40
 8004c48:	4629      	mov	r1, r5
 8004c4a:	eb63 0301 	sbc.w	r3, r3, r1
 8004c4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c50:	f04f 0200 	mov.w	r2, #0
 8004c54:	f04f 0300 	mov.w	r3, #0
 8004c58:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004c5c:	4649      	mov	r1, r9
 8004c5e:	018b      	lsls	r3, r1, #6
 8004c60:	4641      	mov	r1, r8
 8004c62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c66:	4641      	mov	r1, r8
 8004c68:	018a      	lsls	r2, r1, #6
 8004c6a:	4641      	mov	r1, r8
 8004c6c:	1a51      	subs	r1, r2, r1
 8004c6e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004c70:	4649      	mov	r1, r9
 8004c72:	eb63 0301 	sbc.w	r3, r3, r1
 8004c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c78:	f04f 0200 	mov.w	r2, #0
 8004c7c:	f04f 0300 	mov.w	r3, #0
 8004c80:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004c84:	4649      	mov	r1, r9
 8004c86:	00cb      	lsls	r3, r1, #3
 8004c88:	4641      	mov	r1, r8
 8004c8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c8e:	4641      	mov	r1, r8
 8004c90:	00ca      	lsls	r2, r1, #3
 8004c92:	4610      	mov	r0, r2
 8004c94:	4619      	mov	r1, r3
 8004c96:	4603      	mov	r3, r0
 8004c98:	4622      	mov	r2, r4
 8004c9a:	189b      	adds	r3, r3, r2
 8004c9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c9e:	462b      	mov	r3, r5
 8004ca0:	460a      	mov	r2, r1
 8004ca2:	eb42 0303 	adc.w	r3, r2, r3
 8004ca6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ca8:	f04f 0200 	mov.w	r2, #0
 8004cac:	f04f 0300 	mov.w	r3, #0
 8004cb0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004cb4:	4629      	mov	r1, r5
 8004cb6:	024b      	lsls	r3, r1, #9
 8004cb8:	4621      	mov	r1, r4
 8004cba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004cbe:	4621      	mov	r1, r4
 8004cc0:	024a      	lsls	r2, r1, #9
 8004cc2:	4610      	mov	r0, r2
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004cd0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004cd4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004cd8:	f7fb fff6 	bl	8000cc8 <__aeabi_uldivmod>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	460b      	mov	r3, r1
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ce6:	e067      	b.n	8004db8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ce8:	4b75      	ldr	r3, [pc, #468]	@ (8004ec0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	099b      	lsrs	r3, r3, #6
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004cf4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004cf8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004cfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d00:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004d02:	2300      	movs	r3, #0
 8004d04:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004d06:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004d0a:	4622      	mov	r2, r4
 8004d0c:	462b      	mov	r3, r5
 8004d0e:	f04f 0000 	mov.w	r0, #0
 8004d12:	f04f 0100 	mov.w	r1, #0
 8004d16:	0159      	lsls	r1, r3, #5
 8004d18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d1c:	0150      	lsls	r0, r2, #5
 8004d1e:	4602      	mov	r2, r0
 8004d20:	460b      	mov	r3, r1
 8004d22:	4621      	mov	r1, r4
 8004d24:	1a51      	subs	r1, r2, r1
 8004d26:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004d28:	4629      	mov	r1, r5
 8004d2a:	eb63 0301 	sbc.w	r3, r3, r1
 8004d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d30:	f04f 0200 	mov.w	r2, #0
 8004d34:	f04f 0300 	mov.w	r3, #0
 8004d38:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004d3c:	4649      	mov	r1, r9
 8004d3e:	018b      	lsls	r3, r1, #6
 8004d40:	4641      	mov	r1, r8
 8004d42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d46:	4641      	mov	r1, r8
 8004d48:	018a      	lsls	r2, r1, #6
 8004d4a:	4641      	mov	r1, r8
 8004d4c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d50:	4649      	mov	r1, r9
 8004d52:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d56:	f04f 0200 	mov.w	r2, #0
 8004d5a:	f04f 0300 	mov.w	r3, #0
 8004d5e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d62:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d66:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d6a:	4692      	mov	sl, r2
 8004d6c:	469b      	mov	fp, r3
 8004d6e:	4623      	mov	r3, r4
 8004d70:	eb1a 0303 	adds.w	r3, sl, r3
 8004d74:	623b      	str	r3, [r7, #32]
 8004d76:	462b      	mov	r3, r5
 8004d78:	eb4b 0303 	adc.w	r3, fp, r3
 8004d7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d7e:	f04f 0200 	mov.w	r2, #0
 8004d82:	f04f 0300 	mov.w	r3, #0
 8004d86:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004d8a:	4629      	mov	r1, r5
 8004d8c:	028b      	lsls	r3, r1, #10
 8004d8e:	4621      	mov	r1, r4
 8004d90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d94:	4621      	mov	r1, r4
 8004d96:	028a      	lsls	r2, r1, #10
 8004d98:	4610      	mov	r0, r2
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004da0:	2200      	movs	r2, #0
 8004da2:	673b      	str	r3, [r7, #112]	@ 0x70
 8004da4:	677a      	str	r2, [r7, #116]	@ 0x74
 8004da6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004daa:	f7fb ff8d 	bl	8000cc8 <__aeabi_uldivmod>
 8004dae:	4602      	mov	r2, r0
 8004db0:	460b      	mov	r3, r1
 8004db2:	4613      	mov	r3, r2
 8004db4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004db8:	4b41      	ldr	r3, [pc, #260]	@ (8004ec0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	0c1b      	lsrs	r3, r3, #16
 8004dbe:	f003 0303 	and.w	r3, r3, #3
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	005b      	lsls	r3, r3, #1
 8004dc6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004dca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004dce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004dda:	e0eb      	b.n	8004fb4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ddc:	4b38      	ldr	r3, [pc, #224]	@ (8004ec0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004de4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004de8:	4b35      	ldr	r3, [pc, #212]	@ (8004ec0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d06b      	beq.n	8004ecc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004df4:	4b32      	ldr	r3, [pc, #200]	@ (8004ec0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	099b      	lsrs	r3, r3, #6
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004dfe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004e00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e06:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e08:	2300      	movs	r3, #0
 8004e0a:	667b      	str	r3, [r7, #100]	@ 0x64
 8004e0c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004e10:	4622      	mov	r2, r4
 8004e12:	462b      	mov	r3, r5
 8004e14:	f04f 0000 	mov.w	r0, #0
 8004e18:	f04f 0100 	mov.w	r1, #0
 8004e1c:	0159      	lsls	r1, r3, #5
 8004e1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e22:	0150      	lsls	r0, r2, #5
 8004e24:	4602      	mov	r2, r0
 8004e26:	460b      	mov	r3, r1
 8004e28:	4621      	mov	r1, r4
 8004e2a:	1a51      	subs	r1, r2, r1
 8004e2c:	61b9      	str	r1, [r7, #24]
 8004e2e:	4629      	mov	r1, r5
 8004e30:	eb63 0301 	sbc.w	r3, r3, r1
 8004e34:	61fb      	str	r3, [r7, #28]
 8004e36:	f04f 0200 	mov.w	r2, #0
 8004e3a:	f04f 0300 	mov.w	r3, #0
 8004e3e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004e42:	4659      	mov	r1, fp
 8004e44:	018b      	lsls	r3, r1, #6
 8004e46:	4651      	mov	r1, sl
 8004e48:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e4c:	4651      	mov	r1, sl
 8004e4e:	018a      	lsls	r2, r1, #6
 8004e50:	4651      	mov	r1, sl
 8004e52:	ebb2 0801 	subs.w	r8, r2, r1
 8004e56:	4659      	mov	r1, fp
 8004e58:	eb63 0901 	sbc.w	r9, r3, r1
 8004e5c:	f04f 0200 	mov.w	r2, #0
 8004e60:	f04f 0300 	mov.w	r3, #0
 8004e64:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e68:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e6c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e70:	4690      	mov	r8, r2
 8004e72:	4699      	mov	r9, r3
 8004e74:	4623      	mov	r3, r4
 8004e76:	eb18 0303 	adds.w	r3, r8, r3
 8004e7a:	613b      	str	r3, [r7, #16]
 8004e7c:	462b      	mov	r3, r5
 8004e7e:	eb49 0303 	adc.w	r3, r9, r3
 8004e82:	617b      	str	r3, [r7, #20]
 8004e84:	f04f 0200 	mov.w	r2, #0
 8004e88:	f04f 0300 	mov.w	r3, #0
 8004e8c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004e90:	4629      	mov	r1, r5
 8004e92:	024b      	lsls	r3, r1, #9
 8004e94:	4621      	mov	r1, r4
 8004e96:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e9a:	4621      	mov	r1, r4
 8004e9c:	024a      	lsls	r2, r1, #9
 8004e9e:	4610      	mov	r0, r2
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004eaa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004eac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004eb0:	f7fb ff0a 	bl	8000cc8 <__aeabi_uldivmod>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	4613      	mov	r3, r2
 8004eba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ebe:	e065      	b.n	8004f8c <HAL_RCC_GetSysClockFreq+0x420>
 8004ec0:	40023800 	.word	0x40023800
 8004ec4:	00f42400 	.word	0x00f42400
 8004ec8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ecc:	4b3d      	ldr	r3, [pc, #244]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0x458>)
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	099b      	lsrs	r3, r3, #6
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	4611      	mov	r1, r2
 8004ed8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004edc:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ede:	2300      	movs	r3, #0
 8004ee0:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ee2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004ee6:	4642      	mov	r2, r8
 8004ee8:	464b      	mov	r3, r9
 8004eea:	f04f 0000 	mov.w	r0, #0
 8004eee:	f04f 0100 	mov.w	r1, #0
 8004ef2:	0159      	lsls	r1, r3, #5
 8004ef4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ef8:	0150      	lsls	r0, r2, #5
 8004efa:	4602      	mov	r2, r0
 8004efc:	460b      	mov	r3, r1
 8004efe:	4641      	mov	r1, r8
 8004f00:	1a51      	subs	r1, r2, r1
 8004f02:	60b9      	str	r1, [r7, #8]
 8004f04:	4649      	mov	r1, r9
 8004f06:	eb63 0301 	sbc.w	r3, r3, r1
 8004f0a:	60fb      	str	r3, [r7, #12]
 8004f0c:	f04f 0200 	mov.w	r2, #0
 8004f10:	f04f 0300 	mov.w	r3, #0
 8004f14:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004f18:	4659      	mov	r1, fp
 8004f1a:	018b      	lsls	r3, r1, #6
 8004f1c:	4651      	mov	r1, sl
 8004f1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f22:	4651      	mov	r1, sl
 8004f24:	018a      	lsls	r2, r1, #6
 8004f26:	4651      	mov	r1, sl
 8004f28:	1a54      	subs	r4, r2, r1
 8004f2a:	4659      	mov	r1, fp
 8004f2c:	eb63 0501 	sbc.w	r5, r3, r1
 8004f30:	f04f 0200 	mov.w	r2, #0
 8004f34:	f04f 0300 	mov.w	r3, #0
 8004f38:	00eb      	lsls	r3, r5, #3
 8004f3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f3e:	00e2      	lsls	r2, r4, #3
 8004f40:	4614      	mov	r4, r2
 8004f42:	461d      	mov	r5, r3
 8004f44:	4643      	mov	r3, r8
 8004f46:	18e3      	adds	r3, r4, r3
 8004f48:	603b      	str	r3, [r7, #0]
 8004f4a:	464b      	mov	r3, r9
 8004f4c:	eb45 0303 	adc.w	r3, r5, r3
 8004f50:	607b      	str	r3, [r7, #4]
 8004f52:	f04f 0200 	mov.w	r2, #0
 8004f56:	f04f 0300 	mov.w	r3, #0
 8004f5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f5e:	4629      	mov	r1, r5
 8004f60:	028b      	lsls	r3, r1, #10
 8004f62:	4621      	mov	r1, r4
 8004f64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f68:	4621      	mov	r1, r4
 8004f6a:	028a      	lsls	r2, r1, #10
 8004f6c:	4610      	mov	r0, r2
 8004f6e:	4619      	mov	r1, r3
 8004f70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f74:	2200      	movs	r2, #0
 8004f76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f78:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004f7a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004f7e:	f7fb fea3 	bl	8000cc8 <__aeabi_uldivmod>
 8004f82:	4602      	mov	r2, r0
 8004f84:	460b      	mov	r3, r1
 8004f86:	4613      	mov	r3, r2
 8004f88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004f8c:	4b0d      	ldr	r3, [pc, #52]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0x458>)
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	0f1b      	lsrs	r3, r3, #28
 8004f92:	f003 0307 	and.w	r3, r3, #7
 8004f96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004f9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004f9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004faa:	e003      	b.n	8004fb4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fac:	4b06      	ldr	r3, [pc, #24]	@ (8004fc8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004fae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004fb2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fb4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	37b8      	adds	r7, #184	@ 0xb8
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fc2:	bf00      	nop
 8004fc4:	40023800 	.word	0x40023800
 8004fc8:	00f42400 	.word	0x00f42400

08004fcc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e28d      	b.n	80054fa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	f000 8083 	beq.w	80050f2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004fec:	4b94      	ldr	r3, [pc, #592]	@ (8005240 <HAL_RCC_OscConfig+0x274>)
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f003 030c 	and.w	r3, r3, #12
 8004ff4:	2b04      	cmp	r3, #4
 8004ff6:	d019      	beq.n	800502c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004ff8:	4b91      	ldr	r3, [pc, #580]	@ (8005240 <HAL_RCC_OscConfig+0x274>)
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f003 030c 	and.w	r3, r3, #12
        || \
 8005000:	2b08      	cmp	r3, #8
 8005002:	d106      	bne.n	8005012 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005004:	4b8e      	ldr	r3, [pc, #568]	@ (8005240 <HAL_RCC_OscConfig+0x274>)
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800500c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005010:	d00c      	beq.n	800502c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005012:	4b8b      	ldr	r3, [pc, #556]	@ (8005240 <HAL_RCC_OscConfig+0x274>)
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800501a:	2b0c      	cmp	r3, #12
 800501c:	d112      	bne.n	8005044 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800501e:	4b88      	ldr	r3, [pc, #544]	@ (8005240 <HAL_RCC_OscConfig+0x274>)
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005026:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800502a:	d10b      	bne.n	8005044 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800502c:	4b84      	ldr	r3, [pc, #528]	@ (8005240 <HAL_RCC_OscConfig+0x274>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d05b      	beq.n	80050f0 <HAL_RCC_OscConfig+0x124>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d157      	bne.n	80050f0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e25a      	b.n	80054fa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800504c:	d106      	bne.n	800505c <HAL_RCC_OscConfig+0x90>
 800504e:	4b7c      	ldr	r3, [pc, #496]	@ (8005240 <HAL_RCC_OscConfig+0x274>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a7b      	ldr	r2, [pc, #492]	@ (8005240 <HAL_RCC_OscConfig+0x274>)
 8005054:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005058:	6013      	str	r3, [r2, #0]
 800505a:	e01d      	b.n	8005098 <HAL_RCC_OscConfig+0xcc>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005064:	d10c      	bne.n	8005080 <HAL_RCC_OscConfig+0xb4>
 8005066:	4b76      	ldr	r3, [pc, #472]	@ (8005240 <HAL_RCC_OscConfig+0x274>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a75      	ldr	r2, [pc, #468]	@ (8005240 <HAL_RCC_OscConfig+0x274>)
 800506c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005070:	6013      	str	r3, [r2, #0]
 8005072:	4b73      	ldr	r3, [pc, #460]	@ (8005240 <HAL_RCC_OscConfig+0x274>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a72      	ldr	r2, [pc, #456]	@ (8005240 <HAL_RCC_OscConfig+0x274>)
 8005078:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800507c:	6013      	str	r3, [r2, #0]
 800507e:	e00b      	b.n	8005098 <HAL_RCC_OscConfig+0xcc>
 8005080:	4b6f      	ldr	r3, [pc, #444]	@ (8005240 <HAL_RCC_OscConfig+0x274>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a6e      	ldr	r2, [pc, #440]	@ (8005240 <HAL_RCC_OscConfig+0x274>)
 8005086:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800508a:	6013      	str	r3, [r2, #0]
 800508c:	4b6c      	ldr	r3, [pc, #432]	@ (8005240 <HAL_RCC_OscConfig+0x274>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a6b      	ldr	r2, [pc, #428]	@ (8005240 <HAL_RCC_OscConfig+0x274>)
 8005092:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005096:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d013      	beq.n	80050c8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a0:	f7fd fcea 	bl	8002a78 <HAL_GetTick>
 80050a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050a6:	e008      	b.n	80050ba <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050a8:	f7fd fce6 	bl	8002a78 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b64      	cmp	r3, #100	@ 0x64
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e21f      	b.n	80054fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ba:	4b61      	ldr	r3, [pc, #388]	@ (8005240 <HAL_RCC_OscConfig+0x274>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d0f0      	beq.n	80050a8 <HAL_RCC_OscConfig+0xdc>
 80050c6:	e014      	b.n	80050f2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c8:	f7fd fcd6 	bl	8002a78 <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050ce:	e008      	b.n	80050e2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050d0:	f7fd fcd2 	bl	8002a78 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b64      	cmp	r3, #100	@ 0x64
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e20b      	b.n	80054fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050e2:	4b57      	ldr	r3, [pc, #348]	@ (8005240 <HAL_RCC_OscConfig+0x274>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1f0      	bne.n	80050d0 <HAL_RCC_OscConfig+0x104>
 80050ee:	e000      	b.n	80050f2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d06f      	beq.n	80051de <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80050fe:	4b50      	ldr	r3, [pc, #320]	@ (8005240 <HAL_RCC_OscConfig+0x274>)
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f003 030c 	and.w	r3, r3, #12
 8005106:	2b00      	cmp	r3, #0
 8005108:	d017      	beq.n	800513a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800510a:	4b4d      	ldr	r3, [pc, #308]	@ (8005240 <HAL_RCC_OscConfig+0x274>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f003 030c 	and.w	r3, r3, #12
        || \
 8005112:	2b08      	cmp	r3, #8
 8005114:	d105      	bne.n	8005122 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005116:	4b4a      	ldr	r3, [pc, #296]	@ (8005240 <HAL_RCC_OscConfig+0x274>)
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00b      	beq.n	800513a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005122:	4b47      	ldr	r3, [pc, #284]	@ (8005240 <HAL_RCC_OscConfig+0x274>)
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800512a:	2b0c      	cmp	r3, #12
 800512c:	d11c      	bne.n	8005168 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800512e:	4b44      	ldr	r3, [pc, #272]	@ (8005240 <HAL_RCC_OscConfig+0x274>)
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d116      	bne.n	8005168 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800513a:	4b41      	ldr	r3, [pc, #260]	@ (8005240 <HAL_RCC_OscConfig+0x274>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d005      	beq.n	8005152 <HAL_RCC_OscConfig+0x186>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	2b01      	cmp	r3, #1
 800514c:	d001      	beq.n	8005152 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e1d3      	b.n	80054fa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005152:	4b3b      	ldr	r3, [pc, #236]	@ (8005240 <HAL_RCC_OscConfig+0x274>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	00db      	lsls	r3, r3, #3
 8005160:	4937      	ldr	r1, [pc, #220]	@ (8005240 <HAL_RCC_OscConfig+0x274>)
 8005162:	4313      	orrs	r3, r2
 8005164:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005166:	e03a      	b.n	80051de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d020      	beq.n	80051b2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005170:	4b34      	ldr	r3, [pc, #208]	@ (8005244 <HAL_RCC_OscConfig+0x278>)
 8005172:	2201      	movs	r2, #1
 8005174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005176:	f7fd fc7f 	bl	8002a78 <HAL_GetTick>
 800517a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800517c:	e008      	b.n	8005190 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800517e:	f7fd fc7b 	bl	8002a78 <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	2b02      	cmp	r3, #2
 800518a:	d901      	bls.n	8005190 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e1b4      	b.n	80054fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005190:	4b2b      	ldr	r3, [pc, #172]	@ (8005240 <HAL_RCC_OscConfig+0x274>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0302 	and.w	r3, r3, #2
 8005198:	2b00      	cmp	r3, #0
 800519a:	d0f0      	beq.n	800517e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800519c:	4b28      	ldr	r3, [pc, #160]	@ (8005240 <HAL_RCC_OscConfig+0x274>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	00db      	lsls	r3, r3, #3
 80051aa:	4925      	ldr	r1, [pc, #148]	@ (8005240 <HAL_RCC_OscConfig+0x274>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	600b      	str	r3, [r1, #0]
 80051b0:	e015      	b.n	80051de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051b2:	4b24      	ldr	r3, [pc, #144]	@ (8005244 <HAL_RCC_OscConfig+0x278>)
 80051b4:	2200      	movs	r2, #0
 80051b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b8:	f7fd fc5e 	bl	8002a78 <HAL_GetTick>
 80051bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051be:	e008      	b.n	80051d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051c0:	f7fd fc5a 	bl	8002a78 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d901      	bls.n	80051d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e193      	b.n	80054fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051d2:	4b1b      	ldr	r3, [pc, #108]	@ (8005240 <HAL_RCC_OscConfig+0x274>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1f0      	bne.n	80051c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0308 	and.w	r3, r3, #8
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d036      	beq.n	8005258 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d016      	beq.n	8005220 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051f2:	4b15      	ldr	r3, [pc, #84]	@ (8005248 <HAL_RCC_OscConfig+0x27c>)
 80051f4:	2201      	movs	r2, #1
 80051f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051f8:	f7fd fc3e 	bl	8002a78 <HAL_GetTick>
 80051fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051fe:	e008      	b.n	8005212 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005200:	f7fd fc3a 	bl	8002a78 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	2b02      	cmp	r3, #2
 800520c:	d901      	bls.n	8005212 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e173      	b.n	80054fa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005212:	4b0b      	ldr	r3, [pc, #44]	@ (8005240 <HAL_RCC_OscConfig+0x274>)
 8005214:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b00      	cmp	r3, #0
 800521c:	d0f0      	beq.n	8005200 <HAL_RCC_OscConfig+0x234>
 800521e:	e01b      	b.n	8005258 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005220:	4b09      	ldr	r3, [pc, #36]	@ (8005248 <HAL_RCC_OscConfig+0x27c>)
 8005222:	2200      	movs	r2, #0
 8005224:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005226:	f7fd fc27 	bl	8002a78 <HAL_GetTick>
 800522a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800522c:	e00e      	b.n	800524c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800522e:	f7fd fc23 	bl	8002a78 <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	2b02      	cmp	r3, #2
 800523a:	d907      	bls.n	800524c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e15c      	b.n	80054fa <HAL_RCC_OscConfig+0x52e>
 8005240:	40023800 	.word	0x40023800
 8005244:	42470000 	.word	0x42470000
 8005248:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800524c:	4b8a      	ldr	r3, [pc, #552]	@ (8005478 <HAL_RCC_OscConfig+0x4ac>)
 800524e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005250:	f003 0302 	and.w	r3, r3, #2
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1ea      	bne.n	800522e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0304 	and.w	r3, r3, #4
 8005260:	2b00      	cmp	r3, #0
 8005262:	f000 8097 	beq.w	8005394 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005266:	2300      	movs	r3, #0
 8005268:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800526a:	4b83      	ldr	r3, [pc, #524]	@ (8005478 <HAL_RCC_OscConfig+0x4ac>)
 800526c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800526e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10f      	bne.n	8005296 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005276:	2300      	movs	r3, #0
 8005278:	60bb      	str	r3, [r7, #8]
 800527a:	4b7f      	ldr	r3, [pc, #508]	@ (8005478 <HAL_RCC_OscConfig+0x4ac>)
 800527c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800527e:	4a7e      	ldr	r2, [pc, #504]	@ (8005478 <HAL_RCC_OscConfig+0x4ac>)
 8005280:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005284:	6413      	str	r3, [r2, #64]	@ 0x40
 8005286:	4b7c      	ldr	r3, [pc, #496]	@ (8005478 <HAL_RCC_OscConfig+0x4ac>)
 8005288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800528a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800528e:	60bb      	str	r3, [r7, #8]
 8005290:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005292:	2301      	movs	r3, #1
 8005294:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005296:	4b79      	ldr	r3, [pc, #484]	@ (800547c <HAL_RCC_OscConfig+0x4b0>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d118      	bne.n	80052d4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052a2:	4b76      	ldr	r3, [pc, #472]	@ (800547c <HAL_RCC_OscConfig+0x4b0>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a75      	ldr	r2, [pc, #468]	@ (800547c <HAL_RCC_OscConfig+0x4b0>)
 80052a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052ae:	f7fd fbe3 	bl	8002a78 <HAL_GetTick>
 80052b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052b4:	e008      	b.n	80052c8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052b6:	f7fd fbdf 	bl	8002a78 <HAL_GetTick>
 80052ba:	4602      	mov	r2, r0
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d901      	bls.n	80052c8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e118      	b.n	80054fa <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052c8:	4b6c      	ldr	r3, [pc, #432]	@ (800547c <HAL_RCC_OscConfig+0x4b0>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d0f0      	beq.n	80052b6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d106      	bne.n	80052ea <HAL_RCC_OscConfig+0x31e>
 80052dc:	4b66      	ldr	r3, [pc, #408]	@ (8005478 <HAL_RCC_OscConfig+0x4ac>)
 80052de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052e0:	4a65      	ldr	r2, [pc, #404]	@ (8005478 <HAL_RCC_OscConfig+0x4ac>)
 80052e2:	f043 0301 	orr.w	r3, r3, #1
 80052e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80052e8:	e01c      	b.n	8005324 <HAL_RCC_OscConfig+0x358>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	2b05      	cmp	r3, #5
 80052f0:	d10c      	bne.n	800530c <HAL_RCC_OscConfig+0x340>
 80052f2:	4b61      	ldr	r3, [pc, #388]	@ (8005478 <HAL_RCC_OscConfig+0x4ac>)
 80052f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052f6:	4a60      	ldr	r2, [pc, #384]	@ (8005478 <HAL_RCC_OscConfig+0x4ac>)
 80052f8:	f043 0304 	orr.w	r3, r3, #4
 80052fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80052fe:	4b5e      	ldr	r3, [pc, #376]	@ (8005478 <HAL_RCC_OscConfig+0x4ac>)
 8005300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005302:	4a5d      	ldr	r2, [pc, #372]	@ (8005478 <HAL_RCC_OscConfig+0x4ac>)
 8005304:	f043 0301 	orr.w	r3, r3, #1
 8005308:	6713      	str	r3, [r2, #112]	@ 0x70
 800530a:	e00b      	b.n	8005324 <HAL_RCC_OscConfig+0x358>
 800530c:	4b5a      	ldr	r3, [pc, #360]	@ (8005478 <HAL_RCC_OscConfig+0x4ac>)
 800530e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005310:	4a59      	ldr	r2, [pc, #356]	@ (8005478 <HAL_RCC_OscConfig+0x4ac>)
 8005312:	f023 0301 	bic.w	r3, r3, #1
 8005316:	6713      	str	r3, [r2, #112]	@ 0x70
 8005318:	4b57      	ldr	r3, [pc, #348]	@ (8005478 <HAL_RCC_OscConfig+0x4ac>)
 800531a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800531c:	4a56      	ldr	r2, [pc, #344]	@ (8005478 <HAL_RCC_OscConfig+0x4ac>)
 800531e:	f023 0304 	bic.w	r3, r3, #4
 8005322:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d015      	beq.n	8005358 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800532c:	f7fd fba4 	bl	8002a78 <HAL_GetTick>
 8005330:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005332:	e00a      	b.n	800534a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005334:	f7fd fba0 	bl	8002a78 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005342:	4293      	cmp	r3, r2
 8005344:	d901      	bls.n	800534a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e0d7      	b.n	80054fa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800534a:	4b4b      	ldr	r3, [pc, #300]	@ (8005478 <HAL_RCC_OscConfig+0x4ac>)
 800534c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800534e:	f003 0302 	and.w	r3, r3, #2
 8005352:	2b00      	cmp	r3, #0
 8005354:	d0ee      	beq.n	8005334 <HAL_RCC_OscConfig+0x368>
 8005356:	e014      	b.n	8005382 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005358:	f7fd fb8e 	bl	8002a78 <HAL_GetTick>
 800535c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800535e:	e00a      	b.n	8005376 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005360:	f7fd fb8a 	bl	8002a78 <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800536e:	4293      	cmp	r3, r2
 8005370:	d901      	bls.n	8005376 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e0c1      	b.n	80054fa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005376:	4b40      	ldr	r3, [pc, #256]	@ (8005478 <HAL_RCC_OscConfig+0x4ac>)
 8005378:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800537a:	f003 0302 	and.w	r3, r3, #2
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1ee      	bne.n	8005360 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005382:	7dfb      	ldrb	r3, [r7, #23]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d105      	bne.n	8005394 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005388:	4b3b      	ldr	r3, [pc, #236]	@ (8005478 <HAL_RCC_OscConfig+0x4ac>)
 800538a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800538c:	4a3a      	ldr	r2, [pc, #232]	@ (8005478 <HAL_RCC_OscConfig+0x4ac>)
 800538e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005392:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	699b      	ldr	r3, [r3, #24]
 8005398:	2b00      	cmp	r3, #0
 800539a:	f000 80ad 	beq.w	80054f8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800539e:	4b36      	ldr	r3, [pc, #216]	@ (8005478 <HAL_RCC_OscConfig+0x4ac>)
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f003 030c 	and.w	r3, r3, #12
 80053a6:	2b08      	cmp	r3, #8
 80053a8:	d060      	beq.n	800546c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d145      	bne.n	800543e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053b2:	4b33      	ldr	r3, [pc, #204]	@ (8005480 <HAL_RCC_OscConfig+0x4b4>)
 80053b4:	2200      	movs	r2, #0
 80053b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b8:	f7fd fb5e 	bl	8002a78 <HAL_GetTick>
 80053bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053be:	e008      	b.n	80053d2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053c0:	f7fd fb5a 	bl	8002a78 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d901      	bls.n	80053d2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e093      	b.n	80054fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053d2:	4b29      	ldr	r3, [pc, #164]	@ (8005478 <HAL_RCC_OscConfig+0x4ac>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1f0      	bne.n	80053c0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	69da      	ldr	r2, [r3, #28]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	431a      	orrs	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ec:	019b      	lsls	r3, r3, #6
 80053ee:	431a      	orrs	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053f4:	085b      	lsrs	r3, r3, #1
 80053f6:	3b01      	subs	r3, #1
 80053f8:	041b      	lsls	r3, r3, #16
 80053fa:	431a      	orrs	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005400:	061b      	lsls	r3, r3, #24
 8005402:	431a      	orrs	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005408:	071b      	lsls	r3, r3, #28
 800540a:	491b      	ldr	r1, [pc, #108]	@ (8005478 <HAL_RCC_OscConfig+0x4ac>)
 800540c:	4313      	orrs	r3, r2
 800540e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005410:	4b1b      	ldr	r3, [pc, #108]	@ (8005480 <HAL_RCC_OscConfig+0x4b4>)
 8005412:	2201      	movs	r2, #1
 8005414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005416:	f7fd fb2f 	bl	8002a78 <HAL_GetTick>
 800541a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800541c:	e008      	b.n	8005430 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800541e:	f7fd fb2b 	bl	8002a78 <HAL_GetTick>
 8005422:	4602      	mov	r2, r0
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	2b02      	cmp	r3, #2
 800542a:	d901      	bls.n	8005430 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e064      	b.n	80054fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005430:	4b11      	ldr	r3, [pc, #68]	@ (8005478 <HAL_RCC_OscConfig+0x4ac>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d0f0      	beq.n	800541e <HAL_RCC_OscConfig+0x452>
 800543c:	e05c      	b.n	80054f8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800543e:	4b10      	ldr	r3, [pc, #64]	@ (8005480 <HAL_RCC_OscConfig+0x4b4>)
 8005440:	2200      	movs	r2, #0
 8005442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005444:	f7fd fb18 	bl	8002a78 <HAL_GetTick>
 8005448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800544a:	e008      	b.n	800545e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800544c:	f7fd fb14 	bl	8002a78 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	2b02      	cmp	r3, #2
 8005458:	d901      	bls.n	800545e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e04d      	b.n	80054fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800545e:	4b06      	ldr	r3, [pc, #24]	@ (8005478 <HAL_RCC_OscConfig+0x4ac>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1f0      	bne.n	800544c <HAL_RCC_OscConfig+0x480>
 800546a:	e045      	b.n	80054f8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d107      	bne.n	8005484 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e040      	b.n	80054fa <HAL_RCC_OscConfig+0x52e>
 8005478:	40023800 	.word	0x40023800
 800547c:	40007000 	.word	0x40007000
 8005480:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005484:	4b1f      	ldr	r3, [pc, #124]	@ (8005504 <HAL_RCC_OscConfig+0x538>)
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	2b01      	cmp	r3, #1
 8005490:	d030      	beq.n	80054f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800549c:	429a      	cmp	r2, r3
 800549e:	d129      	bne.n	80054f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d122      	bne.n	80054f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80054b4:	4013      	ands	r3, r2
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80054ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054bc:	4293      	cmp	r3, r2
 80054be:	d119      	bne.n	80054f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ca:	085b      	lsrs	r3, r3, #1
 80054cc:	3b01      	subs	r3, #1
 80054ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d10f      	bne.n	80054f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d107      	bne.n	80054f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d001      	beq.n	80054f8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e000      	b.n	80054fa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3718      	adds	r7, #24
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	40023800 	.word	0x40023800

08005508 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d101      	bne.n	800551a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e07b      	b.n	8005612 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800551e:	2b00      	cmp	r3, #0
 8005520:	d108      	bne.n	8005534 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800552a:	d009      	beq.n	8005540 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	61da      	str	r2, [r3, #28]
 8005532:	e005      	b.n	8005540 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d106      	bne.n	8005560 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f7fc ffbe 	bl	80024dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2202      	movs	r2, #2
 8005564:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005576:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005588:	431a      	orrs	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005592:	431a      	orrs	r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	f003 0302 	and.w	r3, r3, #2
 800559c:	431a      	orrs	r2, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	f003 0301 	and.w	r3, r3, #1
 80055a6:	431a      	orrs	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055b0:	431a      	orrs	r2, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	69db      	ldr	r3, [r3, #28]
 80055b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80055ba:	431a      	orrs	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a1b      	ldr	r3, [r3, #32]
 80055c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055c4:	ea42 0103 	orr.w	r1, r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055cc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	430a      	orrs	r2, r1
 80055d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	0c1b      	lsrs	r3, r3, #16
 80055de:	f003 0104 	and.w	r1, r3, #4
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e6:	f003 0210 	and.w	r2, r3, #16
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	430a      	orrs	r2, r1
 80055f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	69da      	ldr	r2, [r3, #28]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005600:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3708      	adds	r7, #8
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}

0800561a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800561a:	b580      	push	{r7, lr}
 800561c:	b088      	sub	sp, #32
 800561e:	af00      	add	r7, sp, #0
 8005620:	60f8      	str	r0, [r7, #12]
 8005622:	60b9      	str	r1, [r7, #8]
 8005624:	603b      	str	r3, [r7, #0]
 8005626:	4613      	mov	r3, r2
 8005628:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800562a:	f7fd fa25 	bl	8002a78 <HAL_GetTick>
 800562e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005630:	88fb      	ldrh	r3, [r7, #6]
 8005632:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800563a:	b2db      	uxtb	r3, r3
 800563c:	2b01      	cmp	r3, #1
 800563e:	d001      	beq.n	8005644 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005640:	2302      	movs	r3, #2
 8005642:	e12a      	b.n	800589a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d002      	beq.n	8005650 <HAL_SPI_Transmit+0x36>
 800564a:	88fb      	ldrh	r3, [r7, #6]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d101      	bne.n	8005654 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e122      	b.n	800589a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800565a:	2b01      	cmp	r3, #1
 800565c:	d101      	bne.n	8005662 <HAL_SPI_Transmit+0x48>
 800565e:	2302      	movs	r3, #2
 8005660:	e11b      	b.n	800589a <HAL_SPI_Transmit+0x280>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2203      	movs	r2, #3
 800566e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	68ba      	ldr	r2, [r7, #8]
 800567c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	88fa      	ldrh	r2, [r7, #6]
 8005682:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	88fa      	ldrh	r2, [r7, #6]
 8005688:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056b0:	d10f      	bne.n	80056d2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056dc:	2b40      	cmp	r3, #64	@ 0x40
 80056de:	d007      	beq.n	80056f0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80056ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056f8:	d152      	bne.n	80057a0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d002      	beq.n	8005708 <HAL_SPI_Transmit+0xee>
 8005702:	8b7b      	ldrh	r3, [r7, #26]
 8005704:	2b01      	cmp	r3, #1
 8005706:	d145      	bne.n	8005794 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800570c:	881a      	ldrh	r2, [r3, #0]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005718:	1c9a      	adds	r2, r3, #2
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005722:	b29b      	uxth	r3, r3
 8005724:	3b01      	subs	r3, #1
 8005726:	b29a      	uxth	r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800572c:	e032      	b.n	8005794 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f003 0302 	and.w	r3, r3, #2
 8005738:	2b02      	cmp	r3, #2
 800573a:	d112      	bne.n	8005762 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005740:	881a      	ldrh	r2, [r3, #0]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800574c:	1c9a      	adds	r2, r3, #2
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005756:	b29b      	uxth	r3, r3
 8005758:	3b01      	subs	r3, #1
 800575a:	b29a      	uxth	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005760:	e018      	b.n	8005794 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005762:	f7fd f989 	bl	8002a78 <HAL_GetTick>
 8005766:	4602      	mov	r2, r0
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	683a      	ldr	r2, [r7, #0]
 800576e:	429a      	cmp	r2, r3
 8005770:	d803      	bhi.n	800577a <HAL_SPI_Transmit+0x160>
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005778:	d102      	bne.n	8005780 <HAL_SPI_Transmit+0x166>
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d109      	bne.n	8005794 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e082      	b.n	800589a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005798:	b29b      	uxth	r3, r3
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1c7      	bne.n	800572e <HAL_SPI_Transmit+0x114>
 800579e:	e053      	b.n	8005848 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d002      	beq.n	80057ae <HAL_SPI_Transmit+0x194>
 80057a8:	8b7b      	ldrh	r3, [r7, #26]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d147      	bne.n	800583e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	330c      	adds	r3, #12
 80057b8:	7812      	ldrb	r2, [r2, #0]
 80057ba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057c0:	1c5a      	adds	r2, r3, #1
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	3b01      	subs	r3, #1
 80057ce:	b29a      	uxth	r2, r3
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80057d4:	e033      	b.n	800583e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f003 0302 	and.w	r3, r3, #2
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d113      	bne.n	800580c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	330c      	adds	r3, #12
 80057ee:	7812      	ldrb	r2, [r2, #0]
 80057f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057f6:	1c5a      	adds	r2, r3, #1
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005800:	b29b      	uxth	r3, r3
 8005802:	3b01      	subs	r3, #1
 8005804:	b29a      	uxth	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	86da      	strh	r2, [r3, #54]	@ 0x36
 800580a:	e018      	b.n	800583e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800580c:	f7fd f934 	bl	8002a78 <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	683a      	ldr	r2, [r7, #0]
 8005818:	429a      	cmp	r2, r3
 800581a:	d803      	bhi.n	8005824 <HAL_SPI_Transmit+0x20a>
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005822:	d102      	bne.n	800582a <HAL_SPI_Transmit+0x210>
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d109      	bne.n	800583e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e02d      	b.n	800589a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005842:	b29b      	uxth	r3, r3
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1c6      	bne.n	80057d6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005848:	69fa      	ldr	r2, [r7, #28]
 800584a:	6839      	ldr	r1, [r7, #0]
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f000 fbd9 	bl	8006004 <SPI_EndRxTxTransaction>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d002      	beq.n	800585e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2220      	movs	r2, #32
 800585c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10a      	bne.n	800587c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005866:	2300      	movs	r3, #0
 8005868:	617b      	str	r3, [r7, #20]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	617b      	str	r3, [r7, #20]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	617b      	str	r3, [r7, #20]
 800587a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005890:	2b00      	cmp	r3, #0
 8005892:	d001      	beq.n	8005898 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e000      	b.n	800589a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005898:	2300      	movs	r3, #0
  }
}
 800589a:	4618      	mov	r0, r3
 800589c:	3720      	adds	r7, #32
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}

080058a2 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058a2:	b580      	push	{r7, lr}
 80058a4:	b088      	sub	sp, #32
 80058a6:	af02      	add	r7, sp, #8
 80058a8:	60f8      	str	r0, [r7, #12]
 80058aa:	60b9      	str	r1, [r7, #8]
 80058ac:	603b      	str	r3, [r7, #0]
 80058ae:	4613      	mov	r3, r2
 80058b0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d001      	beq.n	80058c2 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80058be:	2302      	movs	r3, #2
 80058c0:	e104      	b.n	8005acc <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d002      	beq.n	80058ce <HAL_SPI_Receive+0x2c>
 80058c8:	88fb      	ldrh	r3, [r7, #6]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d101      	bne.n	80058d2 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e0fc      	b.n	8005acc <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058da:	d112      	bne.n	8005902 <HAL_SPI_Receive+0x60>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d10e      	bne.n	8005902 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2204      	movs	r2, #4
 80058e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80058ec:	88fa      	ldrh	r2, [r7, #6]
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	9300      	str	r3, [sp, #0]
 80058f2:	4613      	mov	r3, r2
 80058f4:	68ba      	ldr	r2, [r7, #8]
 80058f6:	68b9      	ldr	r1, [r7, #8]
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f000 f8eb 	bl	8005ad4 <HAL_SPI_TransmitReceive>
 80058fe:	4603      	mov	r3, r0
 8005900:	e0e4      	b.n	8005acc <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005902:	f7fd f8b9 	bl	8002a78 <HAL_GetTick>
 8005906:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800590e:	2b01      	cmp	r3, #1
 8005910:	d101      	bne.n	8005916 <HAL_SPI_Receive+0x74>
 8005912:	2302      	movs	r3, #2
 8005914:	e0da      	b.n	8005acc <HAL_SPI_Receive+0x22a>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2201      	movs	r2, #1
 800591a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2204      	movs	r2, #4
 8005922:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	68ba      	ldr	r2, [r7, #8]
 8005930:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	88fa      	ldrh	r2, [r7, #6]
 8005936:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	88fa      	ldrh	r2, [r7, #6]
 800593c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005964:	d10f      	bne.n	8005986 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005974:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005984:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005990:	2b40      	cmp	r3, #64	@ 0x40
 8005992:	d007      	beq.n	80059a4 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80059a2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d170      	bne.n	8005a8e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80059ac:	e035      	b.n	8005a1a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f003 0301 	and.w	r3, r3, #1
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d115      	bne.n	80059e8 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f103 020c 	add.w	r2, r3, #12
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059c8:	7812      	ldrb	r2, [r2, #0]
 80059ca:	b2d2      	uxtb	r2, r2
 80059cc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059d2:	1c5a      	adds	r2, r3, #1
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059dc:	b29b      	uxth	r3, r3
 80059de:	3b01      	subs	r3, #1
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80059e6:	e018      	b.n	8005a1a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059e8:	f7fd f846 	bl	8002a78 <HAL_GetTick>
 80059ec:	4602      	mov	r2, r0
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	683a      	ldr	r2, [r7, #0]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d803      	bhi.n	8005a00 <HAL_SPI_Receive+0x15e>
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059fe:	d102      	bne.n	8005a06 <HAL_SPI_Receive+0x164>
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d109      	bne.n	8005a1a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e058      	b.n	8005acc <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d1c4      	bne.n	80059ae <HAL_SPI_Receive+0x10c>
 8005a24:	e038      	b.n	8005a98 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f003 0301 	and.w	r3, r3, #1
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d113      	bne.n	8005a5c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68da      	ldr	r2, [r3, #12]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a3e:	b292      	uxth	r2, r2
 8005a40:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a46:	1c9a      	adds	r2, r3, #2
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	3b01      	subs	r3, #1
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005a5a:	e018      	b.n	8005a8e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a5c:	f7fd f80c 	bl	8002a78 <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	683a      	ldr	r2, [r7, #0]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d803      	bhi.n	8005a74 <HAL_SPI_Receive+0x1d2>
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a72:	d102      	bne.n	8005a7a <HAL_SPI_Receive+0x1d8>
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d109      	bne.n	8005a8e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e01e      	b.n	8005acc <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d1c6      	bne.n	8005a26 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	6839      	ldr	r1, [r7, #0]
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	f000 fa4b 	bl	8005f38 <SPI_EndRxTransaction>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d002      	beq.n	8005aae <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2220      	movs	r2, #32
 8005aac:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d001      	beq.n	8005aca <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e000      	b.n	8005acc <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005aca:	2300      	movs	r3, #0
  }
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3718      	adds	r7, #24
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b08a      	sub	sp, #40	@ 0x28
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
 8005ae0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ae6:	f7fc ffc7 	bl	8002a78 <HAL_GetTick>
 8005aea:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005af2:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005afa:	887b      	ldrh	r3, [r7, #2]
 8005afc:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005afe:	7ffb      	ldrb	r3, [r7, #31]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d00c      	beq.n	8005b1e <HAL_SPI_TransmitReceive+0x4a>
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b0a:	d106      	bne.n	8005b1a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d102      	bne.n	8005b1a <HAL_SPI_TransmitReceive+0x46>
 8005b14:	7ffb      	ldrb	r3, [r7, #31]
 8005b16:	2b04      	cmp	r3, #4
 8005b18:	d001      	beq.n	8005b1e <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005b1a:	2302      	movs	r3, #2
 8005b1c:	e17f      	b.n	8005e1e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d005      	beq.n	8005b30 <HAL_SPI_TransmitReceive+0x5c>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d002      	beq.n	8005b30 <HAL_SPI_TransmitReceive+0x5c>
 8005b2a:	887b      	ldrh	r3, [r7, #2]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d101      	bne.n	8005b34 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e174      	b.n	8005e1e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d101      	bne.n	8005b42 <HAL_SPI_TransmitReceive+0x6e>
 8005b3e:	2302      	movs	r3, #2
 8005b40:	e16d      	b.n	8005e1e <HAL_SPI_TransmitReceive+0x34a>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b04      	cmp	r3, #4
 8005b54:	d003      	beq.n	8005b5e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2205      	movs	r2, #5
 8005b5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	887a      	ldrh	r2, [r7, #2]
 8005b6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	887a      	ldrh	r2, [r7, #2]
 8005b74:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	68ba      	ldr	r2, [r7, #8]
 8005b7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	887a      	ldrh	r2, [r7, #2]
 8005b80:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	887a      	ldrh	r2, [r7, #2]
 8005b86:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b9e:	2b40      	cmp	r3, #64	@ 0x40
 8005ba0:	d007      	beq.n	8005bb2 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005bb0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005bba:	d17e      	bne.n	8005cba <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d002      	beq.n	8005bca <HAL_SPI_TransmitReceive+0xf6>
 8005bc4:	8afb      	ldrh	r3, [r7, #22]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d16c      	bne.n	8005ca4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bce:	881a      	ldrh	r2, [r3, #0]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bda:	1c9a      	adds	r2, r3, #2
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	3b01      	subs	r3, #1
 8005be8:	b29a      	uxth	r2, r3
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bee:	e059      	b.n	8005ca4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	f003 0302 	and.w	r3, r3, #2
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	d11b      	bne.n	8005c36 <HAL_SPI_TransmitReceive+0x162>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d016      	beq.n	8005c36 <HAL_SPI_TransmitReceive+0x162>
 8005c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d113      	bne.n	8005c36 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c12:	881a      	ldrh	r2, [r3, #0]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c1e:	1c9a      	adds	r2, r3, #2
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c32:	2300      	movs	r3, #0
 8005c34:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d119      	bne.n	8005c78 <HAL_SPI_TransmitReceive+0x1a4>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d014      	beq.n	8005c78 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68da      	ldr	r2, [r3, #12]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c58:	b292      	uxth	r2, r2
 8005c5a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c60:	1c9a      	adds	r2, r3, #2
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	b29a      	uxth	r2, r3
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c74:	2301      	movs	r3, #1
 8005c76:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005c78:	f7fc fefe 	bl	8002a78 <HAL_GetTick>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	6a3b      	ldr	r3, [r7, #32]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d80d      	bhi.n	8005ca4 <HAL_SPI_TransmitReceive+0x1d0>
 8005c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c8e:	d009      	beq.n	8005ca4 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	e0bc      	b.n	8005e1e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d1a0      	bne.n	8005bf0 <HAL_SPI_TransmitReceive+0x11c>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d19b      	bne.n	8005bf0 <HAL_SPI_TransmitReceive+0x11c>
 8005cb8:	e082      	b.n	8005dc0 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d002      	beq.n	8005cc8 <HAL_SPI_TransmitReceive+0x1f4>
 8005cc2:	8afb      	ldrh	r3, [r7, #22]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d171      	bne.n	8005dac <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	330c      	adds	r3, #12
 8005cd2:	7812      	ldrb	r2, [r2, #0]
 8005cd4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cda:	1c5a      	adds	r2, r3, #1
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cee:	e05d      	b.n	8005dac <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f003 0302 	and.w	r3, r3, #2
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d11c      	bne.n	8005d38 <HAL_SPI_TransmitReceive+0x264>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d017      	beq.n	8005d38 <HAL_SPI_TransmitReceive+0x264>
 8005d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d114      	bne.n	8005d38 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	330c      	adds	r3, #12
 8005d18:	7812      	ldrb	r2, [r2, #0]
 8005d1a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d20:	1c5a      	adds	r2, r3, #1
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d34:	2300      	movs	r3, #0
 8005d36:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f003 0301 	and.w	r3, r3, #1
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d119      	bne.n	8005d7a <HAL_SPI_TransmitReceive+0x2a6>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d014      	beq.n	8005d7a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68da      	ldr	r2, [r3, #12]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d5a:	b2d2      	uxtb	r2, r2
 8005d5c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d62:	1c5a      	adds	r2, r3, #1
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	b29a      	uxth	r2, r3
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d76:	2301      	movs	r3, #1
 8005d78:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005d7a:	f7fc fe7d 	bl	8002a78 <HAL_GetTick>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	6a3b      	ldr	r3, [r7, #32]
 8005d82:	1ad3      	subs	r3, r2, r3
 8005d84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d803      	bhi.n	8005d92 <HAL_SPI_TransmitReceive+0x2be>
 8005d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d90:	d102      	bne.n	8005d98 <HAL_SPI_TransmitReceive+0x2c4>
 8005d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d109      	bne.n	8005dac <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e038      	b.n	8005e1e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d19c      	bne.n	8005cf0 <HAL_SPI_TransmitReceive+0x21c>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d197      	bne.n	8005cf0 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005dc0:	6a3a      	ldr	r2, [r7, #32]
 8005dc2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	f000 f91d 	bl	8006004 <SPI_EndRxTxTransaction>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d008      	beq.n	8005de2 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2220      	movs	r2, #32
 8005dd4:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e01d      	b.n	8005e1e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10a      	bne.n	8005e00 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005dea:	2300      	movs	r3, #0
 8005dec:	613b      	str	r3, [r7, #16]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	613b      	str	r3, [r7, #16]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	613b      	str	r3, [r7, #16]
 8005dfe:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d001      	beq.n	8005e1c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e000      	b.n	8005e1e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
  }
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3728      	adds	r7, #40	@ 0x28
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
	...

08005e28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b088      	sub	sp, #32
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	603b      	str	r3, [r7, #0]
 8005e34:	4613      	mov	r3, r2
 8005e36:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e38:	f7fc fe1e 	bl	8002a78 <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e40:	1a9b      	subs	r3, r3, r2
 8005e42:	683a      	ldr	r2, [r7, #0]
 8005e44:	4413      	add	r3, r2
 8005e46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e48:	f7fc fe16 	bl	8002a78 <HAL_GetTick>
 8005e4c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e4e:	4b39      	ldr	r3, [pc, #228]	@ (8005f34 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	015b      	lsls	r3, r3, #5
 8005e54:	0d1b      	lsrs	r3, r3, #20
 8005e56:	69fa      	ldr	r2, [r7, #28]
 8005e58:	fb02 f303 	mul.w	r3, r2, r3
 8005e5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e5e:	e055      	b.n	8005f0c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e66:	d051      	beq.n	8005f0c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e68:	f7fc fe06 	bl	8002a78 <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	69fa      	ldr	r2, [r7, #28]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d902      	bls.n	8005e7e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d13d      	bne.n	8005efa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	685a      	ldr	r2, [r3, #4]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005e8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e96:	d111      	bne.n	8005ebc <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ea0:	d004      	beq.n	8005eac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005eaa:	d107      	bne.n	8005ebc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005eba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ec0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ec4:	d10f      	bne.n	8005ee6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005ed4:	601a      	str	r2, [r3, #0]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ee4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e018      	b.n	8005f2c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d102      	bne.n	8005f06 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8005f00:	2300      	movs	r3, #0
 8005f02:	61fb      	str	r3, [r7, #28]
 8005f04:	e002      	b.n	8005f0c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	689a      	ldr	r2, [r3, #8]
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	4013      	ands	r3, r2
 8005f16:	68ba      	ldr	r2, [r7, #8]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	bf0c      	ite	eq
 8005f1c:	2301      	moveq	r3, #1
 8005f1e:	2300      	movne	r3, #0
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	461a      	mov	r2, r3
 8005f24:	79fb      	ldrb	r3, [r7, #7]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d19a      	bne.n	8005e60 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3720      	adds	r7, #32
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	20000018 	.word	0x20000018

08005f38 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b086      	sub	sp, #24
 8005f3c:	af02      	add	r7, sp, #8
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f4c:	d111      	bne.n	8005f72 <SPI_EndRxTransaction+0x3a>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f56:	d004      	beq.n	8005f62 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f60:	d107      	bne.n	8005f72 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f70:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f7a:	d12a      	bne.n	8005fd2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f84:	d012      	beq.n	8005fac <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	2180      	movs	r1, #128	@ 0x80
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f7ff ff49 	bl	8005e28 <SPI_WaitFlagStateUntilTimeout>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d02d      	beq.n	8005ff8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fa0:	f043 0220 	orr.w	r2, r3, #32
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e026      	b.n	8005ffa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	9300      	str	r3, [sp, #0]
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	2101      	movs	r1, #1
 8005fb6:	68f8      	ldr	r0, [r7, #12]
 8005fb8:	f7ff ff36 	bl	8005e28 <SPI_WaitFlagStateUntilTimeout>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d01a      	beq.n	8005ff8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fc6:	f043 0220 	orr.w	r2, r3, #32
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e013      	b.n	8005ffa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	9300      	str	r3, [sp, #0]
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	2101      	movs	r1, #1
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f7ff ff23 	bl	8005e28 <SPI_WaitFlagStateUntilTimeout>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d007      	beq.n	8005ff8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fec:	f043 0220 	orr.w	r2, r3, #32
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e000      	b.n	8005ffa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3710      	adds	r7, #16
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
	...

08006004 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b088      	sub	sp, #32
 8006008:	af02      	add	r7, sp, #8
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	9300      	str	r3, [sp, #0]
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	2201      	movs	r2, #1
 8006018:	2102      	movs	r1, #2
 800601a:	68f8      	ldr	r0, [r7, #12]
 800601c:	f7ff ff04 	bl	8005e28 <SPI_WaitFlagStateUntilTimeout>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d007      	beq.n	8006036 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800602a:	f043 0220 	orr.w	r2, r3, #32
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e032      	b.n	800609c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006036:	4b1b      	ldr	r3, [pc, #108]	@ (80060a4 <SPI_EndRxTxTransaction+0xa0>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a1b      	ldr	r2, [pc, #108]	@ (80060a8 <SPI_EndRxTxTransaction+0xa4>)
 800603c:	fba2 2303 	umull	r2, r3, r2, r3
 8006040:	0d5b      	lsrs	r3, r3, #21
 8006042:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006046:	fb02 f303 	mul.w	r3, r2, r3
 800604a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006054:	d112      	bne.n	800607c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	9300      	str	r3, [sp, #0]
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	2200      	movs	r2, #0
 800605e:	2180      	movs	r1, #128	@ 0x80
 8006060:	68f8      	ldr	r0, [r7, #12]
 8006062:	f7ff fee1 	bl	8005e28 <SPI_WaitFlagStateUntilTimeout>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d016      	beq.n	800609a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006070:	f043 0220 	orr.w	r2, r3, #32
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006078:	2303      	movs	r3, #3
 800607a:	e00f      	b.n	800609c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00a      	beq.n	8006098 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	3b01      	subs	r3, #1
 8006086:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006092:	2b80      	cmp	r3, #128	@ 0x80
 8006094:	d0f2      	beq.n	800607c <SPI_EndRxTxTransaction+0x78>
 8006096:	e000      	b.n	800609a <SPI_EndRxTxTransaction+0x96>
        break;
 8006098:	bf00      	nop
  }

  return HAL_OK;
 800609a:	2300      	movs	r3, #0
}
 800609c:	4618      	mov	r0, r3
 800609e:	3718      	adds	r7, #24
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	20000018 	.word	0x20000018
 80060a8:	165e9f81 	.word	0x165e9f81

080060ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d101      	bne.n	80060be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e041      	b.n	8006142 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d106      	bne.n	80060d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f7fc fa80 	bl	80025d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2202      	movs	r2, #2
 80060dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	3304      	adds	r3, #4
 80060e8:	4619      	mov	r1, r3
 80060ea:	4610      	mov	r0, r2
 80060ec:	f000 fb42 	bl	8006774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3708      	adds	r7, #8
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
	...

0800614c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800614c:	b480      	push	{r7}
 800614e:	b085      	sub	sp, #20
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800615a:	b2db      	uxtb	r3, r3
 800615c:	2b01      	cmp	r3, #1
 800615e:	d001      	beq.n	8006164 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	e046      	b.n	80061f2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2202      	movs	r2, #2
 8006168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a23      	ldr	r2, [pc, #140]	@ (8006200 <HAL_TIM_Base_Start+0xb4>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d022      	beq.n	80061bc <HAL_TIM_Base_Start+0x70>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800617e:	d01d      	beq.n	80061bc <HAL_TIM_Base_Start+0x70>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a1f      	ldr	r2, [pc, #124]	@ (8006204 <HAL_TIM_Base_Start+0xb8>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d018      	beq.n	80061bc <HAL_TIM_Base_Start+0x70>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a1e      	ldr	r2, [pc, #120]	@ (8006208 <HAL_TIM_Base_Start+0xbc>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d013      	beq.n	80061bc <HAL_TIM_Base_Start+0x70>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a1c      	ldr	r2, [pc, #112]	@ (800620c <HAL_TIM_Base_Start+0xc0>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d00e      	beq.n	80061bc <HAL_TIM_Base_Start+0x70>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a1b      	ldr	r2, [pc, #108]	@ (8006210 <HAL_TIM_Base_Start+0xc4>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d009      	beq.n	80061bc <HAL_TIM_Base_Start+0x70>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a19      	ldr	r2, [pc, #100]	@ (8006214 <HAL_TIM_Base_Start+0xc8>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d004      	beq.n	80061bc <HAL_TIM_Base_Start+0x70>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a18      	ldr	r2, [pc, #96]	@ (8006218 <HAL_TIM_Base_Start+0xcc>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d111      	bne.n	80061e0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	f003 0307 	and.w	r3, r3, #7
 80061c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2b06      	cmp	r3, #6
 80061cc:	d010      	beq.n	80061f0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f042 0201 	orr.w	r2, r2, #1
 80061dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061de:	e007      	b.n	80061f0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f042 0201 	orr.w	r2, r2, #1
 80061ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3714      	adds	r7, #20
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	40010000 	.word	0x40010000
 8006204:	40000400 	.word	0x40000400
 8006208:	40000800 	.word	0x40000800
 800620c:	40000c00 	.word	0x40000c00
 8006210:	40010400 	.word	0x40010400
 8006214:	40014000 	.word	0x40014000
 8006218:	40001800 	.word	0x40001800

0800621c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d101      	bne.n	800622e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e041      	b.n	80062b2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b00      	cmp	r3, #0
 8006238:	d106      	bne.n	8006248 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 f839 	bl	80062ba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2202      	movs	r2, #2
 800624c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	3304      	adds	r3, #4
 8006258:	4619      	mov	r1, r3
 800625a:	4610      	mov	r0, r2
 800625c:	f000 fa8a 	bl	8006774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3708      	adds	r7, #8
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80062ba:	b480      	push	{r7}
 80062bc:	b083      	sub	sp, #12
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80062c2:	bf00      	nop
 80062c4:	370c      	adds	r7, #12
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
	...

080062d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d109      	bne.n	80062f4 <HAL_TIM_PWM_Start+0x24>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	bf14      	ite	ne
 80062ec:	2301      	movne	r3, #1
 80062ee:	2300      	moveq	r3, #0
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	e022      	b.n	800633a <HAL_TIM_PWM_Start+0x6a>
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	2b04      	cmp	r3, #4
 80062f8:	d109      	bne.n	800630e <HAL_TIM_PWM_Start+0x3e>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b01      	cmp	r3, #1
 8006304:	bf14      	ite	ne
 8006306:	2301      	movne	r3, #1
 8006308:	2300      	moveq	r3, #0
 800630a:	b2db      	uxtb	r3, r3
 800630c:	e015      	b.n	800633a <HAL_TIM_PWM_Start+0x6a>
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	2b08      	cmp	r3, #8
 8006312:	d109      	bne.n	8006328 <HAL_TIM_PWM_Start+0x58>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800631a:	b2db      	uxtb	r3, r3
 800631c:	2b01      	cmp	r3, #1
 800631e:	bf14      	ite	ne
 8006320:	2301      	movne	r3, #1
 8006322:	2300      	moveq	r3, #0
 8006324:	b2db      	uxtb	r3, r3
 8006326:	e008      	b.n	800633a <HAL_TIM_PWM_Start+0x6a>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800632e:	b2db      	uxtb	r3, r3
 8006330:	2b01      	cmp	r3, #1
 8006332:	bf14      	ite	ne
 8006334:	2301      	movne	r3, #1
 8006336:	2300      	moveq	r3, #0
 8006338:	b2db      	uxtb	r3, r3
 800633a:	2b00      	cmp	r3, #0
 800633c:	d001      	beq.n	8006342 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e07c      	b.n	800643c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d104      	bne.n	8006352 <HAL_TIM_PWM_Start+0x82>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2202      	movs	r2, #2
 800634c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006350:	e013      	b.n	800637a <HAL_TIM_PWM_Start+0xaa>
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	2b04      	cmp	r3, #4
 8006356:	d104      	bne.n	8006362 <HAL_TIM_PWM_Start+0x92>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2202      	movs	r2, #2
 800635c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006360:	e00b      	b.n	800637a <HAL_TIM_PWM_Start+0xaa>
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	2b08      	cmp	r3, #8
 8006366:	d104      	bne.n	8006372 <HAL_TIM_PWM_Start+0xa2>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2202      	movs	r2, #2
 800636c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006370:	e003      	b.n	800637a <HAL_TIM_PWM_Start+0xaa>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2202      	movs	r2, #2
 8006376:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2201      	movs	r2, #1
 8006380:	6839      	ldr	r1, [r7, #0]
 8006382:	4618      	mov	r0, r3
 8006384:	f000 fce6 	bl	8006d54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a2d      	ldr	r2, [pc, #180]	@ (8006444 <HAL_TIM_PWM_Start+0x174>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d004      	beq.n	800639c <HAL_TIM_PWM_Start+0xcc>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a2c      	ldr	r2, [pc, #176]	@ (8006448 <HAL_TIM_PWM_Start+0x178>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d101      	bne.n	80063a0 <HAL_TIM_PWM_Start+0xd0>
 800639c:	2301      	movs	r3, #1
 800639e:	e000      	b.n	80063a2 <HAL_TIM_PWM_Start+0xd2>
 80063a0:	2300      	movs	r3, #0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d007      	beq.n	80063b6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80063b4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a22      	ldr	r2, [pc, #136]	@ (8006444 <HAL_TIM_PWM_Start+0x174>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d022      	beq.n	8006406 <HAL_TIM_PWM_Start+0x136>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063c8:	d01d      	beq.n	8006406 <HAL_TIM_PWM_Start+0x136>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a1f      	ldr	r2, [pc, #124]	@ (800644c <HAL_TIM_PWM_Start+0x17c>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d018      	beq.n	8006406 <HAL_TIM_PWM_Start+0x136>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a1d      	ldr	r2, [pc, #116]	@ (8006450 <HAL_TIM_PWM_Start+0x180>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d013      	beq.n	8006406 <HAL_TIM_PWM_Start+0x136>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a1c      	ldr	r2, [pc, #112]	@ (8006454 <HAL_TIM_PWM_Start+0x184>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d00e      	beq.n	8006406 <HAL_TIM_PWM_Start+0x136>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a16      	ldr	r2, [pc, #88]	@ (8006448 <HAL_TIM_PWM_Start+0x178>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d009      	beq.n	8006406 <HAL_TIM_PWM_Start+0x136>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a18      	ldr	r2, [pc, #96]	@ (8006458 <HAL_TIM_PWM_Start+0x188>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d004      	beq.n	8006406 <HAL_TIM_PWM_Start+0x136>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a16      	ldr	r2, [pc, #88]	@ (800645c <HAL_TIM_PWM_Start+0x18c>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d111      	bne.n	800642a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	f003 0307 	and.w	r3, r3, #7
 8006410:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2b06      	cmp	r3, #6
 8006416:	d010      	beq.n	800643a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f042 0201 	orr.w	r2, r2, #1
 8006426:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006428:	e007      	b.n	800643a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f042 0201 	orr.w	r2, r2, #1
 8006438:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3710      	adds	r7, #16
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}
 8006444:	40010000 	.word	0x40010000
 8006448:	40010400 	.word	0x40010400
 800644c:	40000400 	.word	0x40000400
 8006450:	40000800 	.word	0x40000800
 8006454:	40000c00 	.word	0x40000c00
 8006458:	40014000 	.word	0x40014000
 800645c:	40001800 	.word	0x40001800

08006460 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b086      	sub	sp, #24
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800646c:	2300      	movs	r3, #0
 800646e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006476:	2b01      	cmp	r3, #1
 8006478:	d101      	bne.n	800647e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800647a:	2302      	movs	r3, #2
 800647c:	e0ae      	b.n	80065dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2b0c      	cmp	r3, #12
 800648a:	f200 809f 	bhi.w	80065cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800648e:	a201      	add	r2, pc, #4	@ (adr r2, 8006494 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006494:	080064c9 	.word	0x080064c9
 8006498:	080065cd 	.word	0x080065cd
 800649c:	080065cd 	.word	0x080065cd
 80064a0:	080065cd 	.word	0x080065cd
 80064a4:	08006509 	.word	0x08006509
 80064a8:	080065cd 	.word	0x080065cd
 80064ac:	080065cd 	.word	0x080065cd
 80064b0:	080065cd 	.word	0x080065cd
 80064b4:	0800654b 	.word	0x0800654b
 80064b8:	080065cd 	.word	0x080065cd
 80064bc:	080065cd 	.word	0x080065cd
 80064c0:	080065cd 	.word	0x080065cd
 80064c4:	0800658b 	.word	0x0800658b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68b9      	ldr	r1, [r7, #8]
 80064ce:	4618      	mov	r0, r3
 80064d0:	f000 f9f6 	bl	80068c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	699a      	ldr	r2, [r3, #24]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f042 0208 	orr.w	r2, r2, #8
 80064e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	699a      	ldr	r2, [r3, #24]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f022 0204 	bic.w	r2, r2, #4
 80064f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	6999      	ldr	r1, [r3, #24]
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	691a      	ldr	r2, [r3, #16]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	430a      	orrs	r2, r1
 8006504:	619a      	str	r2, [r3, #24]
      break;
 8006506:	e064      	b.n	80065d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68b9      	ldr	r1, [r7, #8]
 800650e:	4618      	mov	r0, r3
 8006510:	f000 fa46 	bl	80069a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	699a      	ldr	r2, [r3, #24]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006522:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	699a      	ldr	r2, [r3, #24]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006532:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	6999      	ldr	r1, [r3, #24]
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	021a      	lsls	r2, r3, #8
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	430a      	orrs	r2, r1
 8006546:	619a      	str	r2, [r3, #24]
      break;
 8006548:	e043      	b.n	80065d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68b9      	ldr	r1, [r7, #8]
 8006550:	4618      	mov	r0, r3
 8006552:	f000 fa9b 	bl	8006a8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	69da      	ldr	r2, [r3, #28]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f042 0208 	orr.w	r2, r2, #8
 8006564:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	69da      	ldr	r2, [r3, #28]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f022 0204 	bic.w	r2, r2, #4
 8006574:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	69d9      	ldr	r1, [r3, #28]
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	691a      	ldr	r2, [r3, #16]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	430a      	orrs	r2, r1
 8006586:	61da      	str	r2, [r3, #28]
      break;
 8006588:	e023      	b.n	80065d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68b9      	ldr	r1, [r7, #8]
 8006590:	4618      	mov	r0, r3
 8006592:	f000 faef 	bl	8006b74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	69da      	ldr	r2, [r3, #28]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80065a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	69da      	ldr	r2, [r3, #28]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	69d9      	ldr	r1, [r3, #28]
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	021a      	lsls	r2, r3, #8
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	430a      	orrs	r2, r1
 80065c8:	61da      	str	r2, [r3, #28]
      break;
 80065ca:	e002      	b.n	80065d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	75fb      	strb	r3, [r7, #23]
      break;
 80065d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80065da:	7dfb      	ldrb	r3, [r7, #23]
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3718      	adds	r7, #24
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065ee:	2300      	movs	r3, #0
 80065f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d101      	bne.n	8006600 <HAL_TIM_ConfigClockSource+0x1c>
 80065fc:	2302      	movs	r3, #2
 80065fe:	e0b4      	b.n	800676a <HAL_TIM_ConfigClockSource+0x186>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2202      	movs	r2, #2
 800660c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800661e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006626:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68ba      	ldr	r2, [r7, #8]
 800662e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006638:	d03e      	beq.n	80066b8 <HAL_TIM_ConfigClockSource+0xd4>
 800663a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800663e:	f200 8087 	bhi.w	8006750 <HAL_TIM_ConfigClockSource+0x16c>
 8006642:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006646:	f000 8086 	beq.w	8006756 <HAL_TIM_ConfigClockSource+0x172>
 800664a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800664e:	d87f      	bhi.n	8006750 <HAL_TIM_ConfigClockSource+0x16c>
 8006650:	2b70      	cmp	r3, #112	@ 0x70
 8006652:	d01a      	beq.n	800668a <HAL_TIM_ConfigClockSource+0xa6>
 8006654:	2b70      	cmp	r3, #112	@ 0x70
 8006656:	d87b      	bhi.n	8006750 <HAL_TIM_ConfigClockSource+0x16c>
 8006658:	2b60      	cmp	r3, #96	@ 0x60
 800665a:	d050      	beq.n	80066fe <HAL_TIM_ConfigClockSource+0x11a>
 800665c:	2b60      	cmp	r3, #96	@ 0x60
 800665e:	d877      	bhi.n	8006750 <HAL_TIM_ConfigClockSource+0x16c>
 8006660:	2b50      	cmp	r3, #80	@ 0x50
 8006662:	d03c      	beq.n	80066de <HAL_TIM_ConfigClockSource+0xfa>
 8006664:	2b50      	cmp	r3, #80	@ 0x50
 8006666:	d873      	bhi.n	8006750 <HAL_TIM_ConfigClockSource+0x16c>
 8006668:	2b40      	cmp	r3, #64	@ 0x40
 800666a:	d058      	beq.n	800671e <HAL_TIM_ConfigClockSource+0x13a>
 800666c:	2b40      	cmp	r3, #64	@ 0x40
 800666e:	d86f      	bhi.n	8006750 <HAL_TIM_ConfigClockSource+0x16c>
 8006670:	2b30      	cmp	r3, #48	@ 0x30
 8006672:	d064      	beq.n	800673e <HAL_TIM_ConfigClockSource+0x15a>
 8006674:	2b30      	cmp	r3, #48	@ 0x30
 8006676:	d86b      	bhi.n	8006750 <HAL_TIM_ConfigClockSource+0x16c>
 8006678:	2b20      	cmp	r3, #32
 800667a:	d060      	beq.n	800673e <HAL_TIM_ConfigClockSource+0x15a>
 800667c:	2b20      	cmp	r3, #32
 800667e:	d867      	bhi.n	8006750 <HAL_TIM_ConfigClockSource+0x16c>
 8006680:	2b00      	cmp	r3, #0
 8006682:	d05c      	beq.n	800673e <HAL_TIM_ConfigClockSource+0x15a>
 8006684:	2b10      	cmp	r3, #16
 8006686:	d05a      	beq.n	800673e <HAL_TIM_ConfigClockSource+0x15a>
 8006688:	e062      	b.n	8006750 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800669a:	f000 fb3b 	bl	8006d14 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80066ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68ba      	ldr	r2, [r7, #8]
 80066b4:	609a      	str	r2, [r3, #8]
      break;
 80066b6:	e04f      	b.n	8006758 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80066c8:	f000 fb24 	bl	8006d14 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	689a      	ldr	r2, [r3, #8]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80066da:	609a      	str	r2, [r3, #8]
      break;
 80066dc:	e03c      	b.n	8006758 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066ea:	461a      	mov	r2, r3
 80066ec:	f000 fa98 	bl	8006c20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2150      	movs	r1, #80	@ 0x50
 80066f6:	4618      	mov	r0, r3
 80066f8:	f000 faf1 	bl	8006cde <TIM_ITRx_SetConfig>
      break;
 80066fc:	e02c      	b.n	8006758 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800670a:	461a      	mov	r2, r3
 800670c:	f000 fab7 	bl	8006c7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2160      	movs	r1, #96	@ 0x60
 8006716:	4618      	mov	r0, r3
 8006718:	f000 fae1 	bl	8006cde <TIM_ITRx_SetConfig>
      break;
 800671c:	e01c      	b.n	8006758 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800672a:	461a      	mov	r2, r3
 800672c:	f000 fa78 	bl	8006c20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2140      	movs	r1, #64	@ 0x40
 8006736:	4618      	mov	r0, r3
 8006738:	f000 fad1 	bl	8006cde <TIM_ITRx_SetConfig>
      break;
 800673c:	e00c      	b.n	8006758 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4619      	mov	r1, r3
 8006748:	4610      	mov	r0, r2
 800674a:	f000 fac8 	bl	8006cde <TIM_ITRx_SetConfig>
      break;
 800674e:	e003      	b.n	8006758 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	73fb      	strb	r3, [r7, #15]
      break;
 8006754:	e000      	b.n	8006758 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006756:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006768:	7bfb      	ldrb	r3, [r7, #15]
}
 800676a:	4618      	mov	r0, r3
 800676c:	3710      	adds	r7, #16
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
	...

08006774 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a43      	ldr	r2, [pc, #268]	@ (8006894 <TIM_Base_SetConfig+0x120>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d013      	beq.n	80067b4 <TIM_Base_SetConfig+0x40>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006792:	d00f      	beq.n	80067b4 <TIM_Base_SetConfig+0x40>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4a40      	ldr	r2, [pc, #256]	@ (8006898 <TIM_Base_SetConfig+0x124>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d00b      	beq.n	80067b4 <TIM_Base_SetConfig+0x40>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4a3f      	ldr	r2, [pc, #252]	@ (800689c <TIM_Base_SetConfig+0x128>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d007      	beq.n	80067b4 <TIM_Base_SetConfig+0x40>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4a3e      	ldr	r2, [pc, #248]	@ (80068a0 <TIM_Base_SetConfig+0x12c>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d003      	beq.n	80067b4 <TIM_Base_SetConfig+0x40>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a3d      	ldr	r2, [pc, #244]	@ (80068a4 <TIM_Base_SetConfig+0x130>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d108      	bne.n	80067c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a32      	ldr	r2, [pc, #200]	@ (8006894 <TIM_Base_SetConfig+0x120>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d02b      	beq.n	8006826 <TIM_Base_SetConfig+0xb2>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067d4:	d027      	beq.n	8006826 <TIM_Base_SetConfig+0xb2>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a2f      	ldr	r2, [pc, #188]	@ (8006898 <TIM_Base_SetConfig+0x124>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d023      	beq.n	8006826 <TIM_Base_SetConfig+0xb2>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a2e      	ldr	r2, [pc, #184]	@ (800689c <TIM_Base_SetConfig+0x128>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d01f      	beq.n	8006826 <TIM_Base_SetConfig+0xb2>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a2d      	ldr	r2, [pc, #180]	@ (80068a0 <TIM_Base_SetConfig+0x12c>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d01b      	beq.n	8006826 <TIM_Base_SetConfig+0xb2>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a2c      	ldr	r2, [pc, #176]	@ (80068a4 <TIM_Base_SetConfig+0x130>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d017      	beq.n	8006826 <TIM_Base_SetConfig+0xb2>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a2b      	ldr	r2, [pc, #172]	@ (80068a8 <TIM_Base_SetConfig+0x134>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d013      	beq.n	8006826 <TIM_Base_SetConfig+0xb2>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a2a      	ldr	r2, [pc, #168]	@ (80068ac <TIM_Base_SetConfig+0x138>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d00f      	beq.n	8006826 <TIM_Base_SetConfig+0xb2>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a29      	ldr	r2, [pc, #164]	@ (80068b0 <TIM_Base_SetConfig+0x13c>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d00b      	beq.n	8006826 <TIM_Base_SetConfig+0xb2>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a28      	ldr	r2, [pc, #160]	@ (80068b4 <TIM_Base_SetConfig+0x140>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d007      	beq.n	8006826 <TIM_Base_SetConfig+0xb2>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a27      	ldr	r2, [pc, #156]	@ (80068b8 <TIM_Base_SetConfig+0x144>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d003      	beq.n	8006826 <TIM_Base_SetConfig+0xb2>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a26      	ldr	r2, [pc, #152]	@ (80068bc <TIM_Base_SetConfig+0x148>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d108      	bne.n	8006838 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800682c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	4313      	orrs	r3, r2
 8006836:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	695b      	ldr	r3, [r3, #20]
 8006842:	4313      	orrs	r3, r2
 8006844:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	689a      	ldr	r2, [r3, #8]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a0e      	ldr	r2, [pc, #56]	@ (8006894 <TIM_Base_SetConfig+0x120>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d003      	beq.n	8006866 <TIM_Base_SetConfig+0xf2>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a10      	ldr	r2, [pc, #64]	@ (80068a4 <TIM_Base_SetConfig+0x130>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d103      	bne.n	800686e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	691a      	ldr	r2, [r3, #16]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f043 0204 	orr.w	r2, r3, #4
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2201      	movs	r2, #1
 800687e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	601a      	str	r2, [r3, #0]
}
 8006886:	bf00      	nop
 8006888:	3714      	adds	r7, #20
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	40010000 	.word	0x40010000
 8006898:	40000400 	.word	0x40000400
 800689c:	40000800 	.word	0x40000800
 80068a0:	40000c00 	.word	0x40000c00
 80068a4:	40010400 	.word	0x40010400
 80068a8:	40014000 	.word	0x40014000
 80068ac:	40014400 	.word	0x40014400
 80068b0:	40014800 	.word	0x40014800
 80068b4:	40001800 	.word	0x40001800
 80068b8:	40001c00 	.word	0x40001c00
 80068bc:	40002000 	.word	0x40002000

080068c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b087      	sub	sp, #28
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a1b      	ldr	r3, [r3, #32]
 80068ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6a1b      	ldr	r3, [r3, #32]
 80068d4:	f023 0201 	bic.w	r2, r3, #1
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f023 0303 	bic.w	r3, r3, #3
 80068f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	4313      	orrs	r3, r2
 8006900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	f023 0302 	bic.w	r3, r3, #2
 8006908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	697a      	ldr	r2, [r7, #20]
 8006910:	4313      	orrs	r3, r2
 8006912:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a20      	ldr	r2, [pc, #128]	@ (8006998 <TIM_OC1_SetConfig+0xd8>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d003      	beq.n	8006924 <TIM_OC1_SetConfig+0x64>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4a1f      	ldr	r2, [pc, #124]	@ (800699c <TIM_OC1_SetConfig+0xdc>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d10c      	bne.n	800693e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	f023 0308 	bic.w	r3, r3, #8
 800692a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	697a      	ldr	r2, [r7, #20]
 8006932:	4313      	orrs	r3, r2
 8006934:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	f023 0304 	bic.w	r3, r3, #4
 800693c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a15      	ldr	r2, [pc, #84]	@ (8006998 <TIM_OC1_SetConfig+0xd8>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d003      	beq.n	800694e <TIM_OC1_SetConfig+0x8e>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a14      	ldr	r2, [pc, #80]	@ (800699c <TIM_OC1_SetConfig+0xdc>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d111      	bne.n	8006972 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006954:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800695c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	695b      	ldr	r3, [r3, #20]
 8006962:	693a      	ldr	r2, [r7, #16]
 8006964:	4313      	orrs	r3, r2
 8006966:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	699b      	ldr	r3, [r3, #24]
 800696c:	693a      	ldr	r2, [r7, #16]
 800696e:	4313      	orrs	r3, r2
 8006970:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	693a      	ldr	r2, [r7, #16]
 8006976:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	685a      	ldr	r2, [r3, #4]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	697a      	ldr	r2, [r7, #20]
 800698a:	621a      	str	r2, [r3, #32]
}
 800698c:	bf00      	nop
 800698e:	371c      	adds	r7, #28
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr
 8006998:	40010000 	.word	0x40010000
 800699c:	40010400 	.word	0x40010400

080069a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b087      	sub	sp, #28
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a1b      	ldr	r3, [r3, #32]
 80069ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6a1b      	ldr	r3, [r3, #32]
 80069b4:	f023 0210 	bic.w	r2, r3, #16
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	699b      	ldr	r3, [r3, #24]
 80069c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	021b      	lsls	r3, r3, #8
 80069de:	68fa      	ldr	r2, [r7, #12]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	f023 0320 	bic.w	r3, r3, #32
 80069ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	011b      	lsls	r3, r3, #4
 80069f2:	697a      	ldr	r2, [r7, #20]
 80069f4:	4313      	orrs	r3, r2
 80069f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a22      	ldr	r2, [pc, #136]	@ (8006a84 <TIM_OC2_SetConfig+0xe4>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d003      	beq.n	8006a08 <TIM_OC2_SetConfig+0x68>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a21      	ldr	r2, [pc, #132]	@ (8006a88 <TIM_OC2_SetConfig+0xe8>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d10d      	bne.n	8006a24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	011b      	lsls	r3, r3, #4
 8006a16:	697a      	ldr	r2, [r7, #20]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a17      	ldr	r2, [pc, #92]	@ (8006a84 <TIM_OC2_SetConfig+0xe4>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d003      	beq.n	8006a34 <TIM_OC2_SetConfig+0x94>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a16      	ldr	r2, [pc, #88]	@ (8006a88 <TIM_OC2_SetConfig+0xe8>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d113      	bne.n	8006a5c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006a3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006a42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	695b      	ldr	r3, [r3, #20]
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	693a      	ldr	r2, [r7, #16]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	699b      	ldr	r3, [r3, #24]
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	693a      	ldr	r2, [r7, #16]
 8006a60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	68fa      	ldr	r2, [r7, #12]
 8006a66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	685a      	ldr	r2, [r3, #4]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	697a      	ldr	r2, [r7, #20]
 8006a74:	621a      	str	r2, [r3, #32]
}
 8006a76:	bf00      	nop
 8006a78:	371c      	adds	r7, #28
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr
 8006a82:	bf00      	nop
 8006a84:	40010000 	.word	0x40010000
 8006a88:	40010400 	.word	0x40010400

08006a8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b087      	sub	sp, #28
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a1b      	ldr	r3, [r3, #32]
 8006a9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6a1b      	ldr	r3, [r3, #32]
 8006aa0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	69db      	ldr	r3, [r3, #28]
 8006ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f023 0303 	bic.w	r3, r3, #3
 8006ac2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006ad4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	021b      	lsls	r3, r3, #8
 8006adc:	697a      	ldr	r2, [r7, #20]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a21      	ldr	r2, [pc, #132]	@ (8006b6c <TIM_OC3_SetConfig+0xe0>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d003      	beq.n	8006af2 <TIM_OC3_SetConfig+0x66>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a20      	ldr	r2, [pc, #128]	@ (8006b70 <TIM_OC3_SetConfig+0xe4>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d10d      	bne.n	8006b0e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006af8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	021b      	lsls	r3, r3, #8
 8006b00:	697a      	ldr	r2, [r7, #20]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006b0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4a16      	ldr	r2, [pc, #88]	@ (8006b6c <TIM_OC3_SetConfig+0xe0>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d003      	beq.n	8006b1e <TIM_OC3_SetConfig+0x92>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4a15      	ldr	r2, [pc, #84]	@ (8006b70 <TIM_OC3_SetConfig+0xe4>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d113      	bne.n	8006b46 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006b2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	695b      	ldr	r3, [r3, #20]
 8006b32:	011b      	lsls	r3, r3, #4
 8006b34:	693a      	ldr	r2, [r7, #16]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	699b      	ldr	r3, [r3, #24]
 8006b3e:	011b      	lsls	r3, r3, #4
 8006b40:	693a      	ldr	r2, [r7, #16]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	693a      	ldr	r2, [r7, #16]
 8006b4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	685a      	ldr	r2, [r3, #4]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	697a      	ldr	r2, [r7, #20]
 8006b5e:	621a      	str	r2, [r3, #32]
}
 8006b60:	bf00      	nop
 8006b62:	371c      	adds	r7, #28
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr
 8006b6c:	40010000 	.word	0x40010000
 8006b70:	40010400 	.word	0x40010400

08006b74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b087      	sub	sp, #28
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a1b      	ldr	r3, [r3, #32]
 8006b82:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6a1b      	ldr	r3, [r3, #32]
 8006b88:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	69db      	ldr	r3, [r3, #28]
 8006b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006baa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	021b      	lsls	r3, r3, #8
 8006bb2:	68fa      	ldr	r2, [r7, #12]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006bbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	031b      	lsls	r3, r3, #12
 8006bc6:	693a      	ldr	r2, [r7, #16]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a12      	ldr	r2, [pc, #72]	@ (8006c18 <TIM_OC4_SetConfig+0xa4>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d003      	beq.n	8006bdc <TIM_OC4_SetConfig+0x68>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a11      	ldr	r2, [pc, #68]	@ (8006c1c <TIM_OC4_SetConfig+0xa8>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d109      	bne.n	8006bf0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006be2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	695b      	ldr	r3, [r3, #20]
 8006be8:	019b      	lsls	r3, r3, #6
 8006bea:	697a      	ldr	r2, [r7, #20]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	697a      	ldr	r2, [r7, #20]
 8006bf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	685a      	ldr	r2, [r3, #4]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	693a      	ldr	r2, [r7, #16]
 8006c08:	621a      	str	r2, [r3, #32]
}
 8006c0a:	bf00      	nop
 8006c0c:	371c      	adds	r7, #28
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr
 8006c16:	bf00      	nop
 8006c18:	40010000 	.word	0x40010000
 8006c1c:	40010400 	.word	0x40010400

08006c20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b087      	sub	sp, #28
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6a1b      	ldr	r3, [r3, #32]
 8006c30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6a1b      	ldr	r3, [r3, #32]
 8006c36:	f023 0201 	bic.w	r2, r3, #1
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	699b      	ldr	r3, [r3, #24]
 8006c42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	011b      	lsls	r3, r3, #4
 8006c50:	693a      	ldr	r2, [r7, #16]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	f023 030a 	bic.w	r3, r3, #10
 8006c5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	693a      	ldr	r2, [r7, #16]
 8006c6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	697a      	ldr	r2, [r7, #20]
 8006c70:	621a      	str	r2, [r3, #32]
}
 8006c72:	bf00      	nop
 8006c74:	371c      	adds	r7, #28
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr

08006c7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c7e:	b480      	push	{r7}
 8006c80:	b087      	sub	sp, #28
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	60f8      	str	r0, [r7, #12]
 8006c86:	60b9      	str	r1, [r7, #8]
 8006c88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6a1b      	ldr	r3, [r3, #32]
 8006c8e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6a1b      	ldr	r3, [r3, #32]
 8006c94:	f023 0210 	bic.w	r2, r3, #16
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	699b      	ldr	r3, [r3, #24]
 8006ca0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006ca8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	031b      	lsls	r3, r3, #12
 8006cae:	693a      	ldr	r2, [r7, #16]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006cba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	011b      	lsls	r3, r3, #4
 8006cc0:	697a      	ldr	r2, [r7, #20]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	693a      	ldr	r2, [r7, #16]
 8006cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	697a      	ldr	r2, [r7, #20]
 8006cd0:	621a      	str	r2, [r3, #32]
}
 8006cd2:	bf00      	nop
 8006cd4:	371c      	adds	r7, #28
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr

08006cde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006cde:	b480      	push	{r7}
 8006ce0:	b085      	sub	sp, #20
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
 8006ce6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cf4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cf6:	683a      	ldr	r2, [r7, #0]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	f043 0307 	orr.w	r3, r3, #7
 8006d00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	609a      	str	r2, [r3, #8]
}
 8006d08:	bf00      	nop
 8006d0a:	3714      	adds	r7, #20
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b087      	sub	sp, #28
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	607a      	str	r2, [r7, #4]
 8006d20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006d2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	021a      	lsls	r2, r3, #8
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	431a      	orrs	r2, r3
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	697a      	ldr	r2, [r7, #20]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	697a      	ldr	r2, [r7, #20]
 8006d46:	609a      	str	r2, [r3, #8]
}
 8006d48:	bf00      	nop
 8006d4a:	371c      	adds	r7, #28
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b087      	sub	sp, #28
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	f003 031f 	and.w	r3, r3, #31
 8006d66:	2201      	movs	r2, #1
 8006d68:	fa02 f303 	lsl.w	r3, r2, r3
 8006d6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6a1a      	ldr	r2, [r3, #32]
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	43db      	mvns	r3, r3
 8006d76:	401a      	ands	r2, r3
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6a1a      	ldr	r2, [r3, #32]
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	f003 031f 	and.w	r3, r3, #31
 8006d86:	6879      	ldr	r1, [r7, #4]
 8006d88:	fa01 f303 	lsl.w	r3, r1, r3
 8006d8c:	431a      	orrs	r2, r3
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	621a      	str	r2, [r3, #32]
}
 8006d92:	bf00      	nop
 8006d94:	371c      	adds	r7, #28
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr
	...

08006da0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d101      	bne.n	8006db8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006db4:	2302      	movs	r3, #2
 8006db6:	e05a      	b.n	8006e6e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2202      	movs	r2, #2
 8006dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	68fa      	ldr	r2, [r7, #12]
 8006df0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a21      	ldr	r2, [pc, #132]	@ (8006e7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d022      	beq.n	8006e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e04:	d01d      	beq.n	8006e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a1d      	ldr	r2, [pc, #116]	@ (8006e80 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d018      	beq.n	8006e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a1b      	ldr	r2, [pc, #108]	@ (8006e84 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d013      	beq.n	8006e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a1a      	ldr	r2, [pc, #104]	@ (8006e88 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d00e      	beq.n	8006e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a18      	ldr	r2, [pc, #96]	@ (8006e8c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d009      	beq.n	8006e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a17      	ldr	r2, [pc, #92]	@ (8006e90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d004      	beq.n	8006e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a15      	ldr	r2, [pc, #84]	@ (8006e94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d10c      	bne.n	8006e5c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	68ba      	ldr	r2, [r7, #8]
 8006e50:	4313      	orrs	r3, r2
 8006e52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	68ba      	ldr	r2, [r7, #8]
 8006e5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3714      	adds	r7, #20
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	40010000 	.word	0x40010000
 8006e80:	40000400 	.word	0x40000400
 8006e84:	40000800 	.word	0x40000800
 8006e88:	40000c00 	.word	0x40000c00
 8006e8c:	40010400 	.word	0x40010400
 8006e90:	40014000 	.word	0x40014000
 8006e94:	40001800 	.word	0x40001800

08006e98 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d101      	bne.n	8006eb4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006eb0:	2302      	movs	r3, #2
 8006eb2:	e03d      	b.n	8006f30 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	695b      	ldr	r3, [r3, #20]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	69db      	ldr	r3, [r3, #28]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006f2e:	2300      	movs	r3, #0
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3714      	adds	r7, #20
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d101      	bne.n	8006f4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e042      	b.n	8006fd4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d106      	bne.n	8006f68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f7fb fba8 	bl	80026b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2224      	movs	r2, #36	@ 0x24
 8006f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68da      	ldr	r2, [r3, #12]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006f7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 f973 	bl	800726c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	691a      	ldr	r2, [r3, #16]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006f94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	695a      	ldr	r2, [r3, #20]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006fa4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	68da      	ldr	r2, [r3, #12]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006fb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2220      	movs	r2, #32
 8006fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2220      	movs	r2, #32
 8006fc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3708      	adds	r7, #8
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b08a      	sub	sp, #40	@ 0x28
 8006fe0:	af02      	add	r7, sp, #8
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	603b      	str	r3, [r7, #0]
 8006fe8:	4613      	mov	r3, r2
 8006fea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006fec:	2300      	movs	r3, #0
 8006fee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	2b20      	cmp	r3, #32
 8006ffa:	d175      	bne.n	80070e8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d002      	beq.n	8007008 <HAL_UART_Transmit+0x2c>
 8007002:	88fb      	ldrh	r3, [r7, #6]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d101      	bne.n	800700c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	e06e      	b.n	80070ea <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2200      	movs	r2, #0
 8007010:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2221      	movs	r2, #33	@ 0x21
 8007016:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800701a:	f7fb fd2d 	bl	8002a78 <HAL_GetTick>
 800701e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	88fa      	ldrh	r2, [r7, #6]
 8007024:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	88fa      	ldrh	r2, [r7, #6]
 800702a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007034:	d108      	bne.n	8007048 <HAL_UART_Transmit+0x6c>
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d104      	bne.n	8007048 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800703e:	2300      	movs	r3, #0
 8007040:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	61bb      	str	r3, [r7, #24]
 8007046:	e003      	b.n	8007050 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800704c:	2300      	movs	r3, #0
 800704e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007050:	e02e      	b.n	80070b0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	9300      	str	r3, [sp, #0]
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	2200      	movs	r2, #0
 800705a:	2180      	movs	r1, #128	@ 0x80
 800705c:	68f8      	ldr	r0, [r7, #12]
 800705e:	f000 f848 	bl	80070f2 <UART_WaitOnFlagUntilTimeout>
 8007062:	4603      	mov	r3, r0
 8007064:	2b00      	cmp	r3, #0
 8007066:	d005      	beq.n	8007074 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2220      	movs	r2, #32
 800706c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007070:	2303      	movs	r3, #3
 8007072:	e03a      	b.n	80070ea <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007074:	69fb      	ldr	r3, [r7, #28]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d10b      	bne.n	8007092 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800707a:	69bb      	ldr	r3, [r7, #24]
 800707c:	881b      	ldrh	r3, [r3, #0]
 800707e:	461a      	mov	r2, r3
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007088:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800708a:	69bb      	ldr	r3, [r7, #24]
 800708c:	3302      	adds	r3, #2
 800708e:	61bb      	str	r3, [r7, #24]
 8007090:	e007      	b.n	80070a2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	781a      	ldrb	r2, [r3, #0]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	3301      	adds	r3, #1
 80070a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	3b01      	subs	r3, #1
 80070aa:	b29a      	uxth	r2, r3
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d1cb      	bne.n	8007052 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	9300      	str	r3, [sp, #0]
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	2200      	movs	r2, #0
 80070c2:	2140      	movs	r1, #64	@ 0x40
 80070c4:	68f8      	ldr	r0, [r7, #12]
 80070c6:	f000 f814 	bl	80070f2 <UART_WaitOnFlagUntilTimeout>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d005      	beq.n	80070dc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2220      	movs	r2, #32
 80070d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80070d8:	2303      	movs	r3, #3
 80070da:	e006      	b.n	80070ea <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2220      	movs	r2, #32
 80070e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80070e4:	2300      	movs	r3, #0
 80070e6:	e000      	b.n	80070ea <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80070e8:	2302      	movs	r3, #2
  }
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3720      	adds	r7, #32
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b086      	sub	sp, #24
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	60f8      	str	r0, [r7, #12]
 80070fa:	60b9      	str	r1, [r7, #8]
 80070fc:	603b      	str	r3, [r7, #0]
 80070fe:	4613      	mov	r3, r2
 8007100:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007102:	e03b      	b.n	800717c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007104:	6a3b      	ldr	r3, [r7, #32]
 8007106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800710a:	d037      	beq.n	800717c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800710c:	f7fb fcb4 	bl	8002a78 <HAL_GetTick>
 8007110:	4602      	mov	r2, r0
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	1ad3      	subs	r3, r2, r3
 8007116:	6a3a      	ldr	r2, [r7, #32]
 8007118:	429a      	cmp	r2, r3
 800711a:	d302      	bcc.n	8007122 <UART_WaitOnFlagUntilTimeout+0x30>
 800711c:	6a3b      	ldr	r3, [r7, #32]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d101      	bne.n	8007126 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007122:	2303      	movs	r3, #3
 8007124:	e03a      	b.n	800719c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	f003 0304 	and.w	r3, r3, #4
 8007130:	2b00      	cmp	r3, #0
 8007132:	d023      	beq.n	800717c <UART_WaitOnFlagUntilTimeout+0x8a>
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	2b80      	cmp	r3, #128	@ 0x80
 8007138:	d020      	beq.n	800717c <UART_WaitOnFlagUntilTimeout+0x8a>
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	2b40      	cmp	r3, #64	@ 0x40
 800713e:	d01d      	beq.n	800717c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f003 0308 	and.w	r3, r3, #8
 800714a:	2b08      	cmp	r3, #8
 800714c:	d116      	bne.n	800717c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800714e:	2300      	movs	r3, #0
 8007150:	617b      	str	r3, [r7, #20]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	617b      	str	r3, [r7, #20]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	617b      	str	r3, [r7, #20]
 8007162:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007164:	68f8      	ldr	r0, [r7, #12]
 8007166:	f000 f81d 	bl	80071a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2208      	movs	r2, #8
 800716e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2200      	movs	r2, #0
 8007174:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	e00f      	b.n	800719c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	4013      	ands	r3, r2
 8007186:	68ba      	ldr	r2, [r7, #8]
 8007188:	429a      	cmp	r2, r3
 800718a:	bf0c      	ite	eq
 800718c:	2301      	moveq	r3, #1
 800718e:	2300      	movne	r3, #0
 8007190:	b2db      	uxtb	r3, r3
 8007192:	461a      	mov	r2, r3
 8007194:	79fb      	ldrb	r3, [r7, #7]
 8007196:	429a      	cmp	r2, r3
 8007198:	d0b4      	beq.n	8007104 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800719a:	2300      	movs	r3, #0
}
 800719c:	4618      	mov	r0, r3
 800719e:	3718      	adds	r7, #24
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b095      	sub	sp, #84	@ 0x54
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	330c      	adds	r3, #12
 80071b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071b6:	e853 3f00 	ldrex	r3, [r3]
 80071ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80071bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	330c      	adds	r3, #12
 80071ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80071cc:	643a      	str	r2, [r7, #64]	@ 0x40
 80071ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80071d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80071d4:	e841 2300 	strex	r3, r2, [r1]
 80071d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80071da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d1e5      	bne.n	80071ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	3314      	adds	r3, #20
 80071e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e8:	6a3b      	ldr	r3, [r7, #32]
 80071ea:	e853 3f00 	ldrex	r3, [r3]
 80071ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	f023 0301 	bic.w	r3, r3, #1
 80071f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	3314      	adds	r3, #20
 80071fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007200:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007202:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007204:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007206:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007208:	e841 2300 	strex	r3, r2, [r1]
 800720c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800720e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007210:	2b00      	cmp	r3, #0
 8007212:	d1e5      	bne.n	80071e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007218:	2b01      	cmp	r3, #1
 800721a:	d119      	bne.n	8007250 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	330c      	adds	r3, #12
 8007222:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	e853 3f00 	ldrex	r3, [r3]
 800722a:	60bb      	str	r3, [r7, #8]
   return(result);
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	f023 0310 	bic.w	r3, r3, #16
 8007232:	647b      	str	r3, [r7, #68]	@ 0x44
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	330c      	adds	r3, #12
 800723a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800723c:	61ba      	str	r2, [r7, #24]
 800723e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007240:	6979      	ldr	r1, [r7, #20]
 8007242:	69ba      	ldr	r2, [r7, #24]
 8007244:	e841 2300 	strex	r3, r2, [r1]
 8007248:	613b      	str	r3, [r7, #16]
   return(result);
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d1e5      	bne.n	800721c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2220      	movs	r2, #32
 8007254:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800725e:	bf00      	nop
 8007260:	3754      	adds	r7, #84	@ 0x54
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr
	...

0800726c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800726c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007270:	b0c0      	sub	sp, #256	@ 0x100
 8007272:	af00      	add	r7, sp, #0
 8007274:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007288:	68d9      	ldr	r1, [r3, #12]
 800728a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	ea40 0301 	orr.w	r3, r0, r1
 8007294:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800729a:	689a      	ldr	r2, [r3, #8]
 800729c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072a0:	691b      	ldr	r3, [r3, #16]
 80072a2:	431a      	orrs	r2, r3
 80072a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072a8:	695b      	ldr	r3, [r3, #20]
 80072aa:	431a      	orrs	r2, r3
 80072ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072b0:	69db      	ldr	r3, [r3, #28]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80072b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80072c4:	f021 010c 	bic.w	r1, r1, #12
 80072c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80072d2:	430b      	orrs	r3, r1
 80072d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80072d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	695b      	ldr	r3, [r3, #20]
 80072de:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80072e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072e6:	6999      	ldr	r1, [r3, #24]
 80072e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	ea40 0301 	orr.w	r3, r0, r1
 80072f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80072f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	4b8f      	ldr	r3, [pc, #572]	@ (8007538 <UART_SetConfig+0x2cc>)
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d005      	beq.n	800730c <UART_SetConfig+0xa0>
 8007300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	4b8d      	ldr	r3, [pc, #564]	@ (800753c <UART_SetConfig+0x2d0>)
 8007308:	429a      	cmp	r2, r3
 800730a:	d104      	bne.n	8007316 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800730c:	f7fd fc1a 	bl	8004b44 <HAL_RCC_GetPCLK2Freq>
 8007310:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007314:	e003      	b.n	800731e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007316:	f7fd fc01 	bl	8004b1c <HAL_RCC_GetPCLK1Freq>
 800731a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800731e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007322:	69db      	ldr	r3, [r3, #28]
 8007324:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007328:	f040 810c 	bne.w	8007544 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800732c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007330:	2200      	movs	r2, #0
 8007332:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007336:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800733a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800733e:	4622      	mov	r2, r4
 8007340:	462b      	mov	r3, r5
 8007342:	1891      	adds	r1, r2, r2
 8007344:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007346:	415b      	adcs	r3, r3
 8007348:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800734a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800734e:	4621      	mov	r1, r4
 8007350:	eb12 0801 	adds.w	r8, r2, r1
 8007354:	4629      	mov	r1, r5
 8007356:	eb43 0901 	adc.w	r9, r3, r1
 800735a:	f04f 0200 	mov.w	r2, #0
 800735e:	f04f 0300 	mov.w	r3, #0
 8007362:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007366:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800736a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800736e:	4690      	mov	r8, r2
 8007370:	4699      	mov	r9, r3
 8007372:	4623      	mov	r3, r4
 8007374:	eb18 0303 	adds.w	r3, r8, r3
 8007378:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800737c:	462b      	mov	r3, r5
 800737e:	eb49 0303 	adc.w	r3, r9, r3
 8007382:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007392:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007396:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800739a:	460b      	mov	r3, r1
 800739c:	18db      	adds	r3, r3, r3
 800739e:	653b      	str	r3, [r7, #80]	@ 0x50
 80073a0:	4613      	mov	r3, r2
 80073a2:	eb42 0303 	adc.w	r3, r2, r3
 80073a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80073a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80073ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80073b0:	f7f9 fc8a 	bl	8000cc8 <__aeabi_uldivmod>
 80073b4:	4602      	mov	r2, r0
 80073b6:	460b      	mov	r3, r1
 80073b8:	4b61      	ldr	r3, [pc, #388]	@ (8007540 <UART_SetConfig+0x2d4>)
 80073ba:	fba3 2302 	umull	r2, r3, r3, r2
 80073be:	095b      	lsrs	r3, r3, #5
 80073c0:	011c      	lsls	r4, r3, #4
 80073c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073c6:	2200      	movs	r2, #0
 80073c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80073cc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80073d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80073d4:	4642      	mov	r2, r8
 80073d6:	464b      	mov	r3, r9
 80073d8:	1891      	adds	r1, r2, r2
 80073da:	64b9      	str	r1, [r7, #72]	@ 0x48
 80073dc:	415b      	adcs	r3, r3
 80073de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80073e4:	4641      	mov	r1, r8
 80073e6:	eb12 0a01 	adds.w	sl, r2, r1
 80073ea:	4649      	mov	r1, r9
 80073ec:	eb43 0b01 	adc.w	fp, r3, r1
 80073f0:	f04f 0200 	mov.w	r2, #0
 80073f4:	f04f 0300 	mov.w	r3, #0
 80073f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80073fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007400:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007404:	4692      	mov	sl, r2
 8007406:	469b      	mov	fp, r3
 8007408:	4643      	mov	r3, r8
 800740a:	eb1a 0303 	adds.w	r3, sl, r3
 800740e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007412:	464b      	mov	r3, r9
 8007414:	eb4b 0303 	adc.w	r3, fp, r3
 8007418:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800741c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007428:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800742c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007430:	460b      	mov	r3, r1
 8007432:	18db      	adds	r3, r3, r3
 8007434:	643b      	str	r3, [r7, #64]	@ 0x40
 8007436:	4613      	mov	r3, r2
 8007438:	eb42 0303 	adc.w	r3, r2, r3
 800743c:	647b      	str	r3, [r7, #68]	@ 0x44
 800743e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007442:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007446:	f7f9 fc3f 	bl	8000cc8 <__aeabi_uldivmod>
 800744a:	4602      	mov	r2, r0
 800744c:	460b      	mov	r3, r1
 800744e:	4611      	mov	r1, r2
 8007450:	4b3b      	ldr	r3, [pc, #236]	@ (8007540 <UART_SetConfig+0x2d4>)
 8007452:	fba3 2301 	umull	r2, r3, r3, r1
 8007456:	095b      	lsrs	r3, r3, #5
 8007458:	2264      	movs	r2, #100	@ 0x64
 800745a:	fb02 f303 	mul.w	r3, r2, r3
 800745e:	1acb      	subs	r3, r1, r3
 8007460:	00db      	lsls	r3, r3, #3
 8007462:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007466:	4b36      	ldr	r3, [pc, #216]	@ (8007540 <UART_SetConfig+0x2d4>)
 8007468:	fba3 2302 	umull	r2, r3, r3, r2
 800746c:	095b      	lsrs	r3, r3, #5
 800746e:	005b      	lsls	r3, r3, #1
 8007470:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007474:	441c      	add	r4, r3
 8007476:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800747a:	2200      	movs	r2, #0
 800747c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007480:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007484:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007488:	4642      	mov	r2, r8
 800748a:	464b      	mov	r3, r9
 800748c:	1891      	adds	r1, r2, r2
 800748e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007490:	415b      	adcs	r3, r3
 8007492:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007494:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007498:	4641      	mov	r1, r8
 800749a:	1851      	adds	r1, r2, r1
 800749c:	6339      	str	r1, [r7, #48]	@ 0x30
 800749e:	4649      	mov	r1, r9
 80074a0:	414b      	adcs	r3, r1
 80074a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80074a4:	f04f 0200 	mov.w	r2, #0
 80074a8:	f04f 0300 	mov.w	r3, #0
 80074ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80074b0:	4659      	mov	r1, fp
 80074b2:	00cb      	lsls	r3, r1, #3
 80074b4:	4651      	mov	r1, sl
 80074b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074ba:	4651      	mov	r1, sl
 80074bc:	00ca      	lsls	r2, r1, #3
 80074be:	4610      	mov	r0, r2
 80074c0:	4619      	mov	r1, r3
 80074c2:	4603      	mov	r3, r0
 80074c4:	4642      	mov	r2, r8
 80074c6:	189b      	adds	r3, r3, r2
 80074c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80074cc:	464b      	mov	r3, r9
 80074ce:	460a      	mov	r2, r1
 80074d0:	eb42 0303 	adc.w	r3, r2, r3
 80074d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80074d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80074e4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80074e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80074ec:	460b      	mov	r3, r1
 80074ee:	18db      	adds	r3, r3, r3
 80074f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80074f2:	4613      	mov	r3, r2
 80074f4:	eb42 0303 	adc.w	r3, r2, r3
 80074f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80074fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80074fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007502:	f7f9 fbe1 	bl	8000cc8 <__aeabi_uldivmod>
 8007506:	4602      	mov	r2, r0
 8007508:	460b      	mov	r3, r1
 800750a:	4b0d      	ldr	r3, [pc, #52]	@ (8007540 <UART_SetConfig+0x2d4>)
 800750c:	fba3 1302 	umull	r1, r3, r3, r2
 8007510:	095b      	lsrs	r3, r3, #5
 8007512:	2164      	movs	r1, #100	@ 0x64
 8007514:	fb01 f303 	mul.w	r3, r1, r3
 8007518:	1ad3      	subs	r3, r2, r3
 800751a:	00db      	lsls	r3, r3, #3
 800751c:	3332      	adds	r3, #50	@ 0x32
 800751e:	4a08      	ldr	r2, [pc, #32]	@ (8007540 <UART_SetConfig+0x2d4>)
 8007520:	fba2 2303 	umull	r2, r3, r2, r3
 8007524:	095b      	lsrs	r3, r3, #5
 8007526:	f003 0207 	and.w	r2, r3, #7
 800752a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4422      	add	r2, r4
 8007532:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007534:	e106      	b.n	8007744 <UART_SetConfig+0x4d8>
 8007536:	bf00      	nop
 8007538:	40011000 	.word	0x40011000
 800753c:	40011400 	.word	0x40011400
 8007540:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007544:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007548:	2200      	movs	r2, #0
 800754a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800754e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007552:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007556:	4642      	mov	r2, r8
 8007558:	464b      	mov	r3, r9
 800755a:	1891      	adds	r1, r2, r2
 800755c:	6239      	str	r1, [r7, #32]
 800755e:	415b      	adcs	r3, r3
 8007560:	627b      	str	r3, [r7, #36]	@ 0x24
 8007562:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007566:	4641      	mov	r1, r8
 8007568:	1854      	adds	r4, r2, r1
 800756a:	4649      	mov	r1, r9
 800756c:	eb43 0501 	adc.w	r5, r3, r1
 8007570:	f04f 0200 	mov.w	r2, #0
 8007574:	f04f 0300 	mov.w	r3, #0
 8007578:	00eb      	lsls	r3, r5, #3
 800757a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800757e:	00e2      	lsls	r2, r4, #3
 8007580:	4614      	mov	r4, r2
 8007582:	461d      	mov	r5, r3
 8007584:	4643      	mov	r3, r8
 8007586:	18e3      	adds	r3, r4, r3
 8007588:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800758c:	464b      	mov	r3, r9
 800758e:	eb45 0303 	adc.w	r3, r5, r3
 8007592:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80075a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80075a6:	f04f 0200 	mov.w	r2, #0
 80075aa:	f04f 0300 	mov.w	r3, #0
 80075ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80075b2:	4629      	mov	r1, r5
 80075b4:	008b      	lsls	r3, r1, #2
 80075b6:	4621      	mov	r1, r4
 80075b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075bc:	4621      	mov	r1, r4
 80075be:	008a      	lsls	r2, r1, #2
 80075c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80075c4:	f7f9 fb80 	bl	8000cc8 <__aeabi_uldivmod>
 80075c8:	4602      	mov	r2, r0
 80075ca:	460b      	mov	r3, r1
 80075cc:	4b60      	ldr	r3, [pc, #384]	@ (8007750 <UART_SetConfig+0x4e4>)
 80075ce:	fba3 2302 	umull	r2, r3, r3, r2
 80075d2:	095b      	lsrs	r3, r3, #5
 80075d4:	011c      	lsls	r4, r3, #4
 80075d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075da:	2200      	movs	r2, #0
 80075dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80075e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80075e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80075e8:	4642      	mov	r2, r8
 80075ea:	464b      	mov	r3, r9
 80075ec:	1891      	adds	r1, r2, r2
 80075ee:	61b9      	str	r1, [r7, #24]
 80075f0:	415b      	adcs	r3, r3
 80075f2:	61fb      	str	r3, [r7, #28]
 80075f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80075f8:	4641      	mov	r1, r8
 80075fa:	1851      	adds	r1, r2, r1
 80075fc:	6139      	str	r1, [r7, #16]
 80075fe:	4649      	mov	r1, r9
 8007600:	414b      	adcs	r3, r1
 8007602:	617b      	str	r3, [r7, #20]
 8007604:	f04f 0200 	mov.w	r2, #0
 8007608:	f04f 0300 	mov.w	r3, #0
 800760c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007610:	4659      	mov	r1, fp
 8007612:	00cb      	lsls	r3, r1, #3
 8007614:	4651      	mov	r1, sl
 8007616:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800761a:	4651      	mov	r1, sl
 800761c:	00ca      	lsls	r2, r1, #3
 800761e:	4610      	mov	r0, r2
 8007620:	4619      	mov	r1, r3
 8007622:	4603      	mov	r3, r0
 8007624:	4642      	mov	r2, r8
 8007626:	189b      	adds	r3, r3, r2
 8007628:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800762c:	464b      	mov	r3, r9
 800762e:	460a      	mov	r2, r1
 8007630:	eb42 0303 	adc.w	r3, r2, r3
 8007634:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007642:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007644:	f04f 0200 	mov.w	r2, #0
 8007648:	f04f 0300 	mov.w	r3, #0
 800764c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007650:	4649      	mov	r1, r9
 8007652:	008b      	lsls	r3, r1, #2
 8007654:	4641      	mov	r1, r8
 8007656:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800765a:	4641      	mov	r1, r8
 800765c:	008a      	lsls	r2, r1, #2
 800765e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007662:	f7f9 fb31 	bl	8000cc8 <__aeabi_uldivmod>
 8007666:	4602      	mov	r2, r0
 8007668:	460b      	mov	r3, r1
 800766a:	4611      	mov	r1, r2
 800766c:	4b38      	ldr	r3, [pc, #224]	@ (8007750 <UART_SetConfig+0x4e4>)
 800766e:	fba3 2301 	umull	r2, r3, r3, r1
 8007672:	095b      	lsrs	r3, r3, #5
 8007674:	2264      	movs	r2, #100	@ 0x64
 8007676:	fb02 f303 	mul.w	r3, r2, r3
 800767a:	1acb      	subs	r3, r1, r3
 800767c:	011b      	lsls	r3, r3, #4
 800767e:	3332      	adds	r3, #50	@ 0x32
 8007680:	4a33      	ldr	r2, [pc, #204]	@ (8007750 <UART_SetConfig+0x4e4>)
 8007682:	fba2 2303 	umull	r2, r3, r2, r3
 8007686:	095b      	lsrs	r3, r3, #5
 8007688:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800768c:	441c      	add	r4, r3
 800768e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007692:	2200      	movs	r2, #0
 8007694:	673b      	str	r3, [r7, #112]	@ 0x70
 8007696:	677a      	str	r2, [r7, #116]	@ 0x74
 8007698:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800769c:	4642      	mov	r2, r8
 800769e:	464b      	mov	r3, r9
 80076a0:	1891      	adds	r1, r2, r2
 80076a2:	60b9      	str	r1, [r7, #8]
 80076a4:	415b      	adcs	r3, r3
 80076a6:	60fb      	str	r3, [r7, #12]
 80076a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80076ac:	4641      	mov	r1, r8
 80076ae:	1851      	adds	r1, r2, r1
 80076b0:	6039      	str	r1, [r7, #0]
 80076b2:	4649      	mov	r1, r9
 80076b4:	414b      	adcs	r3, r1
 80076b6:	607b      	str	r3, [r7, #4]
 80076b8:	f04f 0200 	mov.w	r2, #0
 80076bc:	f04f 0300 	mov.w	r3, #0
 80076c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80076c4:	4659      	mov	r1, fp
 80076c6:	00cb      	lsls	r3, r1, #3
 80076c8:	4651      	mov	r1, sl
 80076ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076ce:	4651      	mov	r1, sl
 80076d0:	00ca      	lsls	r2, r1, #3
 80076d2:	4610      	mov	r0, r2
 80076d4:	4619      	mov	r1, r3
 80076d6:	4603      	mov	r3, r0
 80076d8:	4642      	mov	r2, r8
 80076da:	189b      	adds	r3, r3, r2
 80076dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80076de:	464b      	mov	r3, r9
 80076e0:	460a      	mov	r2, r1
 80076e2:	eb42 0303 	adc.w	r3, r2, r3
 80076e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80076e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80076f2:	667a      	str	r2, [r7, #100]	@ 0x64
 80076f4:	f04f 0200 	mov.w	r2, #0
 80076f8:	f04f 0300 	mov.w	r3, #0
 80076fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007700:	4649      	mov	r1, r9
 8007702:	008b      	lsls	r3, r1, #2
 8007704:	4641      	mov	r1, r8
 8007706:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800770a:	4641      	mov	r1, r8
 800770c:	008a      	lsls	r2, r1, #2
 800770e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007712:	f7f9 fad9 	bl	8000cc8 <__aeabi_uldivmod>
 8007716:	4602      	mov	r2, r0
 8007718:	460b      	mov	r3, r1
 800771a:	4b0d      	ldr	r3, [pc, #52]	@ (8007750 <UART_SetConfig+0x4e4>)
 800771c:	fba3 1302 	umull	r1, r3, r3, r2
 8007720:	095b      	lsrs	r3, r3, #5
 8007722:	2164      	movs	r1, #100	@ 0x64
 8007724:	fb01 f303 	mul.w	r3, r1, r3
 8007728:	1ad3      	subs	r3, r2, r3
 800772a:	011b      	lsls	r3, r3, #4
 800772c:	3332      	adds	r3, #50	@ 0x32
 800772e:	4a08      	ldr	r2, [pc, #32]	@ (8007750 <UART_SetConfig+0x4e4>)
 8007730:	fba2 2303 	umull	r2, r3, r2, r3
 8007734:	095b      	lsrs	r3, r3, #5
 8007736:	f003 020f 	and.w	r2, r3, #15
 800773a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4422      	add	r2, r4
 8007742:	609a      	str	r2, [r3, #8]
}
 8007744:	bf00      	nop
 8007746:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800774a:	46bd      	mov	sp, r7
 800774c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007750:	51eb851f 	.word	0x51eb851f

08007754 <__cvt>:
 8007754:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007758:	ec57 6b10 	vmov	r6, r7, d0
 800775c:	2f00      	cmp	r7, #0
 800775e:	460c      	mov	r4, r1
 8007760:	4619      	mov	r1, r3
 8007762:	463b      	mov	r3, r7
 8007764:	bfbb      	ittet	lt
 8007766:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800776a:	461f      	movlt	r7, r3
 800776c:	2300      	movge	r3, #0
 800776e:	232d      	movlt	r3, #45	@ 0x2d
 8007770:	700b      	strb	r3, [r1, #0]
 8007772:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007774:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007778:	4691      	mov	r9, r2
 800777a:	f023 0820 	bic.w	r8, r3, #32
 800777e:	bfbc      	itt	lt
 8007780:	4632      	movlt	r2, r6
 8007782:	4616      	movlt	r6, r2
 8007784:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007788:	d005      	beq.n	8007796 <__cvt+0x42>
 800778a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800778e:	d100      	bne.n	8007792 <__cvt+0x3e>
 8007790:	3401      	adds	r4, #1
 8007792:	2102      	movs	r1, #2
 8007794:	e000      	b.n	8007798 <__cvt+0x44>
 8007796:	2103      	movs	r1, #3
 8007798:	ab03      	add	r3, sp, #12
 800779a:	9301      	str	r3, [sp, #4]
 800779c:	ab02      	add	r3, sp, #8
 800779e:	9300      	str	r3, [sp, #0]
 80077a0:	ec47 6b10 	vmov	d0, r6, r7
 80077a4:	4653      	mov	r3, sl
 80077a6:	4622      	mov	r2, r4
 80077a8:	f001 f972 	bl	8008a90 <_dtoa_r>
 80077ac:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80077b0:	4605      	mov	r5, r0
 80077b2:	d119      	bne.n	80077e8 <__cvt+0x94>
 80077b4:	f019 0f01 	tst.w	r9, #1
 80077b8:	d00e      	beq.n	80077d8 <__cvt+0x84>
 80077ba:	eb00 0904 	add.w	r9, r0, r4
 80077be:	2200      	movs	r2, #0
 80077c0:	2300      	movs	r3, #0
 80077c2:	4630      	mov	r0, r6
 80077c4:	4639      	mov	r1, r7
 80077c6:	f7f9 f99f 	bl	8000b08 <__aeabi_dcmpeq>
 80077ca:	b108      	cbz	r0, 80077d0 <__cvt+0x7c>
 80077cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80077d0:	2230      	movs	r2, #48	@ 0x30
 80077d2:	9b03      	ldr	r3, [sp, #12]
 80077d4:	454b      	cmp	r3, r9
 80077d6:	d31e      	bcc.n	8007816 <__cvt+0xc2>
 80077d8:	9b03      	ldr	r3, [sp, #12]
 80077da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80077dc:	1b5b      	subs	r3, r3, r5
 80077de:	4628      	mov	r0, r5
 80077e0:	6013      	str	r3, [r2, #0]
 80077e2:	b004      	add	sp, #16
 80077e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80077ec:	eb00 0904 	add.w	r9, r0, r4
 80077f0:	d1e5      	bne.n	80077be <__cvt+0x6a>
 80077f2:	7803      	ldrb	r3, [r0, #0]
 80077f4:	2b30      	cmp	r3, #48	@ 0x30
 80077f6:	d10a      	bne.n	800780e <__cvt+0xba>
 80077f8:	2200      	movs	r2, #0
 80077fa:	2300      	movs	r3, #0
 80077fc:	4630      	mov	r0, r6
 80077fe:	4639      	mov	r1, r7
 8007800:	f7f9 f982 	bl	8000b08 <__aeabi_dcmpeq>
 8007804:	b918      	cbnz	r0, 800780e <__cvt+0xba>
 8007806:	f1c4 0401 	rsb	r4, r4, #1
 800780a:	f8ca 4000 	str.w	r4, [sl]
 800780e:	f8da 3000 	ldr.w	r3, [sl]
 8007812:	4499      	add	r9, r3
 8007814:	e7d3      	b.n	80077be <__cvt+0x6a>
 8007816:	1c59      	adds	r1, r3, #1
 8007818:	9103      	str	r1, [sp, #12]
 800781a:	701a      	strb	r2, [r3, #0]
 800781c:	e7d9      	b.n	80077d2 <__cvt+0x7e>

0800781e <__exponent>:
 800781e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007820:	2900      	cmp	r1, #0
 8007822:	bfba      	itte	lt
 8007824:	4249      	neglt	r1, r1
 8007826:	232d      	movlt	r3, #45	@ 0x2d
 8007828:	232b      	movge	r3, #43	@ 0x2b
 800782a:	2909      	cmp	r1, #9
 800782c:	7002      	strb	r2, [r0, #0]
 800782e:	7043      	strb	r3, [r0, #1]
 8007830:	dd29      	ble.n	8007886 <__exponent+0x68>
 8007832:	f10d 0307 	add.w	r3, sp, #7
 8007836:	461d      	mov	r5, r3
 8007838:	270a      	movs	r7, #10
 800783a:	461a      	mov	r2, r3
 800783c:	fbb1 f6f7 	udiv	r6, r1, r7
 8007840:	fb07 1416 	mls	r4, r7, r6, r1
 8007844:	3430      	adds	r4, #48	@ 0x30
 8007846:	f802 4c01 	strb.w	r4, [r2, #-1]
 800784a:	460c      	mov	r4, r1
 800784c:	2c63      	cmp	r4, #99	@ 0x63
 800784e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007852:	4631      	mov	r1, r6
 8007854:	dcf1      	bgt.n	800783a <__exponent+0x1c>
 8007856:	3130      	adds	r1, #48	@ 0x30
 8007858:	1e94      	subs	r4, r2, #2
 800785a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800785e:	1c41      	adds	r1, r0, #1
 8007860:	4623      	mov	r3, r4
 8007862:	42ab      	cmp	r3, r5
 8007864:	d30a      	bcc.n	800787c <__exponent+0x5e>
 8007866:	f10d 0309 	add.w	r3, sp, #9
 800786a:	1a9b      	subs	r3, r3, r2
 800786c:	42ac      	cmp	r4, r5
 800786e:	bf88      	it	hi
 8007870:	2300      	movhi	r3, #0
 8007872:	3302      	adds	r3, #2
 8007874:	4403      	add	r3, r0
 8007876:	1a18      	subs	r0, r3, r0
 8007878:	b003      	add	sp, #12
 800787a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800787c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007880:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007884:	e7ed      	b.n	8007862 <__exponent+0x44>
 8007886:	2330      	movs	r3, #48	@ 0x30
 8007888:	3130      	adds	r1, #48	@ 0x30
 800788a:	7083      	strb	r3, [r0, #2]
 800788c:	70c1      	strb	r1, [r0, #3]
 800788e:	1d03      	adds	r3, r0, #4
 8007890:	e7f1      	b.n	8007876 <__exponent+0x58>
	...

08007894 <_printf_float>:
 8007894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007898:	b08d      	sub	sp, #52	@ 0x34
 800789a:	460c      	mov	r4, r1
 800789c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80078a0:	4616      	mov	r6, r2
 80078a2:	461f      	mov	r7, r3
 80078a4:	4605      	mov	r5, r0
 80078a6:	f000 ffed 	bl	8008884 <_localeconv_r>
 80078aa:	6803      	ldr	r3, [r0, #0]
 80078ac:	9304      	str	r3, [sp, #16]
 80078ae:	4618      	mov	r0, r3
 80078b0:	f7f8 fcfe 	bl	80002b0 <strlen>
 80078b4:	2300      	movs	r3, #0
 80078b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80078b8:	f8d8 3000 	ldr.w	r3, [r8]
 80078bc:	9005      	str	r0, [sp, #20]
 80078be:	3307      	adds	r3, #7
 80078c0:	f023 0307 	bic.w	r3, r3, #7
 80078c4:	f103 0208 	add.w	r2, r3, #8
 80078c8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80078cc:	f8d4 b000 	ldr.w	fp, [r4]
 80078d0:	f8c8 2000 	str.w	r2, [r8]
 80078d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80078d8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80078dc:	9307      	str	r3, [sp, #28]
 80078de:	f8cd 8018 	str.w	r8, [sp, #24]
 80078e2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80078e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078ea:	4b9c      	ldr	r3, [pc, #624]	@ (8007b5c <_printf_float+0x2c8>)
 80078ec:	f04f 32ff 	mov.w	r2, #4294967295
 80078f0:	f7f9 f93c 	bl	8000b6c <__aeabi_dcmpun>
 80078f4:	bb70      	cbnz	r0, 8007954 <_printf_float+0xc0>
 80078f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078fa:	4b98      	ldr	r3, [pc, #608]	@ (8007b5c <_printf_float+0x2c8>)
 80078fc:	f04f 32ff 	mov.w	r2, #4294967295
 8007900:	f7f9 f916 	bl	8000b30 <__aeabi_dcmple>
 8007904:	bb30      	cbnz	r0, 8007954 <_printf_float+0xc0>
 8007906:	2200      	movs	r2, #0
 8007908:	2300      	movs	r3, #0
 800790a:	4640      	mov	r0, r8
 800790c:	4649      	mov	r1, r9
 800790e:	f7f9 f905 	bl	8000b1c <__aeabi_dcmplt>
 8007912:	b110      	cbz	r0, 800791a <_printf_float+0x86>
 8007914:	232d      	movs	r3, #45	@ 0x2d
 8007916:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800791a:	4a91      	ldr	r2, [pc, #580]	@ (8007b60 <_printf_float+0x2cc>)
 800791c:	4b91      	ldr	r3, [pc, #580]	@ (8007b64 <_printf_float+0x2d0>)
 800791e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007922:	bf8c      	ite	hi
 8007924:	4690      	movhi	r8, r2
 8007926:	4698      	movls	r8, r3
 8007928:	2303      	movs	r3, #3
 800792a:	6123      	str	r3, [r4, #16]
 800792c:	f02b 0304 	bic.w	r3, fp, #4
 8007930:	6023      	str	r3, [r4, #0]
 8007932:	f04f 0900 	mov.w	r9, #0
 8007936:	9700      	str	r7, [sp, #0]
 8007938:	4633      	mov	r3, r6
 800793a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800793c:	4621      	mov	r1, r4
 800793e:	4628      	mov	r0, r5
 8007940:	f000 f9d2 	bl	8007ce8 <_printf_common>
 8007944:	3001      	adds	r0, #1
 8007946:	f040 808d 	bne.w	8007a64 <_printf_float+0x1d0>
 800794a:	f04f 30ff 	mov.w	r0, #4294967295
 800794e:	b00d      	add	sp, #52	@ 0x34
 8007950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007954:	4642      	mov	r2, r8
 8007956:	464b      	mov	r3, r9
 8007958:	4640      	mov	r0, r8
 800795a:	4649      	mov	r1, r9
 800795c:	f7f9 f906 	bl	8000b6c <__aeabi_dcmpun>
 8007960:	b140      	cbz	r0, 8007974 <_printf_float+0xe0>
 8007962:	464b      	mov	r3, r9
 8007964:	2b00      	cmp	r3, #0
 8007966:	bfbc      	itt	lt
 8007968:	232d      	movlt	r3, #45	@ 0x2d
 800796a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800796e:	4a7e      	ldr	r2, [pc, #504]	@ (8007b68 <_printf_float+0x2d4>)
 8007970:	4b7e      	ldr	r3, [pc, #504]	@ (8007b6c <_printf_float+0x2d8>)
 8007972:	e7d4      	b.n	800791e <_printf_float+0x8a>
 8007974:	6863      	ldr	r3, [r4, #4]
 8007976:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800797a:	9206      	str	r2, [sp, #24]
 800797c:	1c5a      	adds	r2, r3, #1
 800797e:	d13b      	bne.n	80079f8 <_printf_float+0x164>
 8007980:	2306      	movs	r3, #6
 8007982:	6063      	str	r3, [r4, #4]
 8007984:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007988:	2300      	movs	r3, #0
 800798a:	6022      	str	r2, [r4, #0]
 800798c:	9303      	str	r3, [sp, #12]
 800798e:	ab0a      	add	r3, sp, #40	@ 0x28
 8007990:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007994:	ab09      	add	r3, sp, #36	@ 0x24
 8007996:	9300      	str	r3, [sp, #0]
 8007998:	6861      	ldr	r1, [r4, #4]
 800799a:	ec49 8b10 	vmov	d0, r8, r9
 800799e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80079a2:	4628      	mov	r0, r5
 80079a4:	f7ff fed6 	bl	8007754 <__cvt>
 80079a8:	9b06      	ldr	r3, [sp, #24]
 80079aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80079ac:	2b47      	cmp	r3, #71	@ 0x47
 80079ae:	4680      	mov	r8, r0
 80079b0:	d129      	bne.n	8007a06 <_printf_float+0x172>
 80079b2:	1cc8      	adds	r0, r1, #3
 80079b4:	db02      	blt.n	80079bc <_printf_float+0x128>
 80079b6:	6863      	ldr	r3, [r4, #4]
 80079b8:	4299      	cmp	r1, r3
 80079ba:	dd41      	ble.n	8007a40 <_printf_float+0x1ac>
 80079bc:	f1aa 0a02 	sub.w	sl, sl, #2
 80079c0:	fa5f fa8a 	uxtb.w	sl, sl
 80079c4:	3901      	subs	r1, #1
 80079c6:	4652      	mov	r2, sl
 80079c8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80079cc:	9109      	str	r1, [sp, #36]	@ 0x24
 80079ce:	f7ff ff26 	bl	800781e <__exponent>
 80079d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80079d4:	1813      	adds	r3, r2, r0
 80079d6:	2a01      	cmp	r2, #1
 80079d8:	4681      	mov	r9, r0
 80079da:	6123      	str	r3, [r4, #16]
 80079dc:	dc02      	bgt.n	80079e4 <_printf_float+0x150>
 80079de:	6822      	ldr	r2, [r4, #0]
 80079e0:	07d2      	lsls	r2, r2, #31
 80079e2:	d501      	bpl.n	80079e8 <_printf_float+0x154>
 80079e4:	3301      	adds	r3, #1
 80079e6:	6123      	str	r3, [r4, #16]
 80079e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d0a2      	beq.n	8007936 <_printf_float+0xa2>
 80079f0:	232d      	movs	r3, #45	@ 0x2d
 80079f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079f6:	e79e      	b.n	8007936 <_printf_float+0xa2>
 80079f8:	9a06      	ldr	r2, [sp, #24]
 80079fa:	2a47      	cmp	r2, #71	@ 0x47
 80079fc:	d1c2      	bne.n	8007984 <_printf_float+0xf0>
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d1c0      	bne.n	8007984 <_printf_float+0xf0>
 8007a02:	2301      	movs	r3, #1
 8007a04:	e7bd      	b.n	8007982 <_printf_float+0xee>
 8007a06:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007a0a:	d9db      	bls.n	80079c4 <_printf_float+0x130>
 8007a0c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007a10:	d118      	bne.n	8007a44 <_printf_float+0x1b0>
 8007a12:	2900      	cmp	r1, #0
 8007a14:	6863      	ldr	r3, [r4, #4]
 8007a16:	dd0b      	ble.n	8007a30 <_printf_float+0x19c>
 8007a18:	6121      	str	r1, [r4, #16]
 8007a1a:	b913      	cbnz	r3, 8007a22 <_printf_float+0x18e>
 8007a1c:	6822      	ldr	r2, [r4, #0]
 8007a1e:	07d0      	lsls	r0, r2, #31
 8007a20:	d502      	bpl.n	8007a28 <_printf_float+0x194>
 8007a22:	3301      	adds	r3, #1
 8007a24:	440b      	add	r3, r1
 8007a26:	6123      	str	r3, [r4, #16]
 8007a28:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007a2a:	f04f 0900 	mov.w	r9, #0
 8007a2e:	e7db      	b.n	80079e8 <_printf_float+0x154>
 8007a30:	b913      	cbnz	r3, 8007a38 <_printf_float+0x1a4>
 8007a32:	6822      	ldr	r2, [r4, #0]
 8007a34:	07d2      	lsls	r2, r2, #31
 8007a36:	d501      	bpl.n	8007a3c <_printf_float+0x1a8>
 8007a38:	3302      	adds	r3, #2
 8007a3a:	e7f4      	b.n	8007a26 <_printf_float+0x192>
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	e7f2      	b.n	8007a26 <_printf_float+0x192>
 8007a40:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007a44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a46:	4299      	cmp	r1, r3
 8007a48:	db05      	blt.n	8007a56 <_printf_float+0x1c2>
 8007a4a:	6823      	ldr	r3, [r4, #0]
 8007a4c:	6121      	str	r1, [r4, #16]
 8007a4e:	07d8      	lsls	r0, r3, #31
 8007a50:	d5ea      	bpl.n	8007a28 <_printf_float+0x194>
 8007a52:	1c4b      	adds	r3, r1, #1
 8007a54:	e7e7      	b.n	8007a26 <_printf_float+0x192>
 8007a56:	2900      	cmp	r1, #0
 8007a58:	bfd4      	ite	le
 8007a5a:	f1c1 0202 	rsble	r2, r1, #2
 8007a5e:	2201      	movgt	r2, #1
 8007a60:	4413      	add	r3, r2
 8007a62:	e7e0      	b.n	8007a26 <_printf_float+0x192>
 8007a64:	6823      	ldr	r3, [r4, #0]
 8007a66:	055a      	lsls	r2, r3, #21
 8007a68:	d407      	bmi.n	8007a7a <_printf_float+0x1e6>
 8007a6a:	6923      	ldr	r3, [r4, #16]
 8007a6c:	4642      	mov	r2, r8
 8007a6e:	4631      	mov	r1, r6
 8007a70:	4628      	mov	r0, r5
 8007a72:	47b8      	blx	r7
 8007a74:	3001      	adds	r0, #1
 8007a76:	d12b      	bne.n	8007ad0 <_printf_float+0x23c>
 8007a78:	e767      	b.n	800794a <_printf_float+0xb6>
 8007a7a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007a7e:	f240 80dd 	bls.w	8007c3c <_printf_float+0x3a8>
 8007a82:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007a86:	2200      	movs	r2, #0
 8007a88:	2300      	movs	r3, #0
 8007a8a:	f7f9 f83d 	bl	8000b08 <__aeabi_dcmpeq>
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	d033      	beq.n	8007afa <_printf_float+0x266>
 8007a92:	4a37      	ldr	r2, [pc, #220]	@ (8007b70 <_printf_float+0x2dc>)
 8007a94:	2301      	movs	r3, #1
 8007a96:	4631      	mov	r1, r6
 8007a98:	4628      	mov	r0, r5
 8007a9a:	47b8      	blx	r7
 8007a9c:	3001      	adds	r0, #1
 8007a9e:	f43f af54 	beq.w	800794a <_printf_float+0xb6>
 8007aa2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007aa6:	4543      	cmp	r3, r8
 8007aa8:	db02      	blt.n	8007ab0 <_printf_float+0x21c>
 8007aaa:	6823      	ldr	r3, [r4, #0]
 8007aac:	07d8      	lsls	r0, r3, #31
 8007aae:	d50f      	bpl.n	8007ad0 <_printf_float+0x23c>
 8007ab0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ab4:	4631      	mov	r1, r6
 8007ab6:	4628      	mov	r0, r5
 8007ab8:	47b8      	blx	r7
 8007aba:	3001      	adds	r0, #1
 8007abc:	f43f af45 	beq.w	800794a <_printf_float+0xb6>
 8007ac0:	f04f 0900 	mov.w	r9, #0
 8007ac4:	f108 38ff 	add.w	r8, r8, #4294967295
 8007ac8:	f104 0a1a 	add.w	sl, r4, #26
 8007acc:	45c8      	cmp	r8, r9
 8007ace:	dc09      	bgt.n	8007ae4 <_printf_float+0x250>
 8007ad0:	6823      	ldr	r3, [r4, #0]
 8007ad2:	079b      	lsls	r3, r3, #30
 8007ad4:	f100 8103 	bmi.w	8007cde <_printf_float+0x44a>
 8007ad8:	68e0      	ldr	r0, [r4, #12]
 8007ada:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007adc:	4298      	cmp	r0, r3
 8007ade:	bfb8      	it	lt
 8007ae0:	4618      	movlt	r0, r3
 8007ae2:	e734      	b.n	800794e <_printf_float+0xba>
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	4652      	mov	r2, sl
 8007ae8:	4631      	mov	r1, r6
 8007aea:	4628      	mov	r0, r5
 8007aec:	47b8      	blx	r7
 8007aee:	3001      	adds	r0, #1
 8007af0:	f43f af2b 	beq.w	800794a <_printf_float+0xb6>
 8007af4:	f109 0901 	add.w	r9, r9, #1
 8007af8:	e7e8      	b.n	8007acc <_printf_float+0x238>
 8007afa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	dc39      	bgt.n	8007b74 <_printf_float+0x2e0>
 8007b00:	4a1b      	ldr	r2, [pc, #108]	@ (8007b70 <_printf_float+0x2dc>)
 8007b02:	2301      	movs	r3, #1
 8007b04:	4631      	mov	r1, r6
 8007b06:	4628      	mov	r0, r5
 8007b08:	47b8      	blx	r7
 8007b0a:	3001      	adds	r0, #1
 8007b0c:	f43f af1d 	beq.w	800794a <_printf_float+0xb6>
 8007b10:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007b14:	ea59 0303 	orrs.w	r3, r9, r3
 8007b18:	d102      	bne.n	8007b20 <_printf_float+0x28c>
 8007b1a:	6823      	ldr	r3, [r4, #0]
 8007b1c:	07d9      	lsls	r1, r3, #31
 8007b1e:	d5d7      	bpl.n	8007ad0 <_printf_float+0x23c>
 8007b20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b24:	4631      	mov	r1, r6
 8007b26:	4628      	mov	r0, r5
 8007b28:	47b8      	blx	r7
 8007b2a:	3001      	adds	r0, #1
 8007b2c:	f43f af0d 	beq.w	800794a <_printf_float+0xb6>
 8007b30:	f04f 0a00 	mov.w	sl, #0
 8007b34:	f104 0b1a 	add.w	fp, r4, #26
 8007b38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b3a:	425b      	negs	r3, r3
 8007b3c:	4553      	cmp	r3, sl
 8007b3e:	dc01      	bgt.n	8007b44 <_printf_float+0x2b0>
 8007b40:	464b      	mov	r3, r9
 8007b42:	e793      	b.n	8007a6c <_printf_float+0x1d8>
 8007b44:	2301      	movs	r3, #1
 8007b46:	465a      	mov	r2, fp
 8007b48:	4631      	mov	r1, r6
 8007b4a:	4628      	mov	r0, r5
 8007b4c:	47b8      	blx	r7
 8007b4e:	3001      	adds	r0, #1
 8007b50:	f43f aefb 	beq.w	800794a <_printf_float+0xb6>
 8007b54:	f10a 0a01 	add.w	sl, sl, #1
 8007b58:	e7ee      	b.n	8007b38 <_printf_float+0x2a4>
 8007b5a:	bf00      	nop
 8007b5c:	7fefffff 	.word	0x7fefffff
 8007b60:	0800c1d4 	.word	0x0800c1d4
 8007b64:	0800c1d0 	.word	0x0800c1d0
 8007b68:	0800c1dc 	.word	0x0800c1dc
 8007b6c:	0800c1d8 	.word	0x0800c1d8
 8007b70:	0800c1e0 	.word	0x0800c1e0
 8007b74:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007b76:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007b7a:	4553      	cmp	r3, sl
 8007b7c:	bfa8      	it	ge
 8007b7e:	4653      	movge	r3, sl
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	4699      	mov	r9, r3
 8007b84:	dc36      	bgt.n	8007bf4 <_printf_float+0x360>
 8007b86:	f04f 0b00 	mov.w	fp, #0
 8007b8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b8e:	f104 021a 	add.w	r2, r4, #26
 8007b92:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007b94:	9306      	str	r3, [sp, #24]
 8007b96:	eba3 0309 	sub.w	r3, r3, r9
 8007b9a:	455b      	cmp	r3, fp
 8007b9c:	dc31      	bgt.n	8007c02 <_printf_float+0x36e>
 8007b9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ba0:	459a      	cmp	sl, r3
 8007ba2:	dc3a      	bgt.n	8007c1a <_printf_float+0x386>
 8007ba4:	6823      	ldr	r3, [r4, #0]
 8007ba6:	07da      	lsls	r2, r3, #31
 8007ba8:	d437      	bmi.n	8007c1a <_printf_float+0x386>
 8007baa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bac:	ebaa 0903 	sub.w	r9, sl, r3
 8007bb0:	9b06      	ldr	r3, [sp, #24]
 8007bb2:	ebaa 0303 	sub.w	r3, sl, r3
 8007bb6:	4599      	cmp	r9, r3
 8007bb8:	bfa8      	it	ge
 8007bba:	4699      	movge	r9, r3
 8007bbc:	f1b9 0f00 	cmp.w	r9, #0
 8007bc0:	dc33      	bgt.n	8007c2a <_printf_float+0x396>
 8007bc2:	f04f 0800 	mov.w	r8, #0
 8007bc6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007bca:	f104 0b1a 	add.w	fp, r4, #26
 8007bce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bd0:	ebaa 0303 	sub.w	r3, sl, r3
 8007bd4:	eba3 0309 	sub.w	r3, r3, r9
 8007bd8:	4543      	cmp	r3, r8
 8007bda:	f77f af79 	ble.w	8007ad0 <_printf_float+0x23c>
 8007bde:	2301      	movs	r3, #1
 8007be0:	465a      	mov	r2, fp
 8007be2:	4631      	mov	r1, r6
 8007be4:	4628      	mov	r0, r5
 8007be6:	47b8      	blx	r7
 8007be8:	3001      	adds	r0, #1
 8007bea:	f43f aeae 	beq.w	800794a <_printf_float+0xb6>
 8007bee:	f108 0801 	add.w	r8, r8, #1
 8007bf2:	e7ec      	b.n	8007bce <_printf_float+0x33a>
 8007bf4:	4642      	mov	r2, r8
 8007bf6:	4631      	mov	r1, r6
 8007bf8:	4628      	mov	r0, r5
 8007bfa:	47b8      	blx	r7
 8007bfc:	3001      	adds	r0, #1
 8007bfe:	d1c2      	bne.n	8007b86 <_printf_float+0x2f2>
 8007c00:	e6a3      	b.n	800794a <_printf_float+0xb6>
 8007c02:	2301      	movs	r3, #1
 8007c04:	4631      	mov	r1, r6
 8007c06:	4628      	mov	r0, r5
 8007c08:	9206      	str	r2, [sp, #24]
 8007c0a:	47b8      	blx	r7
 8007c0c:	3001      	adds	r0, #1
 8007c0e:	f43f ae9c 	beq.w	800794a <_printf_float+0xb6>
 8007c12:	9a06      	ldr	r2, [sp, #24]
 8007c14:	f10b 0b01 	add.w	fp, fp, #1
 8007c18:	e7bb      	b.n	8007b92 <_printf_float+0x2fe>
 8007c1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c1e:	4631      	mov	r1, r6
 8007c20:	4628      	mov	r0, r5
 8007c22:	47b8      	blx	r7
 8007c24:	3001      	adds	r0, #1
 8007c26:	d1c0      	bne.n	8007baa <_printf_float+0x316>
 8007c28:	e68f      	b.n	800794a <_printf_float+0xb6>
 8007c2a:	9a06      	ldr	r2, [sp, #24]
 8007c2c:	464b      	mov	r3, r9
 8007c2e:	4442      	add	r2, r8
 8007c30:	4631      	mov	r1, r6
 8007c32:	4628      	mov	r0, r5
 8007c34:	47b8      	blx	r7
 8007c36:	3001      	adds	r0, #1
 8007c38:	d1c3      	bne.n	8007bc2 <_printf_float+0x32e>
 8007c3a:	e686      	b.n	800794a <_printf_float+0xb6>
 8007c3c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007c40:	f1ba 0f01 	cmp.w	sl, #1
 8007c44:	dc01      	bgt.n	8007c4a <_printf_float+0x3b6>
 8007c46:	07db      	lsls	r3, r3, #31
 8007c48:	d536      	bpl.n	8007cb8 <_printf_float+0x424>
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	4642      	mov	r2, r8
 8007c4e:	4631      	mov	r1, r6
 8007c50:	4628      	mov	r0, r5
 8007c52:	47b8      	blx	r7
 8007c54:	3001      	adds	r0, #1
 8007c56:	f43f ae78 	beq.w	800794a <_printf_float+0xb6>
 8007c5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c5e:	4631      	mov	r1, r6
 8007c60:	4628      	mov	r0, r5
 8007c62:	47b8      	blx	r7
 8007c64:	3001      	adds	r0, #1
 8007c66:	f43f ae70 	beq.w	800794a <_printf_float+0xb6>
 8007c6a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007c6e:	2200      	movs	r2, #0
 8007c70:	2300      	movs	r3, #0
 8007c72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c76:	f7f8 ff47 	bl	8000b08 <__aeabi_dcmpeq>
 8007c7a:	b9c0      	cbnz	r0, 8007cae <_printf_float+0x41a>
 8007c7c:	4653      	mov	r3, sl
 8007c7e:	f108 0201 	add.w	r2, r8, #1
 8007c82:	4631      	mov	r1, r6
 8007c84:	4628      	mov	r0, r5
 8007c86:	47b8      	blx	r7
 8007c88:	3001      	adds	r0, #1
 8007c8a:	d10c      	bne.n	8007ca6 <_printf_float+0x412>
 8007c8c:	e65d      	b.n	800794a <_printf_float+0xb6>
 8007c8e:	2301      	movs	r3, #1
 8007c90:	465a      	mov	r2, fp
 8007c92:	4631      	mov	r1, r6
 8007c94:	4628      	mov	r0, r5
 8007c96:	47b8      	blx	r7
 8007c98:	3001      	adds	r0, #1
 8007c9a:	f43f ae56 	beq.w	800794a <_printf_float+0xb6>
 8007c9e:	f108 0801 	add.w	r8, r8, #1
 8007ca2:	45d0      	cmp	r8, sl
 8007ca4:	dbf3      	blt.n	8007c8e <_printf_float+0x3fa>
 8007ca6:	464b      	mov	r3, r9
 8007ca8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007cac:	e6df      	b.n	8007a6e <_printf_float+0x1da>
 8007cae:	f04f 0800 	mov.w	r8, #0
 8007cb2:	f104 0b1a 	add.w	fp, r4, #26
 8007cb6:	e7f4      	b.n	8007ca2 <_printf_float+0x40e>
 8007cb8:	2301      	movs	r3, #1
 8007cba:	4642      	mov	r2, r8
 8007cbc:	e7e1      	b.n	8007c82 <_printf_float+0x3ee>
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	464a      	mov	r2, r9
 8007cc2:	4631      	mov	r1, r6
 8007cc4:	4628      	mov	r0, r5
 8007cc6:	47b8      	blx	r7
 8007cc8:	3001      	adds	r0, #1
 8007cca:	f43f ae3e 	beq.w	800794a <_printf_float+0xb6>
 8007cce:	f108 0801 	add.w	r8, r8, #1
 8007cd2:	68e3      	ldr	r3, [r4, #12]
 8007cd4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007cd6:	1a5b      	subs	r3, r3, r1
 8007cd8:	4543      	cmp	r3, r8
 8007cda:	dcf0      	bgt.n	8007cbe <_printf_float+0x42a>
 8007cdc:	e6fc      	b.n	8007ad8 <_printf_float+0x244>
 8007cde:	f04f 0800 	mov.w	r8, #0
 8007ce2:	f104 0919 	add.w	r9, r4, #25
 8007ce6:	e7f4      	b.n	8007cd2 <_printf_float+0x43e>

08007ce8 <_printf_common>:
 8007ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cec:	4616      	mov	r6, r2
 8007cee:	4698      	mov	r8, r3
 8007cf0:	688a      	ldr	r2, [r1, #8]
 8007cf2:	690b      	ldr	r3, [r1, #16]
 8007cf4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	bfb8      	it	lt
 8007cfc:	4613      	movlt	r3, r2
 8007cfe:	6033      	str	r3, [r6, #0]
 8007d00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007d04:	4607      	mov	r7, r0
 8007d06:	460c      	mov	r4, r1
 8007d08:	b10a      	cbz	r2, 8007d0e <_printf_common+0x26>
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	6033      	str	r3, [r6, #0]
 8007d0e:	6823      	ldr	r3, [r4, #0]
 8007d10:	0699      	lsls	r1, r3, #26
 8007d12:	bf42      	ittt	mi
 8007d14:	6833      	ldrmi	r3, [r6, #0]
 8007d16:	3302      	addmi	r3, #2
 8007d18:	6033      	strmi	r3, [r6, #0]
 8007d1a:	6825      	ldr	r5, [r4, #0]
 8007d1c:	f015 0506 	ands.w	r5, r5, #6
 8007d20:	d106      	bne.n	8007d30 <_printf_common+0x48>
 8007d22:	f104 0a19 	add.w	sl, r4, #25
 8007d26:	68e3      	ldr	r3, [r4, #12]
 8007d28:	6832      	ldr	r2, [r6, #0]
 8007d2a:	1a9b      	subs	r3, r3, r2
 8007d2c:	42ab      	cmp	r3, r5
 8007d2e:	dc26      	bgt.n	8007d7e <_printf_common+0x96>
 8007d30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007d34:	6822      	ldr	r2, [r4, #0]
 8007d36:	3b00      	subs	r3, #0
 8007d38:	bf18      	it	ne
 8007d3a:	2301      	movne	r3, #1
 8007d3c:	0692      	lsls	r2, r2, #26
 8007d3e:	d42b      	bmi.n	8007d98 <_printf_common+0xb0>
 8007d40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007d44:	4641      	mov	r1, r8
 8007d46:	4638      	mov	r0, r7
 8007d48:	47c8      	blx	r9
 8007d4a:	3001      	adds	r0, #1
 8007d4c:	d01e      	beq.n	8007d8c <_printf_common+0xa4>
 8007d4e:	6823      	ldr	r3, [r4, #0]
 8007d50:	6922      	ldr	r2, [r4, #16]
 8007d52:	f003 0306 	and.w	r3, r3, #6
 8007d56:	2b04      	cmp	r3, #4
 8007d58:	bf02      	ittt	eq
 8007d5a:	68e5      	ldreq	r5, [r4, #12]
 8007d5c:	6833      	ldreq	r3, [r6, #0]
 8007d5e:	1aed      	subeq	r5, r5, r3
 8007d60:	68a3      	ldr	r3, [r4, #8]
 8007d62:	bf0c      	ite	eq
 8007d64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d68:	2500      	movne	r5, #0
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	bfc4      	itt	gt
 8007d6e:	1a9b      	subgt	r3, r3, r2
 8007d70:	18ed      	addgt	r5, r5, r3
 8007d72:	2600      	movs	r6, #0
 8007d74:	341a      	adds	r4, #26
 8007d76:	42b5      	cmp	r5, r6
 8007d78:	d11a      	bne.n	8007db0 <_printf_common+0xc8>
 8007d7a:	2000      	movs	r0, #0
 8007d7c:	e008      	b.n	8007d90 <_printf_common+0xa8>
 8007d7e:	2301      	movs	r3, #1
 8007d80:	4652      	mov	r2, sl
 8007d82:	4641      	mov	r1, r8
 8007d84:	4638      	mov	r0, r7
 8007d86:	47c8      	blx	r9
 8007d88:	3001      	adds	r0, #1
 8007d8a:	d103      	bne.n	8007d94 <_printf_common+0xac>
 8007d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d94:	3501      	adds	r5, #1
 8007d96:	e7c6      	b.n	8007d26 <_printf_common+0x3e>
 8007d98:	18e1      	adds	r1, r4, r3
 8007d9a:	1c5a      	adds	r2, r3, #1
 8007d9c:	2030      	movs	r0, #48	@ 0x30
 8007d9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007da2:	4422      	add	r2, r4
 8007da4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007da8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007dac:	3302      	adds	r3, #2
 8007dae:	e7c7      	b.n	8007d40 <_printf_common+0x58>
 8007db0:	2301      	movs	r3, #1
 8007db2:	4622      	mov	r2, r4
 8007db4:	4641      	mov	r1, r8
 8007db6:	4638      	mov	r0, r7
 8007db8:	47c8      	blx	r9
 8007dba:	3001      	adds	r0, #1
 8007dbc:	d0e6      	beq.n	8007d8c <_printf_common+0xa4>
 8007dbe:	3601      	adds	r6, #1
 8007dc0:	e7d9      	b.n	8007d76 <_printf_common+0x8e>
	...

08007dc4 <_printf_i>:
 8007dc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007dc8:	7e0f      	ldrb	r7, [r1, #24]
 8007dca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007dcc:	2f78      	cmp	r7, #120	@ 0x78
 8007dce:	4691      	mov	r9, r2
 8007dd0:	4680      	mov	r8, r0
 8007dd2:	460c      	mov	r4, r1
 8007dd4:	469a      	mov	sl, r3
 8007dd6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007dda:	d807      	bhi.n	8007dec <_printf_i+0x28>
 8007ddc:	2f62      	cmp	r7, #98	@ 0x62
 8007dde:	d80a      	bhi.n	8007df6 <_printf_i+0x32>
 8007de0:	2f00      	cmp	r7, #0
 8007de2:	f000 80d1 	beq.w	8007f88 <_printf_i+0x1c4>
 8007de6:	2f58      	cmp	r7, #88	@ 0x58
 8007de8:	f000 80b8 	beq.w	8007f5c <_printf_i+0x198>
 8007dec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007df0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007df4:	e03a      	b.n	8007e6c <_printf_i+0xa8>
 8007df6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007dfa:	2b15      	cmp	r3, #21
 8007dfc:	d8f6      	bhi.n	8007dec <_printf_i+0x28>
 8007dfe:	a101      	add	r1, pc, #4	@ (adr r1, 8007e04 <_printf_i+0x40>)
 8007e00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e04:	08007e5d 	.word	0x08007e5d
 8007e08:	08007e71 	.word	0x08007e71
 8007e0c:	08007ded 	.word	0x08007ded
 8007e10:	08007ded 	.word	0x08007ded
 8007e14:	08007ded 	.word	0x08007ded
 8007e18:	08007ded 	.word	0x08007ded
 8007e1c:	08007e71 	.word	0x08007e71
 8007e20:	08007ded 	.word	0x08007ded
 8007e24:	08007ded 	.word	0x08007ded
 8007e28:	08007ded 	.word	0x08007ded
 8007e2c:	08007ded 	.word	0x08007ded
 8007e30:	08007f6f 	.word	0x08007f6f
 8007e34:	08007e9b 	.word	0x08007e9b
 8007e38:	08007f29 	.word	0x08007f29
 8007e3c:	08007ded 	.word	0x08007ded
 8007e40:	08007ded 	.word	0x08007ded
 8007e44:	08007f91 	.word	0x08007f91
 8007e48:	08007ded 	.word	0x08007ded
 8007e4c:	08007e9b 	.word	0x08007e9b
 8007e50:	08007ded 	.word	0x08007ded
 8007e54:	08007ded 	.word	0x08007ded
 8007e58:	08007f31 	.word	0x08007f31
 8007e5c:	6833      	ldr	r3, [r6, #0]
 8007e5e:	1d1a      	adds	r2, r3, #4
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	6032      	str	r2, [r6, #0]
 8007e64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e09c      	b.n	8007faa <_printf_i+0x1e6>
 8007e70:	6833      	ldr	r3, [r6, #0]
 8007e72:	6820      	ldr	r0, [r4, #0]
 8007e74:	1d19      	adds	r1, r3, #4
 8007e76:	6031      	str	r1, [r6, #0]
 8007e78:	0606      	lsls	r6, r0, #24
 8007e7a:	d501      	bpl.n	8007e80 <_printf_i+0xbc>
 8007e7c:	681d      	ldr	r5, [r3, #0]
 8007e7e:	e003      	b.n	8007e88 <_printf_i+0xc4>
 8007e80:	0645      	lsls	r5, r0, #25
 8007e82:	d5fb      	bpl.n	8007e7c <_printf_i+0xb8>
 8007e84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007e88:	2d00      	cmp	r5, #0
 8007e8a:	da03      	bge.n	8007e94 <_printf_i+0xd0>
 8007e8c:	232d      	movs	r3, #45	@ 0x2d
 8007e8e:	426d      	negs	r5, r5
 8007e90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e94:	4858      	ldr	r0, [pc, #352]	@ (8007ff8 <_printf_i+0x234>)
 8007e96:	230a      	movs	r3, #10
 8007e98:	e011      	b.n	8007ebe <_printf_i+0xfa>
 8007e9a:	6821      	ldr	r1, [r4, #0]
 8007e9c:	6833      	ldr	r3, [r6, #0]
 8007e9e:	0608      	lsls	r0, r1, #24
 8007ea0:	f853 5b04 	ldr.w	r5, [r3], #4
 8007ea4:	d402      	bmi.n	8007eac <_printf_i+0xe8>
 8007ea6:	0649      	lsls	r1, r1, #25
 8007ea8:	bf48      	it	mi
 8007eaa:	b2ad      	uxthmi	r5, r5
 8007eac:	2f6f      	cmp	r7, #111	@ 0x6f
 8007eae:	4852      	ldr	r0, [pc, #328]	@ (8007ff8 <_printf_i+0x234>)
 8007eb0:	6033      	str	r3, [r6, #0]
 8007eb2:	bf14      	ite	ne
 8007eb4:	230a      	movne	r3, #10
 8007eb6:	2308      	moveq	r3, #8
 8007eb8:	2100      	movs	r1, #0
 8007eba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007ebe:	6866      	ldr	r6, [r4, #4]
 8007ec0:	60a6      	str	r6, [r4, #8]
 8007ec2:	2e00      	cmp	r6, #0
 8007ec4:	db05      	blt.n	8007ed2 <_printf_i+0x10e>
 8007ec6:	6821      	ldr	r1, [r4, #0]
 8007ec8:	432e      	orrs	r6, r5
 8007eca:	f021 0104 	bic.w	r1, r1, #4
 8007ece:	6021      	str	r1, [r4, #0]
 8007ed0:	d04b      	beq.n	8007f6a <_printf_i+0x1a6>
 8007ed2:	4616      	mov	r6, r2
 8007ed4:	fbb5 f1f3 	udiv	r1, r5, r3
 8007ed8:	fb03 5711 	mls	r7, r3, r1, r5
 8007edc:	5dc7      	ldrb	r7, [r0, r7]
 8007ede:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007ee2:	462f      	mov	r7, r5
 8007ee4:	42bb      	cmp	r3, r7
 8007ee6:	460d      	mov	r5, r1
 8007ee8:	d9f4      	bls.n	8007ed4 <_printf_i+0x110>
 8007eea:	2b08      	cmp	r3, #8
 8007eec:	d10b      	bne.n	8007f06 <_printf_i+0x142>
 8007eee:	6823      	ldr	r3, [r4, #0]
 8007ef0:	07df      	lsls	r7, r3, #31
 8007ef2:	d508      	bpl.n	8007f06 <_printf_i+0x142>
 8007ef4:	6923      	ldr	r3, [r4, #16]
 8007ef6:	6861      	ldr	r1, [r4, #4]
 8007ef8:	4299      	cmp	r1, r3
 8007efa:	bfde      	ittt	le
 8007efc:	2330      	movle	r3, #48	@ 0x30
 8007efe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007f02:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007f06:	1b92      	subs	r2, r2, r6
 8007f08:	6122      	str	r2, [r4, #16]
 8007f0a:	f8cd a000 	str.w	sl, [sp]
 8007f0e:	464b      	mov	r3, r9
 8007f10:	aa03      	add	r2, sp, #12
 8007f12:	4621      	mov	r1, r4
 8007f14:	4640      	mov	r0, r8
 8007f16:	f7ff fee7 	bl	8007ce8 <_printf_common>
 8007f1a:	3001      	adds	r0, #1
 8007f1c:	d14a      	bne.n	8007fb4 <_printf_i+0x1f0>
 8007f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8007f22:	b004      	add	sp, #16
 8007f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f28:	6823      	ldr	r3, [r4, #0]
 8007f2a:	f043 0320 	orr.w	r3, r3, #32
 8007f2e:	6023      	str	r3, [r4, #0]
 8007f30:	4832      	ldr	r0, [pc, #200]	@ (8007ffc <_printf_i+0x238>)
 8007f32:	2778      	movs	r7, #120	@ 0x78
 8007f34:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007f38:	6823      	ldr	r3, [r4, #0]
 8007f3a:	6831      	ldr	r1, [r6, #0]
 8007f3c:	061f      	lsls	r7, r3, #24
 8007f3e:	f851 5b04 	ldr.w	r5, [r1], #4
 8007f42:	d402      	bmi.n	8007f4a <_printf_i+0x186>
 8007f44:	065f      	lsls	r7, r3, #25
 8007f46:	bf48      	it	mi
 8007f48:	b2ad      	uxthmi	r5, r5
 8007f4a:	6031      	str	r1, [r6, #0]
 8007f4c:	07d9      	lsls	r1, r3, #31
 8007f4e:	bf44      	itt	mi
 8007f50:	f043 0320 	orrmi.w	r3, r3, #32
 8007f54:	6023      	strmi	r3, [r4, #0]
 8007f56:	b11d      	cbz	r5, 8007f60 <_printf_i+0x19c>
 8007f58:	2310      	movs	r3, #16
 8007f5a:	e7ad      	b.n	8007eb8 <_printf_i+0xf4>
 8007f5c:	4826      	ldr	r0, [pc, #152]	@ (8007ff8 <_printf_i+0x234>)
 8007f5e:	e7e9      	b.n	8007f34 <_printf_i+0x170>
 8007f60:	6823      	ldr	r3, [r4, #0]
 8007f62:	f023 0320 	bic.w	r3, r3, #32
 8007f66:	6023      	str	r3, [r4, #0]
 8007f68:	e7f6      	b.n	8007f58 <_printf_i+0x194>
 8007f6a:	4616      	mov	r6, r2
 8007f6c:	e7bd      	b.n	8007eea <_printf_i+0x126>
 8007f6e:	6833      	ldr	r3, [r6, #0]
 8007f70:	6825      	ldr	r5, [r4, #0]
 8007f72:	6961      	ldr	r1, [r4, #20]
 8007f74:	1d18      	adds	r0, r3, #4
 8007f76:	6030      	str	r0, [r6, #0]
 8007f78:	062e      	lsls	r6, r5, #24
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	d501      	bpl.n	8007f82 <_printf_i+0x1be>
 8007f7e:	6019      	str	r1, [r3, #0]
 8007f80:	e002      	b.n	8007f88 <_printf_i+0x1c4>
 8007f82:	0668      	lsls	r0, r5, #25
 8007f84:	d5fb      	bpl.n	8007f7e <_printf_i+0x1ba>
 8007f86:	8019      	strh	r1, [r3, #0]
 8007f88:	2300      	movs	r3, #0
 8007f8a:	6123      	str	r3, [r4, #16]
 8007f8c:	4616      	mov	r6, r2
 8007f8e:	e7bc      	b.n	8007f0a <_printf_i+0x146>
 8007f90:	6833      	ldr	r3, [r6, #0]
 8007f92:	1d1a      	adds	r2, r3, #4
 8007f94:	6032      	str	r2, [r6, #0]
 8007f96:	681e      	ldr	r6, [r3, #0]
 8007f98:	6862      	ldr	r2, [r4, #4]
 8007f9a:	2100      	movs	r1, #0
 8007f9c:	4630      	mov	r0, r6
 8007f9e:	f7f8 f937 	bl	8000210 <memchr>
 8007fa2:	b108      	cbz	r0, 8007fa8 <_printf_i+0x1e4>
 8007fa4:	1b80      	subs	r0, r0, r6
 8007fa6:	6060      	str	r0, [r4, #4]
 8007fa8:	6863      	ldr	r3, [r4, #4]
 8007faa:	6123      	str	r3, [r4, #16]
 8007fac:	2300      	movs	r3, #0
 8007fae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007fb2:	e7aa      	b.n	8007f0a <_printf_i+0x146>
 8007fb4:	6923      	ldr	r3, [r4, #16]
 8007fb6:	4632      	mov	r2, r6
 8007fb8:	4649      	mov	r1, r9
 8007fba:	4640      	mov	r0, r8
 8007fbc:	47d0      	blx	sl
 8007fbe:	3001      	adds	r0, #1
 8007fc0:	d0ad      	beq.n	8007f1e <_printf_i+0x15a>
 8007fc2:	6823      	ldr	r3, [r4, #0]
 8007fc4:	079b      	lsls	r3, r3, #30
 8007fc6:	d413      	bmi.n	8007ff0 <_printf_i+0x22c>
 8007fc8:	68e0      	ldr	r0, [r4, #12]
 8007fca:	9b03      	ldr	r3, [sp, #12]
 8007fcc:	4298      	cmp	r0, r3
 8007fce:	bfb8      	it	lt
 8007fd0:	4618      	movlt	r0, r3
 8007fd2:	e7a6      	b.n	8007f22 <_printf_i+0x15e>
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	4632      	mov	r2, r6
 8007fd8:	4649      	mov	r1, r9
 8007fda:	4640      	mov	r0, r8
 8007fdc:	47d0      	blx	sl
 8007fde:	3001      	adds	r0, #1
 8007fe0:	d09d      	beq.n	8007f1e <_printf_i+0x15a>
 8007fe2:	3501      	adds	r5, #1
 8007fe4:	68e3      	ldr	r3, [r4, #12]
 8007fe6:	9903      	ldr	r1, [sp, #12]
 8007fe8:	1a5b      	subs	r3, r3, r1
 8007fea:	42ab      	cmp	r3, r5
 8007fec:	dcf2      	bgt.n	8007fd4 <_printf_i+0x210>
 8007fee:	e7eb      	b.n	8007fc8 <_printf_i+0x204>
 8007ff0:	2500      	movs	r5, #0
 8007ff2:	f104 0619 	add.w	r6, r4, #25
 8007ff6:	e7f5      	b.n	8007fe4 <_printf_i+0x220>
 8007ff8:	0800c1e2 	.word	0x0800c1e2
 8007ffc:	0800c1f3 	.word	0x0800c1f3

08008000 <_scanf_float>:
 8008000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008004:	b087      	sub	sp, #28
 8008006:	4691      	mov	r9, r2
 8008008:	9303      	str	r3, [sp, #12]
 800800a:	688b      	ldr	r3, [r1, #8]
 800800c:	1e5a      	subs	r2, r3, #1
 800800e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008012:	bf81      	itttt	hi
 8008014:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008018:	eb03 0b05 	addhi.w	fp, r3, r5
 800801c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008020:	608b      	strhi	r3, [r1, #8]
 8008022:	680b      	ldr	r3, [r1, #0]
 8008024:	460a      	mov	r2, r1
 8008026:	f04f 0500 	mov.w	r5, #0
 800802a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800802e:	f842 3b1c 	str.w	r3, [r2], #28
 8008032:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008036:	4680      	mov	r8, r0
 8008038:	460c      	mov	r4, r1
 800803a:	bf98      	it	ls
 800803c:	f04f 0b00 	movls.w	fp, #0
 8008040:	9201      	str	r2, [sp, #4]
 8008042:	4616      	mov	r6, r2
 8008044:	46aa      	mov	sl, r5
 8008046:	462f      	mov	r7, r5
 8008048:	9502      	str	r5, [sp, #8]
 800804a:	68a2      	ldr	r2, [r4, #8]
 800804c:	b15a      	cbz	r2, 8008066 <_scanf_float+0x66>
 800804e:	f8d9 3000 	ldr.w	r3, [r9]
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	2b4e      	cmp	r3, #78	@ 0x4e
 8008056:	d863      	bhi.n	8008120 <_scanf_float+0x120>
 8008058:	2b40      	cmp	r3, #64	@ 0x40
 800805a:	d83b      	bhi.n	80080d4 <_scanf_float+0xd4>
 800805c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008060:	b2c8      	uxtb	r0, r1
 8008062:	280e      	cmp	r0, #14
 8008064:	d939      	bls.n	80080da <_scanf_float+0xda>
 8008066:	b11f      	cbz	r7, 8008070 <_scanf_float+0x70>
 8008068:	6823      	ldr	r3, [r4, #0]
 800806a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800806e:	6023      	str	r3, [r4, #0]
 8008070:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008074:	f1ba 0f01 	cmp.w	sl, #1
 8008078:	f200 8114 	bhi.w	80082a4 <_scanf_float+0x2a4>
 800807c:	9b01      	ldr	r3, [sp, #4]
 800807e:	429e      	cmp	r6, r3
 8008080:	f200 8105 	bhi.w	800828e <_scanf_float+0x28e>
 8008084:	2001      	movs	r0, #1
 8008086:	b007      	add	sp, #28
 8008088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800808c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008090:	2a0d      	cmp	r2, #13
 8008092:	d8e8      	bhi.n	8008066 <_scanf_float+0x66>
 8008094:	a101      	add	r1, pc, #4	@ (adr r1, 800809c <_scanf_float+0x9c>)
 8008096:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800809a:	bf00      	nop
 800809c:	080081e5 	.word	0x080081e5
 80080a0:	08008067 	.word	0x08008067
 80080a4:	08008067 	.word	0x08008067
 80080a8:	08008067 	.word	0x08008067
 80080ac:	08008241 	.word	0x08008241
 80080b0:	0800821b 	.word	0x0800821b
 80080b4:	08008067 	.word	0x08008067
 80080b8:	08008067 	.word	0x08008067
 80080bc:	080081f3 	.word	0x080081f3
 80080c0:	08008067 	.word	0x08008067
 80080c4:	08008067 	.word	0x08008067
 80080c8:	08008067 	.word	0x08008067
 80080cc:	08008067 	.word	0x08008067
 80080d0:	080081af 	.word	0x080081af
 80080d4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80080d8:	e7da      	b.n	8008090 <_scanf_float+0x90>
 80080da:	290e      	cmp	r1, #14
 80080dc:	d8c3      	bhi.n	8008066 <_scanf_float+0x66>
 80080de:	a001      	add	r0, pc, #4	@ (adr r0, 80080e4 <_scanf_float+0xe4>)
 80080e0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80080e4:	0800819f 	.word	0x0800819f
 80080e8:	08008067 	.word	0x08008067
 80080ec:	0800819f 	.word	0x0800819f
 80080f0:	0800822f 	.word	0x0800822f
 80080f4:	08008067 	.word	0x08008067
 80080f8:	08008141 	.word	0x08008141
 80080fc:	08008185 	.word	0x08008185
 8008100:	08008185 	.word	0x08008185
 8008104:	08008185 	.word	0x08008185
 8008108:	08008185 	.word	0x08008185
 800810c:	08008185 	.word	0x08008185
 8008110:	08008185 	.word	0x08008185
 8008114:	08008185 	.word	0x08008185
 8008118:	08008185 	.word	0x08008185
 800811c:	08008185 	.word	0x08008185
 8008120:	2b6e      	cmp	r3, #110	@ 0x6e
 8008122:	d809      	bhi.n	8008138 <_scanf_float+0x138>
 8008124:	2b60      	cmp	r3, #96	@ 0x60
 8008126:	d8b1      	bhi.n	800808c <_scanf_float+0x8c>
 8008128:	2b54      	cmp	r3, #84	@ 0x54
 800812a:	d07b      	beq.n	8008224 <_scanf_float+0x224>
 800812c:	2b59      	cmp	r3, #89	@ 0x59
 800812e:	d19a      	bne.n	8008066 <_scanf_float+0x66>
 8008130:	2d07      	cmp	r5, #7
 8008132:	d198      	bne.n	8008066 <_scanf_float+0x66>
 8008134:	2508      	movs	r5, #8
 8008136:	e02f      	b.n	8008198 <_scanf_float+0x198>
 8008138:	2b74      	cmp	r3, #116	@ 0x74
 800813a:	d073      	beq.n	8008224 <_scanf_float+0x224>
 800813c:	2b79      	cmp	r3, #121	@ 0x79
 800813e:	e7f6      	b.n	800812e <_scanf_float+0x12e>
 8008140:	6821      	ldr	r1, [r4, #0]
 8008142:	05c8      	lsls	r0, r1, #23
 8008144:	d51e      	bpl.n	8008184 <_scanf_float+0x184>
 8008146:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800814a:	6021      	str	r1, [r4, #0]
 800814c:	3701      	adds	r7, #1
 800814e:	f1bb 0f00 	cmp.w	fp, #0
 8008152:	d003      	beq.n	800815c <_scanf_float+0x15c>
 8008154:	3201      	adds	r2, #1
 8008156:	f10b 3bff 	add.w	fp, fp, #4294967295
 800815a:	60a2      	str	r2, [r4, #8]
 800815c:	68a3      	ldr	r3, [r4, #8]
 800815e:	3b01      	subs	r3, #1
 8008160:	60a3      	str	r3, [r4, #8]
 8008162:	6923      	ldr	r3, [r4, #16]
 8008164:	3301      	adds	r3, #1
 8008166:	6123      	str	r3, [r4, #16]
 8008168:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800816c:	3b01      	subs	r3, #1
 800816e:	2b00      	cmp	r3, #0
 8008170:	f8c9 3004 	str.w	r3, [r9, #4]
 8008174:	f340 8082 	ble.w	800827c <_scanf_float+0x27c>
 8008178:	f8d9 3000 	ldr.w	r3, [r9]
 800817c:	3301      	adds	r3, #1
 800817e:	f8c9 3000 	str.w	r3, [r9]
 8008182:	e762      	b.n	800804a <_scanf_float+0x4a>
 8008184:	eb1a 0105 	adds.w	r1, sl, r5
 8008188:	f47f af6d 	bne.w	8008066 <_scanf_float+0x66>
 800818c:	6822      	ldr	r2, [r4, #0]
 800818e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008192:	6022      	str	r2, [r4, #0]
 8008194:	460d      	mov	r5, r1
 8008196:	468a      	mov	sl, r1
 8008198:	f806 3b01 	strb.w	r3, [r6], #1
 800819c:	e7de      	b.n	800815c <_scanf_float+0x15c>
 800819e:	6822      	ldr	r2, [r4, #0]
 80081a0:	0610      	lsls	r0, r2, #24
 80081a2:	f57f af60 	bpl.w	8008066 <_scanf_float+0x66>
 80081a6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80081aa:	6022      	str	r2, [r4, #0]
 80081ac:	e7f4      	b.n	8008198 <_scanf_float+0x198>
 80081ae:	f1ba 0f00 	cmp.w	sl, #0
 80081b2:	d10c      	bne.n	80081ce <_scanf_float+0x1ce>
 80081b4:	b977      	cbnz	r7, 80081d4 <_scanf_float+0x1d4>
 80081b6:	6822      	ldr	r2, [r4, #0]
 80081b8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80081bc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80081c0:	d108      	bne.n	80081d4 <_scanf_float+0x1d4>
 80081c2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80081c6:	6022      	str	r2, [r4, #0]
 80081c8:	f04f 0a01 	mov.w	sl, #1
 80081cc:	e7e4      	b.n	8008198 <_scanf_float+0x198>
 80081ce:	f1ba 0f02 	cmp.w	sl, #2
 80081d2:	d050      	beq.n	8008276 <_scanf_float+0x276>
 80081d4:	2d01      	cmp	r5, #1
 80081d6:	d002      	beq.n	80081de <_scanf_float+0x1de>
 80081d8:	2d04      	cmp	r5, #4
 80081da:	f47f af44 	bne.w	8008066 <_scanf_float+0x66>
 80081de:	3501      	adds	r5, #1
 80081e0:	b2ed      	uxtb	r5, r5
 80081e2:	e7d9      	b.n	8008198 <_scanf_float+0x198>
 80081e4:	f1ba 0f01 	cmp.w	sl, #1
 80081e8:	f47f af3d 	bne.w	8008066 <_scanf_float+0x66>
 80081ec:	f04f 0a02 	mov.w	sl, #2
 80081f0:	e7d2      	b.n	8008198 <_scanf_float+0x198>
 80081f2:	b975      	cbnz	r5, 8008212 <_scanf_float+0x212>
 80081f4:	2f00      	cmp	r7, #0
 80081f6:	f47f af37 	bne.w	8008068 <_scanf_float+0x68>
 80081fa:	6822      	ldr	r2, [r4, #0]
 80081fc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008200:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008204:	f040 8103 	bne.w	800840e <_scanf_float+0x40e>
 8008208:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800820c:	6022      	str	r2, [r4, #0]
 800820e:	2501      	movs	r5, #1
 8008210:	e7c2      	b.n	8008198 <_scanf_float+0x198>
 8008212:	2d03      	cmp	r5, #3
 8008214:	d0e3      	beq.n	80081de <_scanf_float+0x1de>
 8008216:	2d05      	cmp	r5, #5
 8008218:	e7df      	b.n	80081da <_scanf_float+0x1da>
 800821a:	2d02      	cmp	r5, #2
 800821c:	f47f af23 	bne.w	8008066 <_scanf_float+0x66>
 8008220:	2503      	movs	r5, #3
 8008222:	e7b9      	b.n	8008198 <_scanf_float+0x198>
 8008224:	2d06      	cmp	r5, #6
 8008226:	f47f af1e 	bne.w	8008066 <_scanf_float+0x66>
 800822a:	2507      	movs	r5, #7
 800822c:	e7b4      	b.n	8008198 <_scanf_float+0x198>
 800822e:	6822      	ldr	r2, [r4, #0]
 8008230:	0591      	lsls	r1, r2, #22
 8008232:	f57f af18 	bpl.w	8008066 <_scanf_float+0x66>
 8008236:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800823a:	6022      	str	r2, [r4, #0]
 800823c:	9702      	str	r7, [sp, #8]
 800823e:	e7ab      	b.n	8008198 <_scanf_float+0x198>
 8008240:	6822      	ldr	r2, [r4, #0]
 8008242:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008246:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800824a:	d005      	beq.n	8008258 <_scanf_float+0x258>
 800824c:	0550      	lsls	r0, r2, #21
 800824e:	f57f af0a 	bpl.w	8008066 <_scanf_float+0x66>
 8008252:	2f00      	cmp	r7, #0
 8008254:	f000 80db 	beq.w	800840e <_scanf_float+0x40e>
 8008258:	0591      	lsls	r1, r2, #22
 800825a:	bf58      	it	pl
 800825c:	9902      	ldrpl	r1, [sp, #8]
 800825e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008262:	bf58      	it	pl
 8008264:	1a79      	subpl	r1, r7, r1
 8008266:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800826a:	bf58      	it	pl
 800826c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008270:	6022      	str	r2, [r4, #0]
 8008272:	2700      	movs	r7, #0
 8008274:	e790      	b.n	8008198 <_scanf_float+0x198>
 8008276:	f04f 0a03 	mov.w	sl, #3
 800827a:	e78d      	b.n	8008198 <_scanf_float+0x198>
 800827c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008280:	4649      	mov	r1, r9
 8008282:	4640      	mov	r0, r8
 8008284:	4798      	blx	r3
 8008286:	2800      	cmp	r0, #0
 8008288:	f43f aedf 	beq.w	800804a <_scanf_float+0x4a>
 800828c:	e6eb      	b.n	8008066 <_scanf_float+0x66>
 800828e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008292:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008296:	464a      	mov	r2, r9
 8008298:	4640      	mov	r0, r8
 800829a:	4798      	blx	r3
 800829c:	6923      	ldr	r3, [r4, #16]
 800829e:	3b01      	subs	r3, #1
 80082a0:	6123      	str	r3, [r4, #16]
 80082a2:	e6eb      	b.n	800807c <_scanf_float+0x7c>
 80082a4:	1e6b      	subs	r3, r5, #1
 80082a6:	2b06      	cmp	r3, #6
 80082a8:	d824      	bhi.n	80082f4 <_scanf_float+0x2f4>
 80082aa:	2d02      	cmp	r5, #2
 80082ac:	d836      	bhi.n	800831c <_scanf_float+0x31c>
 80082ae:	9b01      	ldr	r3, [sp, #4]
 80082b0:	429e      	cmp	r6, r3
 80082b2:	f67f aee7 	bls.w	8008084 <_scanf_float+0x84>
 80082b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80082ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80082be:	464a      	mov	r2, r9
 80082c0:	4640      	mov	r0, r8
 80082c2:	4798      	blx	r3
 80082c4:	6923      	ldr	r3, [r4, #16]
 80082c6:	3b01      	subs	r3, #1
 80082c8:	6123      	str	r3, [r4, #16]
 80082ca:	e7f0      	b.n	80082ae <_scanf_float+0x2ae>
 80082cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80082d0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80082d4:	464a      	mov	r2, r9
 80082d6:	4640      	mov	r0, r8
 80082d8:	4798      	blx	r3
 80082da:	6923      	ldr	r3, [r4, #16]
 80082dc:	3b01      	subs	r3, #1
 80082de:	6123      	str	r3, [r4, #16]
 80082e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80082e4:	fa5f fa8a 	uxtb.w	sl, sl
 80082e8:	f1ba 0f02 	cmp.w	sl, #2
 80082ec:	d1ee      	bne.n	80082cc <_scanf_float+0x2cc>
 80082ee:	3d03      	subs	r5, #3
 80082f0:	b2ed      	uxtb	r5, r5
 80082f2:	1b76      	subs	r6, r6, r5
 80082f4:	6823      	ldr	r3, [r4, #0]
 80082f6:	05da      	lsls	r2, r3, #23
 80082f8:	d530      	bpl.n	800835c <_scanf_float+0x35c>
 80082fa:	055b      	lsls	r3, r3, #21
 80082fc:	d511      	bpl.n	8008322 <_scanf_float+0x322>
 80082fe:	9b01      	ldr	r3, [sp, #4]
 8008300:	429e      	cmp	r6, r3
 8008302:	f67f aebf 	bls.w	8008084 <_scanf_float+0x84>
 8008306:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800830a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800830e:	464a      	mov	r2, r9
 8008310:	4640      	mov	r0, r8
 8008312:	4798      	blx	r3
 8008314:	6923      	ldr	r3, [r4, #16]
 8008316:	3b01      	subs	r3, #1
 8008318:	6123      	str	r3, [r4, #16]
 800831a:	e7f0      	b.n	80082fe <_scanf_float+0x2fe>
 800831c:	46aa      	mov	sl, r5
 800831e:	46b3      	mov	fp, r6
 8008320:	e7de      	b.n	80082e0 <_scanf_float+0x2e0>
 8008322:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008326:	6923      	ldr	r3, [r4, #16]
 8008328:	2965      	cmp	r1, #101	@ 0x65
 800832a:	f103 33ff 	add.w	r3, r3, #4294967295
 800832e:	f106 35ff 	add.w	r5, r6, #4294967295
 8008332:	6123      	str	r3, [r4, #16]
 8008334:	d00c      	beq.n	8008350 <_scanf_float+0x350>
 8008336:	2945      	cmp	r1, #69	@ 0x45
 8008338:	d00a      	beq.n	8008350 <_scanf_float+0x350>
 800833a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800833e:	464a      	mov	r2, r9
 8008340:	4640      	mov	r0, r8
 8008342:	4798      	blx	r3
 8008344:	6923      	ldr	r3, [r4, #16]
 8008346:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800834a:	3b01      	subs	r3, #1
 800834c:	1eb5      	subs	r5, r6, #2
 800834e:	6123      	str	r3, [r4, #16]
 8008350:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008354:	464a      	mov	r2, r9
 8008356:	4640      	mov	r0, r8
 8008358:	4798      	blx	r3
 800835a:	462e      	mov	r6, r5
 800835c:	6822      	ldr	r2, [r4, #0]
 800835e:	f012 0210 	ands.w	r2, r2, #16
 8008362:	d001      	beq.n	8008368 <_scanf_float+0x368>
 8008364:	2000      	movs	r0, #0
 8008366:	e68e      	b.n	8008086 <_scanf_float+0x86>
 8008368:	7032      	strb	r2, [r6, #0]
 800836a:	6823      	ldr	r3, [r4, #0]
 800836c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008370:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008374:	d125      	bne.n	80083c2 <_scanf_float+0x3c2>
 8008376:	9b02      	ldr	r3, [sp, #8]
 8008378:	429f      	cmp	r7, r3
 800837a:	d00a      	beq.n	8008392 <_scanf_float+0x392>
 800837c:	1bda      	subs	r2, r3, r7
 800837e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008382:	429e      	cmp	r6, r3
 8008384:	bf28      	it	cs
 8008386:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800838a:	4922      	ldr	r1, [pc, #136]	@ (8008414 <_scanf_float+0x414>)
 800838c:	4630      	mov	r0, r6
 800838e:	f000 f977 	bl	8008680 <siprintf>
 8008392:	9901      	ldr	r1, [sp, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	4640      	mov	r0, r8
 8008398:	f002 fcf6 	bl	800ad88 <_strtod_r>
 800839c:	9b03      	ldr	r3, [sp, #12]
 800839e:	6821      	ldr	r1, [r4, #0]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f011 0f02 	tst.w	r1, #2
 80083a6:	ec57 6b10 	vmov	r6, r7, d0
 80083aa:	f103 0204 	add.w	r2, r3, #4
 80083ae:	d015      	beq.n	80083dc <_scanf_float+0x3dc>
 80083b0:	9903      	ldr	r1, [sp, #12]
 80083b2:	600a      	str	r2, [r1, #0]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	e9c3 6700 	strd	r6, r7, [r3]
 80083ba:	68e3      	ldr	r3, [r4, #12]
 80083bc:	3301      	adds	r3, #1
 80083be:	60e3      	str	r3, [r4, #12]
 80083c0:	e7d0      	b.n	8008364 <_scanf_float+0x364>
 80083c2:	9b04      	ldr	r3, [sp, #16]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d0e4      	beq.n	8008392 <_scanf_float+0x392>
 80083c8:	9905      	ldr	r1, [sp, #20]
 80083ca:	230a      	movs	r3, #10
 80083cc:	3101      	adds	r1, #1
 80083ce:	4640      	mov	r0, r8
 80083d0:	f002 fd5a 	bl	800ae88 <_strtol_r>
 80083d4:	9b04      	ldr	r3, [sp, #16]
 80083d6:	9e05      	ldr	r6, [sp, #20]
 80083d8:	1ac2      	subs	r2, r0, r3
 80083da:	e7d0      	b.n	800837e <_scanf_float+0x37e>
 80083dc:	f011 0f04 	tst.w	r1, #4
 80083e0:	9903      	ldr	r1, [sp, #12]
 80083e2:	600a      	str	r2, [r1, #0]
 80083e4:	d1e6      	bne.n	80083b4 <_scanf_float+0x3b4>
 80083e6:	681d      	ldr	r5, [r3, #0]
 80083e8:	4632      	mov	r2, r6
 80083ea:	463b      	mov	r3, r7
 80083ec:	4630      	mov	r0, r6
 80083ee:	4639      	mov	r1, r7
 80083f0:	f7f8 fbbc 	bl	8000b6c <__aeabi_dcmpun>
 80083f4:	b128      	cbz	r0, 8008402 <_scanf_float+0x402>
 80083f6:	4808      	ldr	r0, [pc, #32]	@ (8008418 <_scanf_float+0x418>)
 80083f8:	f000 fabc 	bl	8008974 <nanf>
 80083fc:	ed85 0a00 	vstr	s0, [r5]
 8008400:	e7db      	b.n	80083ba <_scanf_float+0x3ba>
 8008402:	4630      	mov	r0, r6
 8008404:	4639      	mov	r1, r7
 8008406:	f7f8 fc0f 	bl	8000c28 <__aeabi_d2f>
 800840a:	6028      	str	r0, [r5, #0]
 800840c:	e7d5      	b.n	80083ba <_scanf_float+0x3ba>
 800840e:	2700      	movs	r7, #0
 8008410:	e62e      	b.n	8008070 <_scanf_float+0x70>
 8008412:	bf00      	nop
 8008414:	0800c204 	.word	0x0800c204
 8008418:	0800c345 	.word	0x0800c345

0800841c <std>:
 800841c:	2300      	movs	r3, #0
 800841e:	b510      	push	{r4, lr}
 8008420:	4604      	mov	r4, r0
 8008422:	e9c0 3300 	strd	r3, r3, [r0]
 8008426:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800842a:	6083      	str	r3, [r0, #8]
 800842c:	8181      	strh	r1, [r0, #12]
 800842e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008430:	81c2      	strh	r2, [r0, #14]
 8008432:	6183      	str	r3, [r0, #24]
 8008434:	4619      	mov	r1, r3
 8008436:	2208      	movs	r2, #8
 8008438:	305c      	adds	r0, #92	@ 0x5c
 800843a:	f000 fa1b 	bl	8008874 <memset>
 800843e:	4b0d      	ldr	r3, [pc, #52]	@ (8008474 <std+0x58>)
 8008440:	6263      	str	r3, [r4, #36]	@ 0x24
 8008442:	4b0d      	ldr	r3, [pc, #52]	@ (8008478 <std+0x5c>)
 8008444:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008446:	4b0d      	ldr	r3, [pc, #52]	@ (800847c <std+0x60>)
 8008448:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800844a:	4b0d      	ldr	r3, [pc, #52]	@ (8008480 <std+0x64>)
 800844c:	6323      	str	r3, [r4, #48]	@ 0x30
 800844e:	4b0d      	ldr	r3, [pc, #52]	@ (8008484 <std+0x68>)
 8008450:	6224      	str	r4, [r4, #32]
 8008452:	429c      	cmp	r4, r3
 8008454:	d006      	beq.n	8008464 <std+0x48>
 8008456:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800845a:	4294      	cmp	r4, r2
 800845c:	d002      	beq.n	8008464 <std+0x48>
 800845e:	33d0      	adds	r3, #208	@ 0xd0
 8008460:	429c      	cmp	r4, r3
 8008462:	d105      	bne.n	8008470 <std+0x54>
 8008464:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800846c:	f000 ba7e 	b.w	800896c <__retarget_lock_init_recursive>
 8008470:	bd10      	pop	{r4, pc}
 8008472:	bf00      	nop
 8008474:	080086c5 	.word	0x080086c5
 8008478:	080086e7 	.word	0x080086e7
 800847c:	0800871f 	.word	0x0800871f
 8008480:	08008743 	.word	0x08008743
 8008484:	200004e4 	.word	0x200004e4

08008488 <stdio_exit_handler>:
 8008488:	4a02      	ldr	r2, [pc, #8]	@ (8008494 <stdio_exit_handler+0xc>)
 800848a:	4903      	ldr	r1, [pc, #12]	@ (8008498 <stdio_exit_handler+0x10>)
 800848c:	4803      	ldr	r0, [pc, #12]	@ (800849c <stdio_exit_handler+0x14>)
 800848e:	f000 b869 	b.w	8008564 <_fwalk_sglue>
 8008492:	bf00      	nop
 8008494:	20000024 	.word	0x20000024
 8008498:	0800b4c9 	.word	0x0800b4c9
 800849c:	20000034 	.word	0x20000034

080084a0 <cleanup_stdio>:
 80084a0:	6841      	ldr	r1, [r0, #4]
 80084a2:	4b0c      	ldr	r3, [pc, #48]	@ (80084d4 <cleanup_stdio+0x34>)
 80084a4:	4299      	cmp	r1, r3
 80084a6:	b510      	push	{r4, lr}
 80084a8:	4604      	mov	r4, r0
 80084aa:	d001      	beq.n	80084b0 <cleanup_stdio+0x10>
 80084ac:	f003 f80c 	bl	800b4c8 <_fflush_r>
 80084b0:	68a1      	ldr	r1, [r4, #8]
 80084b2:	4b09      	ldr	r3, [pc, #36]	@ (80084d8 <cleanup_stdio+0x38>)
 80084b4:	4299      	cmp	r1, r3
 80084b6:	d002      	beq.n	80084be <cleanup_stdio+0x1e>
 80084b8:	4620      	mov	r0, r4
 80084ba:	f003 f805 	bl	800b4c8 <_fflush_r>
 80084be:	68e1      	ldr	r1, [r4, #12]
 80084c0:	4b06      	ldr	r3, [pc, #24]	@ (80084dc <cleanup_stdio+0x3c>)
 80084c2:	4299      	cmp	r1, r3
 80084c4:	d004      	beq.n	80084d0 <cleanup_stdio+0x30>
 80084c6:	4620      	mov	r0, r4
 80084c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084cc:	f002 bffc 	b.w	800b4c8 <_fflush_r>
 80084d0:	bd10      	pop	{r4, pc}
 80084d2:	bf00      	nop
 80084d4:	200004e4 	.word	0x200004e4
 80084d8:	2000054c 	.word	0x2000054c
 80084dc:	200005b4 	.word	0x200005b4

080084e0 <global_stdio_init.part.0>:
 80084e0:	b510      	push	{r4, lr}
 80084e2:	4b0b      	ldr	r3, [pc, #44]	@ (8008510 <global_stdio_init.part.0+0x30>)
 80084e4:	4c0b      	ldr	r4, [pc, #44]	@ (8008514 <global_stdio_init.part.0+0x34>)
 80084e6:	4a0c      	ldr	r2, [pc, #48]	@ (8008518 <global_stdio_init.part.0+0x38>)
 80084e8:	601a      	str	r2, [r3, #0]
 80084ea:	4620      	mov	r0, r4
 80084ec:	2200      	movs	r2, #0
 80084ee:	2104      	movs	r1, #4
 80084f0:	f7ff ff94 	bl	800841c <std>
 80084f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80084f8:	2201      	movs	r2, #1
 80084fa:	2109      	movs	r1, #9
 80084fc:	f7ff ff8e 	bl	800841c <std>
 8008500:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008504:	2202      	movs	r2, #2
 8008506:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800850a:	2112      	movs	r1, #18
 800850c:	f7ff bf86 	b.w	800841c <std>
 8008510:	2000061c 	.word	0x2000061c
 8008514:	200004e4 	.word	0x200004e4
 8008518:	08008489 	.word	0x08008489

0800851c <__sfp_lock_acquire>:
 800851c:	4801      	ldr	r0, [pc, #4]	@ (8008524 <__sfp_lock_acquire+0x8>)
 800851e:	f000 ba26 	b.w	800896e <__retarget_lock_acquire_recursive>
 8008522:	bf00      	nop
 8008524:	20000625 	.word	0x20000625

08008528 <__sfp_lock_release>:
 8008528:	4801      	ldr	r0, [pc, #4]	@ (8008530 <__sfp_lock_release+0x8>)
 800852a:	f000 ba21 	b.w	8008970 <__retarget_lock_release_recursive>
 800852e:	bf00      	nop
 8008530:	20000625 	.word	0x20000625

08008534 <__sinit>:
 8008534:	b510      	push	{r4, lr}
 8008536:	4604      	mov	r4, r0
 8008538:	f7ff fff0 	bl	800851c <__sfp_lock_acquire>
 800853c:	6a23      	ldr	r3, [r4, #32]
 800853e:	b11b      	cbz	r3, 8008548 <__sinit+0x14>
 8008540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008544:	f7ff bff0 	b.w	8008528 <__sfp_lock_release>
 8008548:	4b04      	ldr	r3, [pc, #16]	@ (800855c <__sinit+0x28>)
 800854a:	6223      	str	r3, [r4, #32]
 800854c:	4b04      	ldr	r3, [pc, #16]	@ (8008560 <__sinit+0x2c>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d1f5      	bne.n	8008540 <__sinit+0xc>
 8008554:	f7ff ffc4 	bl	80084e0 <global_stdio_init.part.0>
 8008558:	e7f2      	b.n	8008540 <__sinit+0xc>
 800855a:	bf00      	nop
 800855c:	080084a1 	.word	0x080084a1
 8008560:	2000061c 	.word	0x2000061c

08008564 <_fwalk_sglue>:
 8008564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008568:	4607      	mov	r7, r0
 800856a:	4688      	mov	r8, r1
 800856c:	4614      	mov	r4, r2
 800856e:	2600      	movs	r6, #0
 8008570:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008574:	f1b9 0901 	subs.w	r9, r9, #1
 8008578:	d505      	bpl.n	8008586 <_fwalk_sglue+0x22>
 800857a:	6824      	ldr	r4, [r4, #0]
 800857c:	2c00      	cmp	r4, #0
 800857e:	d1f7      	bne.n	8008570 <_fwalk_sglue+0xc>
 8008580:	4630      	mov	r0, r6
 8008582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008586:	89ab      	ldrh	r3, [r5, #12]
 8008588:	2b01      	cmp	r3, #1
 800858a:	d907      	bls.n	800859c <_fwalk_sglue+0x38>
 800858c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008590:	3301      	adds	r3, #1
 8008592:	d003      	beq.n	800859c <_fwalk_sglue+0x38>
 8008594:	4629      	mov	r1, r5
 8008596:	4638      	mov	r0, r7
 8008598:	47c0      	blx	r8
 800859a:	4306      	orrs	r6, r0
 800859c:	3568      	adds	r5, #104	@ 0x68
 800859e:	e7e9      	b.n	8008574 <_fwalk_sglue+0x10>

080085a0 <iprintf>:
 80085a0:	b40f      	push	{r0, r1, r2, r3}
 80085a2:	b507      	push	{r0, r1, r2, lr}
 80085a4:	4906      	ldr	r1, [pc, #24]	@ (80085c0 <iprintf+0x20>)
 80085a6:	ab04      	add	r3, sp, #16
 80085a8:	6808      	ldr	r0, [r1, #0]
 80085aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80085ae:	6881      	ldr	r1, [r0, #8]
 80085b0:	9301      	str	r3, [sp, #4]
 80085b2:	f002 fded 	bl	800b190 <_vfiprintf_r>
 80085b6:	b003      	add	sp, #12
 80085b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80085bc:	b004      	add	sp, #16
 80085be:	4770      	bx	lr
 80085c0:	20000030 	.word	0x20000030

080085c4 <_puts_r>:
 80085c4:	6a03      	ldr	r3, [r0, #32]
 80085c6:	b570      	push	{r4, r5, r6, lr}
 80085c8:	6884      	ldr	r4, [r0, #8]
 80085ca:	4605      	mov	r5, r0
 80085cc:	460e      	mov	r6, r1
 80085ce:	b90b      	cbnz	r3, 80085d4 <_puts_r+0x10>
 80085d0:	f7ff ffb0 	bl	8008534 <__sinit>
 80085d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80085d6:	07db      	lsls	r3, r3, #31
 80085d8:	d405      	bmi.n	80085e6 <_puts_r+0x22>
 80085da:	89a3      	ldrh	r3, [r4, #12]
 80085dc:	0598      	lsls	r0, r3, #22
 80085de:	d402      	bmi.n	80085e6 <_puts_r+0x22>
 80085e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80085e2:	f000 f9c4 	bl	800896e <__retarget_lock_acquire_recursive>
 80085e6:	89a3      	ldrh	r3, [r4, #12]
 80085e8:	0719      	lsls	r1, r3, #28
 80085ea:	d502      	bpl.n	80085f2 <_puts_r+0x2e>
 80085ec:	6923      	ldr	r3, [r4, #16]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d135      	bne.n	800865e <_puts_r+0x9a>
 80085f2:	4621      	mov	r1, r4
 80085f4:	4628      	mov	r0, r5
 80085f6:	f000 f8e7 	bl	80087c8 <__swsetup_r>
 80085fa:	b380      	cbz	r0, 800865e <_puts_r+0x9a>
 80085fc:	f04f 35ff 	mov.w	r5, #4294967295
 8008600:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008602:	07da      	lsls	r2, r3, #31
 8008604:	d405      	bmi.n	8008612 <_puts_r+0x4e>
 8008606:	89a3      	ldrh	r3, [r4, #12]
 8008608:	059b      	lsls	r3, r3, #22
 800860a:	d402      	bmi.n	8008612 <_puts_r+0x4e>
 800860c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800860e:	f000 f9af 	bl	8008970 <__retarget_lock_release_recursive>
 8008612:	4628      	mov	r0, r5
 8008614:	bd70      	pop	{r4, r5, r6, pc}
 8008616:	2b00      	cmp	r3, #0
 8008618:	da04      	bge.n	8008624 <_puts_r+0x60>
 800861a:	69a2      	ldr	r2, [r4, #24]
 800861c:	429a      	cmp	r2, r3
 800861e:	dc17      	bgt.n	8008650 <_puts_r+0x8c>
 8008620:	290a      	cmp	r1, #10
 8008622:	d015      	beq.n	8008650 <_puts_r+0x8c>
 8008624:	6823      	ldr	r3, [r4, #0]
 8008626:	1c5a      	adds	r2, r3, #1
 8008628:	6022      	str	r2, [r4, #0]
 800862a:	7019      	strb	r1, [r3, #0]
 800862c:	68a3      	ldr	r3, [r4, #8]
 800862e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008632:	3b01      	subs	r3, #1
 8008634:	60a3      	str	r3, [r4, #8]
 8008636:	2900      	cmp	r1, #0
 8008638:	d1ed      	bne.n	8008616 <_puts_r+0x52>
 800863a:	2b00      	cmp	r3, #0
 800863c:	da11      	bge.n	8008662 <_puts_r+0x9e>
 800863e:	4622      	mov	r2, r4
 8008640:	210a      	movs	r1, #10
 8008642:	4628      	mov	r0, r5
 8008644:	f000 f881 	bl	800874a <__swbuf_r>
 8008648:	3001      	adds	r0, #1
 800864a:	d0d7      	beq.n	80085fc <_puts_r+0x38>
 800864c:	250a      	movs	r5, #10
 800864e:	e7d7      	b.n	8008600 <_puts_r+0x3c>
 8008650:	4622      	mov	r2, r4
 8008652:	4628      	mov	r0, r5
 8008654:	f000 f879 	bl	800874a <__swbuf_r>
 8008658:	3001      	adds	r0, #1
 800865a:	d1e7      	bne.n	800862c <_puts_r+0x68>
 800865c:	e7ce      	b.n	80085fc <_puts_r+0x38>
 800865e:	3e01      	subs	r6, #1
 8008660:	e7e4      	b.n	800862c <_puts_r+0x68>
 8008662:	6823      	ldr	r3, [r4, #0]
 8008664:	1c5a      	adds	r2, r3, #1
 8008666:	6022      	str	r2, [r4, #0]
 8008668:	220a      	movs	r2, #10
 800866a:	701a      	strb	r2, [r3, #0]
 800866c:	e7ee      	b.n	800864c <_puts_r+0x88>
	...

08008670 <puts>:
 8008670:	4b02      	ldr	r3, [pc, #8]	@ (800867c <puts+0xc>)
 8008672:	4601      	mov	r1, r0
 8008674:	6818      	ldr	r0, [r3, #0]
 8008676:	f7ff bfa5 	b.w	80085c4 <_puts_r>
 800867a:	bf00      	nop
 800867c:	20000030 	.word	0x20000030

08008680 <siprintf>:
 8008680:	b40e      	push	{r1, r2, r3}
 8008682:	b510      	push	{r4, lr}
 8008684:	b09d      	sub	sp, #116	@ 0x74
 8008686:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008688:	9002      	str	r0, [sp, #8]
 800868a:	9006      	str	r0, [sp, #24]
 800868c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008690:	480a      	ldr	r0, [pc, #40]	@ (80086bc <siprintf+0x3c>)
 8008692:	9107      	str	r1, [sp, #28]
 8008694:	9104      	str	r1, [sp, #16]
 8008696:	490a      	ldr	r1, [pc, #40]	@ (80086c0 <siprintf+0x40>)
 8008698:	f853 2b04 	ldr.w	r2, [r3], #4
 800869c:	9105      	str	r1, [sp, #20]
 800869e:	2400      	movs	r4, #0
 80086a0:	a902      	add	r1, sp, #8
 80086a2:	6800      	ldr	r0, [r0, #0]
 80086a4:	9301      	str	r3, [sp, #4]
 80086a6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80086a8:	f002 fc4c 	bl	800af44 <_svfiprintf_r>
 80086ac:	9b02      	ldr	r3, [sp, #8]
 80086ae:	701c      	strb	r4, [r3, #0]
 80086b0:	b01d      	add	sp, #116	@ 0x74
 80086b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086b6:	b003      	add	sp, #12
 80086b8:	4770      	bx	lr
 80086ba:	bf00      	nop
 80086bc:	20000030 	.word	0x20000030
 80086c0:	ffff0208 	.word	0xffff0208

080086c4 <__sread>:
 80086c4:	b510      	push	{r4, lr}
 80086c6:	460c      	mov	r4, r1
 80086c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086cc:	f000 f900 	bl	80088d0 <_read_r>
 80086d0:	2800      	cmp	r0, #0
 80086d2:	bfab      	itete	ge
 80086d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80086d6:	89a3      	ldrhlt	r3, [r4, #12]
 80086d8:	181b      	addge	r3, r3, r0
 80086da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80086de:	bfac      	ite	ge
 80086e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80086e2:	81a3      	strhlt	r3, [r4, #12]
 80086e4:	bd10      	pop	{r4, pc}

080086e6 <__swrite>:
 80086e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086ea:	461f      	mov	r7, r3
 80086ec:	898b      	ldrh	r3, [r1, #12]
 80086ee:	05db      	lsls	r3, r3, #23
 80086f0:	4605      	mov	r5, r0
 80086f2:	460c      	mov	r4, r1
 80086f4:	4616      	mov	r6, r2
 80086f6:	d505      	bpl.n	8008704 <__swrite+0x1e>
 80086f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086fc:	2302      	movs	r3, #2
 80086fe:	2200      	movs	r2, #0
 8008700:	f000 f8d4 	bl	80088ac <_lseek_r>
 8008704:	89a3      	ldrh	r3, [r4, #12]
 8008706:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800870a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800870e:	81a3      	strh	r3, [r4, #12]
 8008710:	4632      	mov	r2, r6
 8008712:	463b      	mov	r3, r7
 8008714:	4628      	mov	r0, r5
 8008716:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800871a:	f000 b8eb 	b.w	80088f4 <_write_r>

0800871e <__sseek>:
 800871e:	b510      	push	{r4, lr}
 8008720:	460c      	mov	r4, r1
 8008722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008726:	f000 f8c1 	bl	80088ac <_lseek_r>
 800872a:	1c43      	adds	r3, r0, #1
 800872c:	89a3      	ldrh	r3, [r4, #12]
 800872e:	bf15      	itete	ne
 8008730:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008732:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008736:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800873a:	81a3      	strheq	r3, [r4, #12]
 800873c:	bf18      	it	ne
 800873e:	81a3      	strhne	r3, [r4, #12]
 8008740:	bd10      	pop	{r4, pc}

08008742 <__sclose>:
 8008742:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008746:	f000 b8a1 	b.w	800888c <_close_r>

0800874a <__swbuf_r>:
 800874a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800874c:	460e      	mov	r6, r1
 800874e:	4614      	mov	r4, r2
 8008750:	4605      	mov	r5, r0
 8008752:	b118      	cbz	r0, 800875c <__swbuf_r+0x12>
 8008754:	6a03      	ldr	r3, [r0, #32]
 8008756:	b90b      	cbnz	r3, 800875c <__swbuf_r+0x12>
 8008758:	f7ff feec 	bl	8008534 <__sinit>
 800875c:	69a3      	ldr	r3, [r4, #24]
 800875e:	60a3      	str	r3, [r4, #8]
 8008760:	89a3      	ldrh	r3, [r4, #12]
 8008762:	071a      	lsls	r2, r3, #28
 8008764:	d501      	bpl.n	800876a <__swbuf_r+0x20>
 8008766:	6923      	ldr	r3, [r4, #16]
 8008768:	b943      	cbnz	r3, 800877c <__swbuf_r+0x32>
 800876a:	4621      	mov	r1, r4
 800876c:	4628      	mov	r0, r5
 800876e:	f000 f82b 	bl	80087c8 <__swsetup_r>
 8008772:	b118      	cbz	r0, 800877c <__swbuf_r+0x32>
 8008774:	f04f 37ff 	mov.w	r7, #4294967295
 8008778:	4638      	mov	r0, r7
 800877a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800877c:	6823      	ldr	r3, [r4, #0]
 800877e:	6922      	ldr	r2, [r4, #16]
 8008780:	1a98      	subs	r0, r3, r2
 8008782:	6963      	ldr	r3, [r4, #20]
 8008784:	b2f6      	uxtb	r6, r6
 8008786:	4283      	cmp	r3, r0
 8008788:	4637      	mov	r7, r6
 800878a:	dc05      	bgt.n	8008798 <__swbuf_r+0x4e>
 800878c:	4621      	mov	r1, r4
 800878e:	4628      	mov	r0, r5
 8008790:	f002 fe9a 	bl	800b4c8 <_fflush_r>
 8008794:	2800      	cmp	r0, #0
 8008796:	d1ed      	bne.n	8008774 <__swbuf_r+0x2a>
 8008798:	68a3      	ldr	r3, [r4, #8]
 800879a:	3b01      	subs	r3, #1
 800879c:	60a3      	str	r3, [r4, #8]
 800879e:	6823      	ldr	r3, [r4, #0]
 80087a0:	1c5a      	adds	r2, r3, #1
 80087a2:	6022      	str	r2, [r4, #0]
 80087a4:	701e      	strb	r6, [r3, #0]
 80087a6:	6962      	ldr	r2, [r4, #20]
 80087a8:	1c43      	adds	r3, r0, #1
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d004      	beq.n	80087b8 <__swbuf_r+0x6e>
 80087ae:	89a3      	ldrh	r3, [r4, #12]
 80087b0:	07db      	lsls	r3, r3, #31
 80087b2:	d5e1      	bpl.n	8008778 <__swbuf_r+0x2e>
 80087b4:	2e0a      	cmp	r6, #10
 80087b6:	d1df      	bne.n	8008778 <__swbuf_r+0x2e>
 80087b8:	4621      	mov	r1, r4
 80087ba:	4628      	mov	r0, r5
 80087bc:	f002 fe84 	bl	800b4c8 <_fflush_r>
 80087c0:	2800      	cmp	r0, #0
 80087c2:	d0d9      	beq.n	8008778 <__swbuf_r+0x2e>
 80087c4:	e7d6      	b.n	8008774 <__swbuf_r+0x2a>
	...

080087c8 <__swsetup_r>:
 80087c8:	b538      	push	{r3, r4, r5, lr}
 80087ca:	4b29      	ldr	r3, [pc, #164]	@ (8008870 <__swsetup_r+0xa8>)
 80087cc:	4605      	mov	r5, r0
 80087ce:	6818      	ldr	r0, [r3, #0]
 80087d0:	460c      	mov	r4, r1
 80087d2:	b118      	cbz	r0, 80087dc <__swsetup_r+0x14>
 80087d4:	6a03      	ldr	r3, [r0, #32]
 80087d6:	b90b      	cbnz	r3, 80087dc <__swsetup_r+0x14>
 80087d8:	f7ff feac 	bl	8008534 <__sinit>
 80087dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087e0:	0719      	lsls	r1, r3, #28
 80087e2:	d422      	bmi.n	800882a <__swsetup_r+0x62>
 80087e4:	06da      	lsls	r2, r3, #27
 80087e6:	d407      	bmi.n	80087f8 <__swsetup_r+0x30>
 80087e8:	2209      	movs	r2, #9
 80087ea:	602a      	str	r2, [r5, #0]
 80087ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087f0:	81a3      	strh	r3, [r4, #12]
 80087f2:	f04f 30ff 	mov.w	r0, #4294967295
 80087f6:	e033      	b.n	8008860 <__swsetup_r+0x98>
 80087f8:	0758      	lsls	r0, r3, #29
 80087fa:	d512      	bpl.n	8008822 <__swsetup_r+0x5a>
 80087fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80087fe:	b141      	cbz	r1, 8008812 <__swsetup_r+0x4a>
 8008800:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008804:	4299      	cmp	r1, r3
 8008806:	d002      	beq.n	800880e <__swsetup_r+0x46>
 8008808:	4628      	mov	r0, r5
 800880a:	f000 ff11 	bl	8009630 <_free_r>
 800880e:	2300      	movs	r3, #0
 8008810:	6363      	str	r3, [r4, #52]	@ 0x34
 8008812:	89a3      	ldrh	r3, [r4, #12]
 8008814:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008818:	81a3      	strh	r3, [r4, #12]
 800881a:	2300      	movs	r3, #0
 800881c:	6063      	str	r3, [r4, #4]
 800881e:	6923      	ldr	r3, [r4, #16]
 8008820:	6023      	str	r3, [r4, #0]
 8008822:	89a3      	ldrh	r3, [r4, #12]
 8008824:	f043 0308 	orr.w	r3, r3, #8
 8008828:	81a3      	strh	r3, [r4, #12]
 800882a:	6923      	ldr	r3, [r4, #16]
 800882c:	b94b      	cbnz	r3, 8008842 <__swsetup_r+0x7a>
 800882e:	89a3      	ldrh	r3, [r4, #12]
 8008830:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008834:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008838:	d003      	beq.n	8008842 <__swsetup_r+0x7a>
 800883a:	4621      	mov	r1, r4
 800883c:	4628      	mov	r0, r5
 800883e:	f002 fe91 	bl	800b564 <__smakebuf_r>
 8008842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008846:	f013 0201 	ands.w	r2, r3, #1
 800884a:	d00a      	beq.n	8008862 <__swsetup_r+0x9a>
 800884c:	2200      	movs	r2, #0
 800884e:	60a2      	str	r2, [r4, #8]
 8008850:	6962      	ldr	r2, [r4, #20]
 8008852:	4252      	negs	r2, r2
 8008854:	61a2      	str	r2, [r4, #24]
 8008856:	6922      	ldr	r2, [r4, #16]
 8008858:	b942      	cbnz	r2, 800886c <__swsetup_r+0xa4>
 800885a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800885e:	d1c5      	bne.n	80087ec <__swsetup_r+0x24>
 8008860:	bd38      	pop	{r3, r4, r5, pc}
 8008862:	0799      	lsls	r1, r3, #30
 8008864:	bf58      	it	pl
 8008866:	6962      	ldrpl	r2, [r4, #20]
 8008868:	60a2      	str	r2, [r4, #8]
 800886a:	e7f4      	b.n	8008856 <__swsetup_r+0x8e>
 800886c:	2000      	movs	r0, #0
 800886e:	e7f7      	b.n	8008860 <__swsetup_r+0x98>
 8008870:	20000030 	.word	0x20000030

08008874 <memset>:
 8008874:	4402      	add	r2, r0
 8008876:	4603      	mov	r3, r0
 8008878:	4293      	cmp	r3, r2
 800887a:	d100      	bne.n	800887e <memset+0xa>
 800887c:	4770      	bx	lr
 800887e:	f803 1b01 	strb.w	r1, [r3], #1
 8008882:	e7f9      	b.n	8008878 <memset+0x4>

08008884 <_localeconv_r>:
 8008884:	4800      	ldr	r0, [pc, #0]	@ (8008888 <_localeconv_r+0x4>)
 8008886:	4770      	bx	lr
 8008888:	20000170 	.word	0x20000170

0800888c <_close_r>:
 800888c:	b538      	push	{r3, r4, r5, lr}
 800888e:	4d06      	ldr	r5, [pc, #24]	@ (80088a8 <_close_r+0x1c>)
 8008890:	2300      	movs	r3, #0
 8008892:	4604      	mov	r4, r0
 8008894:	4608      	mov	r0, r1
 8008896:	602b      	str	r3, [r5, #0]
 8008898:	f7f9 ffe1 	bl	800285e <_close>
 800889c:	1c43      	adds	r3, r0, #1
 800889e:	d102      	bne.n	80088a6 <_close_r+0x1a>
 80088a0:	682b      	ldr	r3, [r5, #0]
 80088a2:	b103      	cbz	r3, 80088a6 <_close_r+0x1a>
 80088a4:	6023      	str	r3, [r4, #0]
 80088a6:	bd38      	pop	{r3, r4, r5, pc}
 80088a8:	20000620 	.word	0x20000620

080088ac <_lseek_r>:
 80088ac:	b538      	push	{r3, r4, r5, lr}
 80088ae:	4d07      	ldr	r5, [pc, #28]	@ (80088cc <_lseek_r+0x20>)
 80088b0:	4604      	mov	r4, r0
 80088b2:	4608      	mov	r0, r1
 80088b4:	4611      	mov	r1, r2
 80088b6:	2200      	movs	r2, #0
 80088b8:	602a      	str	r2, [r5, #0]
 80088ba:	461a      	mov	r2, r3
 80088bc:	f7f9 fff6 	bl	80028ac <_lseek>
 80088c0:	1c43      	adds	r3, r0, #1
 80088c2:	d102      	bne.n	80088ca <_lseek_r+0x1e>
 80088c4:	682b      	ldr	r3, [r5, #0]
 80088c6:	b103      	cbz	r3, 80088ca <_lseek_r+0x1e>
 80088c8:	6023      	str	r3, [r4, #0]
 80088ca:	bd38      	pop	{r3, r4, r5, pc}
 80088cc:	20000620 	.word	0x20000620

080088d0 <_read_r>:
 80088d0:	b538      	push	{r3, r4, r5, lr}
 80088d2:	4d07      	ldr	r5, [pc, #28]	@ (80088f0 <_read_r+0x20>)
 80088d4:	4604      	mov	r4, r0
 80088d6:	4608      	mov	r0, r1
 80088d8:	4611      	mov	r1, r2
 80088da:	2200      	movs	r2, #0
 80088dc:	602a      	str	r2, [r5, #0]
 80088de:	461a      	mov	r2, r3
 80088e0:	f7f9 ff84 	bl	80027ec <_read>
 80088e4:	1c43      	adds	r3, r0, #1
 80088e6:	d102      	bne.n	80088ee <_read_r+0x1e>
 80088e8:	682b      	ldr	r3, [r5, #0]
 80088ea:	b103      	cbz	r3, 80088ee <_read_r+0x1e>
 80088ec:	6023      	str	r3, [r4, #0]
 80088ee:	bd38      	pop	{r3, r4, r5, pc}
 80088f0:	20000620 	.word	0x20000620

080088f4 <_write_r>:
 80088f4:	b538      	push	{r3, r4, r5, lr}
 80088f6:	4d07      	ldr	r5, [pc, #28]	@ (8008914 <_write_r+0x20>)
 80088f8:	4604      	mov	r4, r0
 80088fa:	4608      	mov	r0, r1
 80088fc:	4611      	mov	r1, r2
 80088fe:	2200      	movs	r2, #0
 8008900:	602a      	str	r2, [r5, #0]
 8008902:	461a      	mov	r2, r3
 8008904:	f7f9 ff8f 	bl	8002826 <_write>
 8008908:	1c43      	adds	r3, r0, #1
 800890a:	d102      	bne.n	8008912 <_write_r+0x1e>
 800890c:	682b      	ldr	r3, [r5, #0]
 800890e:	b103      	cbz	r3, 8008912 <_write_r+0x1e>
 8008910:	6023      	str	r3, [r4, #0]
 8008912:	bd38      	pop	{r3, r4, r5, pc}
 8008914:	20000620 	.word	0x20000620

08008918 <__errno>:
 8008918:	4b01      	ldr	r3, [pc, #4]	@ (8008920 <__errno+0x8>)
 800891a:	6818      	ldr	r0, [r3, #0]
 800891c:	4770      	bx	lr
 800891e:	bf00      	nop
 8008920:	20000030 	.word	0x20000030

08008924 <__libc_init_array>:
 8008924:	b570      	push	{r4, r5, r6, lr}
 8008926:	4d0d      	ldr	r5, [pc, #52]	@ (800895c <__libc_init_array+0x38>)
 8008928:	4c0d      	ldr	r4, [pc, #52]	@ (8008960 <__libc_init_array+0x3c>)
 800892a:	1b64      	subs	r4, r4, r5
 800892c:	10a4      	asrs	r4, r4, #2
 800892e:	2600      	movs	r6, #0
 8008930:	42a6      	cmp	r6, r4
 8008932:	d109      	bne.n	8008948 <__libc_init_array+0x24>
 8008934:	4d0b      	ldr	r5, [pc, #44]	@ (8008964 <__libc_init_array+0x40>)
 8008936:	4c0c      	ldr	r4, [pc, #48]	@ (8008968 <__libc_init_array+0x44>)
 8008938:	f003 fae4 	bl	800bf04 <_init>
 800893c:	1b64      	subs	r4, r4, r5
 800893e:	10a4      	asrs	r4, r4, #2
 8008940:	2600      	movs	r6, #0
 8008942:	42a6      	cmp	r6, r4
 8008944:	d105      	bne.n	8008952 <__libc_init_array+0x2e>
 8008946:	bd70      	pop	{r4, r5, r6, pc}
 8008948:	f855 3b04 	ldr.w	r3, [r5], #4
 800894c:	4798      	blx	r3
 800894e:	3601      	adds	r6, #1
 8008950:	e7ee      	b.n	8008930 <__libc_init_array+0xc>
 8008952:	f855 3b04 	ldr.w	r3, [r5], #4
 8008956:	4798      	blx	r3
 8008958:	3601      	adds	r6, #1
 800895a:	e7f2      	b.n	8008942 <__libc_init_array+0x1e>
 800895c:	0800c604 	.word	0x0800c604
 8008960:	0800c604 	.word	0x0800c604
 8008964:	0800c604 	.word	0x0800c604
 8008968:	0800c608 	.word	0x0800c608

0800896c <__retarget_lock_init_recursive>:
 800896c:	4770      	bx	lr

0800896e <__retarget_lock_acquire_recursive>:
 800896e:	4770      	bx	lr

08008970 <__retarget_lock_release_recursive>:
 8008970:	4770      	bx	lr
	...

08008974 <nanf>:
 8008974:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800897c <nanf+0x8>
 8008978:	4770      	bx	lr
 800897a:	bf00      	nop
 800897c:	7fc00000 	.word	0x7fc00000

08008980 <quorem>:
 8008980:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008984:	6903      	ldr	r3, [r0, #16]
 8008986:	690c      	ldr	r4, [r1, #16]
 8008988:	42a3      	cmp	r3, r4
 800898a:	4607      	mov	r7, r0
 800898c:	db7e      	blt.n	8008a8c <quorem+0x10c>
 800898e:	3c01      	subs	r4, #1
 8008990:	f101 0814 	add.w	r8, r1, #20
 8008994:	00a3      	lsls	r3, r4, #2
 8008996:	f100 0514 	add.w	r5, r0, #20
 800899a:	9300      	str	r3, [sp, #0]
 800899c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80089a0:	9301      	str	r3, [sp, #4]
 80089a2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80089a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80089aa:	3301      	adds	r3, #1
 80089ac:	429a      	cmp	r2, r3
 80089ae:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80089b2:	fbb2 f6f3 	udiv	r6, r2, r3
 80089b6:	d32e      	bcc.n	8008a16 <quorem+0x96>
 80089b8:	f04f 0a00 	mov.w	sl, #0
 80089bc:	46c4      	mov	ip, r8
 80089be:	46ae      	mov	lr, r5
 80089c0:	46d3      	mov	fp, sl
 80089c2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80089c6:	b298      	uxth	r0, r3
 80089c8:	fb06 a000 	mla	r0, r6, r0, sl
 80089cc:	0c02      	lsrs	r2, r0, #16
 80089ce:	0c1b      	lsrs	r3, r3, #16
 80089d0:	fb06 2303 	mla	r3, r6, r3, r2
 80089d4:	f8de 2000 	ldr.w	r2, [lr]
 80089d8:	b280      	uxth	r0, r0
 80089da:	b292      	uxth	r2, r2
 80089dc:	1a12      	subs	r2, r2, r0
 80089de:	445a      	add	r2, fp
 80089e0:	f8de 0000 	ldr.w	r0, [lr]
 80089e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80089ee:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80089f2:	b292      	uxth	r2, r2
 80089f4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80089f8:	45e1      	cmp	r9, ip
 80089fa:	f84e 2b04 	str.w	r2, [lr], #4
 80089fe:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008a02:	d2de      	bcs.n	80089c2 <quorem+0x42>
 8008a04:	9b00      	ldr	r3, [sp, #0]
 8008a06:	58eb      	ldr	r3, [r5, r3]
 8008a08:	b92b      	cbnz	r3, 8008a16 <quorem+0x96>
 8008a0a:	9b01      	ldr	r3, [sp, #4]
 8008a0c:	3b04      	subs	r3, #4
 8008a0e:	429d      	cmp	r5, r3
 8008a10:	461a      	mov	r2, r3
 8008a12:	d32f      	bcc.n	8008a74 <quorem+0xf4>
 8008a14:	613c      	str	r4, [r7, #16]
 8008a16:	4638      	mov	r0, r7
 8008a18:	f001 f9c6 	bl	8009da8 <__mcmp>
 8008a1c:	2800      	cmp	r0, #0
 8008a1e:	db25      	blt.n	8008a6c <quorem+0xec>
 8008a20:	4629      	mov	r1, r5
 8008a22:	2000      	movs	r0, #0
 8008a24:	f858 2b04 	ldr.w	r2, [r8], #4
 8008a28:	f8d1 c000 	ldr.w	ip, [r1]
 8008a2c:	fa1f fe82 	uxth.w	lr, r2
 8008a30:	fa1f f38c 	uxth.w	r3, ip
 8008a34:	eba3 030e 	sub.w	r3, r3, lr
 8008a38:	4403      	add	r3, r0
 8008a3a:	0c12      	lsrs	r2, r2, #16
 8008a3c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008a40:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a4a:	45c1      	cmp	r9, r8
 8008a4c:	f841 3b04 	str.w	r3, [r1], #4
 8008a50:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008a54:	d2e6      	bcs.n	8008a24 <quorem+0xa4>
 8008a56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a5e:	b922      	cbnz	r2, 8008a6a <quorem+0xea>
 8008a60:	3b04      	subs	r3, #4
 8008a62:	429d      	cmp	r5, r3
 8008a64:	461a      	mov	r2, r3
 8008a66:	d30b      	bcc.n	8008a80 <quorem+0x100>
 8008a68:	613c      	str	r4, [r7, #16]
 8008a6a:	3601      	adds	r6, #1
 8008a6c:	4630      	mov	r0, r6
 8008a6e:	b003      	add	sp, #12
 8008a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a74:	6812      	ldr	r2, [r2, #0]
 8008a76:	3b04      	subs	r3, #4
 8008a78:	2a00      	cmp	r2, #0
 8008a7a:	d1cb      	bne.n	8008a14 <quorem+0x94>
 8008a7c:	3c01      	subs	r4, #1
 8008a7e:	e7c6      	b.n	8008a0e <quorem+0x8e>
 8008a80:	6812      	ldr	r2, [r2, #0]
 8008a82:	3b04      	subs	r3, #4
 8008a84:	2a00      	cmp	r2, #0
 8008a86:	d1ef      	bne.n	8008a68 <quorem+0xe8>
 8008a88:	3c01      	subs	r4, #1
 8008a8a:	e7ea      	b.n	8008a62 <quorem+0xe2>
 8008a8c:	2000      	movs	r0, #0
 8008a8e:	e7ee      	b.n	8008a6e <quorem+0xee>

08008a90 <_dtoa_r>:
 8008a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a94:	69c7      	ldr	r7, [r0, #28]
 8008a96:	b097      	sub	sp, #92	@ 0x5c
 8008a98:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008a9c:	ec55 4b10 	vmov	r4, r5, d0
 8008aa0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008aa2:	9107      	str	r1, [sp, #28]
 8008aa4:	4681      	mov	r9, r0
 8008aa6:	920c      	str	r2, [sp, #48]	@ 0x30
 8008aa8:	9311      	str	r3, [sp, #68]	@ 0x44
 8008aaa:	b97f      	cbnz	r7, 8008acc <_dtoa_r+0x3c>
 8008aac:	2010      	movs	r0, #16
 8008aae:	f000 fe09 	bl	80096c4 <malloc>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	f8c9 001c 	str.w	r0, [r9, #28]
 8008ab8:	b920      	cbnz	r0, 8008ac4 <_dtoa_r+0x34>
 8008aba:	4ba9      	ldr	r3, [pc, #676]	@ (8008d60 <_dtoa_r+0x2d0>)
 8008abc:	21ef      	movs	r1, #239	@ 0xef
 8008abe:	48a9      	ldr	r0, [pc, #676]	@ (8008d64 <_dtoa_r+0x2d4>)
 8008ac0:	f002 fe02 	bl	800b6c8 <__assert_func>
 8008ac4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008ac8:	6007      	str	r7, [r0, #0]
 8008aca:	60c7      	str	r7, [r0, #12]
 8008acc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008ad0:	6819      	ldr	r1, [r3, #0]
 8008ad2:	b159      	cbz	r1, 8008aec <_dtoa_r+0x5c>
 8008ad4:	685a      	ldr	r2, [r3, #4]
 8008ad6:	604a      	str	r2, [r1, #4]
 8008ad8:	2301      	movs	r3, #1
 8008ada:	4093      	lsls	r3, r2
 8008adc:	608b      	str	r3, [r1, #8]
 8008ade:	4648      	mov	r0, r9
 8008ae0:	f000 fee6 	bl	80098b0 <_Bfree>
 8008ae4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	601a      	str	r2, [r3, #0]
 8008aec:	1e2b      	subs	r3, r5, #0
 8008aee:	bfb9      	ittee	lt
 8008af0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008af4:	9305      	strlt	r3, [sp, #20]
 8008af6:	2300      	movge	r3, #0
 8008af8:	6033      	strge	r3, [r6, #0]
 8008afa:	9f05      	ldr	r7, [sp, #20]
 8008afc:	4b9a      	ldr	r3, [pc, #616]	@ (8008d68 <_dtoa_r+0x2d8>)
 8008afe:	bfbc      	itt	lt
 8008b00:	2201      	movlt	r2, #1
 8008b02:	6032      	strlt	r2, [r6, #0]
 8008b04:	43bb      	bics	r3, r7
 8008b06:	d112      	bne.n	8008b2e <_dtoa_r+0x9e>
 8008b08:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008b0a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008b0e:	6013      	str	r3, [r2, #0]
 8008b10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008b14:	4323      	orrs	r3, r4
 8008b16:	f000 855a 	beq.w	80095ce <_dtoa_r+0xb3e>
 8008b1a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008b1c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8008d7c <_dtoa_r+0x2ec>
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	f000 855c 	beq.w	80095de <_dtoa_r+0xb4e>
 8008b26:	f10a 0303 	add.w	r3, sl, #3
 8008b2a:	f000 bd56 	b.w	80095da <_dtoa_r+0xb4a>
 8008b2e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008b32:	2200      	movs	r2, #0
 8008b34:	ec51 0b17 	vmov	r0, r1, d7
 8008b38:	2300      	movs	r3, #0
 8008b3a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8008b3e:	f7f7 ffe3 	bl	8000b08 <__aeabi_dcmpeq>
 8008b42:	4680      	mov	r8, r0
 8008b44:	b158      	cbz	r0, 8008b5e <_dtoa_r+0xce>
 8008b46:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008b48:	2301      	movs	r3, #1
 8008b4a:	6013      	str	r3, [r2, #0]
 8008b4c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008b4e:	b113      	cbz	r3, 8008b56 <_dtoa_r+0xc6>
 8008b50:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008b52:	4b86      	ldr	r3, [pc, #536]	@ (8008d6c <_dtoa_r+0x2dc>)
 8008b54:	6013      	str	r3, [r2, #0]
 8008b56:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008d80 <_dtoa_r+0x2f0>
 8008b5a:	f000 bd40 	b.w	80095de <_dtoa_r+0xb4e>
 8008b5e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008b62:	aa14      	add	r2, sp, #80	@ 0x50
 8008b64:	a915      	add	r1, sp, #84	@ 0x54
 8008b66:	4648      	mov	r0, r9
 8008b68:	f001 fa3e 	bl	8009fe8 <__d2b>
 8008b6c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008b70:	9002      	str	r0, [sp, #8]
 8008b72:	2e00      	cmp	r6, #0
 8008b74:	d078      	beq.n	8008c68 <_dtoa_r+0x1d8>
 8008b76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b78:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8008b7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008b84:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008b88:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008b8c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008b90:	4619      	mov	r1, r3
 8008b92:	2200      	movs	r2, #0
 8008b94:	4b76      	ldr	r3, [pc, #472]	@ (8008d70 <_dtoa_r+0x2e0>)
 8008b96:	f7f7 fb97 	bl	80002c8 <__aeabi_dsub>
 8008b9a:	a36b      	add	r3, pc, #428	@ (adr r3, 8008d48 <_dtoa_r+0x2b8>)
 8008b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba0:	f7f7 fd4a 	bl	8000638 <__aeabi_dmul>
 8008ba4:	a36a      	add	r3, pc, #424	@ (adr r3, 8008d50 <_dtoa_r+0x2c0>)
 8008ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008baa:	f7f7 fb8f 	bl	80002cc <__adddf3>
 8008bae:	4604      	mov	r4, r0
 8008bb0:	4630      	mov	r0, r6
 8008bb2:	460d      	mov	r5, r1
 8008bb4:	f7f7 fcd6 	bl	8000564 <__aeabi_i2d>
 8008bb8:	a367      	add	r3, pc, #412	@ (adr r3, 8008d58 <_dtoa_r+0x2c8>)
 8008bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bbe:	f7f7 fd3b 	bl	8000638 <__aeabi_dmul>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	4620      	mov	r0, r4
 8008bc8:	4629      	mov	r1, r5
 8008bca:	f7f7 fb7f 	bl	80002cc <__adddf3>
 8008bce:	4604      	mov	r4, r0
 8008bd0:	460d      	mov	r5, r1
 8008bd2:	f7f7 ffe1 	bl	8000b98 <__aeabi_d2iz>
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	4607      	mov	r7, r0
 8008bda:	2300      	movs	r3, #0
 8008bdc:	4620      	mov	r0, r4
 8008bde:	4629      	mov	r1, r5
 8008be0:	f7f7 ff9c 	bl	8000b1c <__aeabi_dcmplt>
 8008be4:	b140      	cbz	r0, 8008bf8 <_dtoa_r+0x168>
 8008be6:	4638      	mov	r0, r7
 8008be8:	f7f7 fcbc 	bl	8000564 <__aeabi_i2d>
 8008bec:	4622      	mov	r2, r4
 8008bee:	462b      	mov	r3, r5
 8008bf0:	f7f7 ff8a 	bl	8000b08 <__aeabi_dcmpeq>
 8008bf4:	b900      	cbnz	r0, 8008bf8 <_dtoa_r+0x168>
 8008bf6:	3f01      	subs	r7, #1
 8008bf8:	2f16      	cmp	r7, #22
 8008bfa:	d852      	bhi.n	8008ca2 <_dtoa_r+0x212>
 8008bfc:	4b5d      	ldr	r3, [pc, #372]	@ (8008d74 <_dtoa_r+0x2e4>)
 8008bfe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008c0a:	f7f7 ff87 	bl	8000b1c <__aeabi_dcmplt>
 8008c0e:	2800      	cmp	r0, #0
 8008c10:	d049      	beq.n	8008ca6 <_dtoa_r+0x216>
 8008c12:	3f01      	subs	r7, #1
 8008c14:	2300      	movs	r3, #0
 8008c16:	9310      	str	r3, [sp, #64]	@ 0x40
 8008c18:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008c1a:	1b9b      	subs	r3, r3, r6
 8008c1c:	1e5a      	subs	r2, r3, #1
 8008c1e:	bf45      	ittet	mi
 8008c20:	f1c3 0301 	rsbmi	r3, r3, #1
 8008c24:	9300      	strmi	r3, [sp, #0]
 8008c26:	2300      	movpl	r3, #0
 8008c28:	2300      	movmi	r3, #0
 8008c2a:	9206      	str	r2, [sp, #24]
 8008c2c:	bf54      	ite	pl
 8008c2e:	9300      	strpl	r3, [sp, #0]
 8008c30:	9306      	strmi	r3, [sp, #24]
 8008c32:	2f00      	cmp	r7, #0
 8008c34:	db39      	blt.n	8008caa <_dtoa_r+0x21a>
 8008c36:	9b06      	ldr	r3, [sp, #24]
 8008c38:	970d      	str	r7, [sp, #52]	@ 0x34
 8008c3a:	443b      	add	r3, r7
 8008c3c:	9306      	str	r3, [sp, #24]
 8008c3e:	2300      	movs	r3, #0
 8008c40:	9308      	str	r3, [sp, #32]
 8008c42:	9b07      	ldr	r3, [sp, #28]
 8008c44:	2b09      	cmp	r3, #9
 8008c46:	d863      	bhi.n	8008d10 <_dtoa_r+0x280>
 8008c48:	2b05      	cmp	r3, #5
 8008c4a:	bfc4      	itt	gt
 8008c4c:	3b04      	subgt	r3, #4
 8008c4e:	9307      	strgt	r3, [sp, #28]
 8008c50:	9b07      	ldr	r3, [sp, #28]
 8008c52:	f1a3 0302 	sub.w	r3, r3, #2
 8008c56:	bfcc      	ite	gt
 8008c58:	2400      	movgt	r4, #0
 8008c5a:	2401      	movle	r4, #1
 8008c5c:	2b03      	cmp	r3, #3
 8008c5e:	d863      	bhi.n	8008d28 <_dtoa_r+0x298>
 8008c60:	e8df f003 	tbb	[pc, r3]
 8008c64:	2b375452 	.word	0x2b375452
 8008c68:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008c6c:	441e      	add	r6, r3
 8008c6e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008c72:	2b20      	cmp	r3, #32
 8008c74:	bfc1      	itttt	gt
 8008c76:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008c7a:	409f      	lslgt	r7, r3
 8008c7c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008c80:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008c84:	bfd6      	itet	le
 8008c86:	f1c3 0320 	rsble	r3, r3, #32
 8008c8a:	ea47 0003 	orrgt.w	r0, r7, r3
 8008c8e:	fa04 f003 	lslle.w	r0, r4, r3
 8008c92:	f7f7 fc57 	bl	8000544 <__aeabi_ui2d>
 8008c96:	2201      	movs	r2, #1
 8008c98:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008c9c:	3e01      	subs	r6, #1
 8008c9e:	9212      	str	r2, [sp, #72]	@ 0x48
 8008ca0:	e776      	b.n	8008b90 <_dtoa_r+0x100>
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	e7b7      	b.n	8008c16 <_dtoa_r+0x186>
 8008ca6:	9010      	str	r0, [sp, #64]	@ 0x40
 8008ca8:	e7b6      	b.n	8008c18 <_dtoa_r+0x188>
 8008caa:	9b00      	ldr	r3, [sp, #0]
 8008cac:	1bdb      	subs	r3, r3, r7
 8008cae:	9300      	str	r3, [sp, #0]
 8008cb0:	427b      	negs	r3, r7
 8008cb2:	9308      	str	r3, [sp, #32]
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	930d      	str	r3, [sp, #52]	@ 0x34
 8008cb8:	e7c3      	b.n	8008c42 <_dtoa_r+0x1b2>
 8008cba:	2301      	movs	r3, #1
 8008cbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cbe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008cc0:	eb07 0b03 	add.w	fp, r7, r3
 8008cc4:	f10b 0301 	add.w	r3, fp, #1
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	9303      	str	r3, [sp, #12]
 8008ccc:	bfb8      	it	lt
 8008cce:	2301      	movlt	r3, #1
 8008cd0:	e006      	b.n	8008ce0 <_dtoa_r+0x250>
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cd6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	dd28      	ble.n	8008d2e <_dtoa_r+0x29e>
 8008cdc:	469b      	mov	fp, r3
 8008cde:	9303      	str	r3, [sp, #12]
 8008ce0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008ce4:	2100      	movs	r1, #0
 8008ce6:	2204      	movs	r2, #4
 8008ce8:	f102 0514 	add.w	r5, r2, #20
 8008cec:	429d      	cmp	r5, r3
 8008cee:	d926      	bls.n	8008d3e <_dtoa_r+0x2ae>
 8008cf0:	6041      	str	r1, [r0, #4]
 8008cf2:	4648      	mov	r0, r9
 8008cf4:	f000 fd9c 	bl	8009830 <_Balloc>
 8008cf8:	4682      	mov	sl, r0
 8008cfa:	2800      	cmp	r0, #0
 8008cfc:	d142      	bne.n	8008d84 <_dtoa_r+0x2f4>
 8008cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8008d78 <_dtoa_r+0x2e8>)
 8008d00:	4602      	mov	r2, r0
 8008d02:	f240 11af 	movw	r1, #431	@ 0x1af
 8008d06:	e6da      	b.n	8008abe <_dtoa_r+0x2e>
 8008d08:	2300      	movs	r3, #0
 8008d0a:	e7e3      	b.n	8008cd4 <_dtoa_r+0x244>
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	e7d5      	b.n	8008cbc <_dtoa_r+0x22c>
 8008d10:	2401      	movs	r4, #1
 8008d12:	2300      	movs	r3, #0
 8008d14:	9307      	str	r3, [sp, #28]
 8008d16:	9409      	str	r4, [sp, #36]	@ 0x24
 8008d18:	f04f 3bff 	mov.w	fp, #4294967295
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	f8cd b00c 	str.w	fp, [sp, #12]
 8008d22:	2312      	movs	r3, #18
 8008d24:	920c      	str	r2, [sp, #48]	@ 0x30
 8008d26:	e7db      	b.n	8008ce0 <_dtoa_r+0x250>
 8008d28:	2301      	movs	r3, #1
 8008d2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d2c:	e7f4      	b.n	8008d18 <_dtoa_r+0x288>
 8008d2e:	f04f 0b01 	mov.w	fp, #1
 8008d32:	f8cd b00c 	str.w	fp, [sp, #12]
 8008d36:	465b      	mov	r3, fp
 8008d38:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8008d3c:	e7d0      	b.n	8008ce0 <_dtoa_r+0x250>
 8008d3e:	3101      	adds	r1, #1
 8008d40:	0052      	lsls	r2, r2, #1
 8008d42:	e7d1      	b.n	8008ce8 <_dtoa_r+0x258>
 8008d44:	f3af 8000 	nop.w
 8008d48:	636f4361 	.word	0x636f4361
 8008d4c:	3fd287a7 	.word	0x3fd287a7
 8008d50:	8b60c8b3 	.word	0x8b60c8b3
 8008d54:	3fc68a28 	.word	0x3fc68a28
 8008d58:	509f79fb 	.word	0x509f79fb
 8008d5c:	3fd34413 	.word	0x3fd34413
 8008d60:	0800c216 	.word	0x0800c216
 8008d64:	0800c22d 	.word	0x0800c22d
 8008d68:	7ff00000 	.word	0x7ff00000
 8008d6c:	0800c1e1 	.word	0x0800c1e1
 8008d70:	3ff80000 	.word	0x3ff80000
 8008d74:	0800c3e0 	.word	0x0800c3e0
 8008d78:	0800c285 	.word	0x0800c285
 8008d7c:	0800c212 	.word	0x0800c212
 8008d80:	0800c1e0 	.word	0x0800c1e0
 8008d84:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008d88:	6018      	str	r0, [r3, #0]
 8008d8a:	9b03      	ldr	r3, [sp, #12]
 8008d8c:	2b0e      	cmp	r3, #14
 8008d8e:	f200 80a1 	bhi.w	8008ed4 <_dtoa_r+0x444>
 8008d92:	2c00      	cmp	r4, #0
 8008d94:	f000 809e 	beq.w	8008ed4 <_dtoa_r+0x444>
 8008d98:	2f00      	cmp	r7, #0
 8008d9a:	dd33      	ble.n	8008e04 <_dtoa_r+0x374>
 8008d9c:	4b9c      	ldr	r3, [pc, #624]	@ (8009010 <_dtoa_r+0x580>)
 8008d9e:	f007 020f 	and.w	r2, r7, #15
 8008da2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008da6:	ed93 7b00 	vldr	d7, [r3]
 8008daa:	05f8      	lsls	r0, r7, #23
 8008dac:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008db0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008db4:	d516      	bpl.n	8008de4 <_dtoa_r+0x354>
 8008db6:	4b97      	ldr	r3, [pc, #604]	@ (8009014 <_dtoa_r+0x584>)
 8008db8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008dbc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008dc0:	f7f7 fd64 	bl	800088c <__aeabi_ddiv>
 8008dc4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008dc8:	f004 040f 	and.w	r4, r4, #15
 8008dcc:	2603      	movs	r6, #3
 8008dce:	4d91      	ldr	r5, [pc, #580]	@ (8009014 <_dtoa_r+0x584>)
 8008dd0:	b954      	cbnz	r4, 8008de8 <_dtoa_r+0x358>
 8008dd2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008dd6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008dda:	f7f7 fd57 	bl	800088c <__aeabi_ddiv>
 8008dde:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008de2:	e028      	b.n	8008e36 <_dtoa_r+0x3a6>
 8008de4:	2602      	movs	r6, #2
 8008de6:	e7f2      	b.n	8008dce <_dtoa_r+0x33e>
 8008de8:	07e1      	lsls	r1, r4, #31
 8008dea:	d508      	bpl.n	8008dfe <_dtoa_r+0x36e>
 8008dec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008df0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008df4:	f7f7 fc20 	bl	8000638 <__aeabi_dmul>
 8008df8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008dfc:	3601      	adds	r6, #1
 8008dfe:	1064      	asrs	r4, r4, #1
 8008e00:	3508      	adds	r5, #8
 8008e02:	e7e5      	b.n	8008dd0 <_dtoa_r+0x340>
 8008e04:	f000 80af 	beq.w	8008f66 <_dtoa_r+0x4d6>
 8008e08:	427c      	negs	r4, r7
 8008e0a:	4b81      	ldr	r3, [pc, #516]	@ (8009010 <_dtoa_r+0x580>)
 8008e0c:	4d81      	ldr	r5, [pc, #516]	@ (8009014 <_dtoa_r+0x584>)
 8008e0e:	f004 020f 	and.w	r2, r4, #15
 8008e12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e1a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008e1e:	f7f7 fc0b 	bl	8000638 <__aeabi_dmul>
 8008e22:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e26:	1124      	asrs	r4, r4, #4
 8008e28:	2300      	movs	r3, #0
 8008e2a:	2602      	movs	r6, #2
 8008e2c:	2c00      	cmp	r4, #0
 8008e2e:	f040 808f 	bne.w	8008f50 <_dtoa_r+0x4c0>
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d1d3      	bne.n	8008dde <_dtoa_r+0x34e>
 8008e36:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008e38:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	f000 8094 	beq.w	8008f6a <_dtoa_r+0x4da>
 8008e42:	4b75      	ldr	r3, [pc, #468]	@ (8009018 <_dtoa_r+0x588>)
 8008e44:	2200      	movs	r2, #0
 8008e46:	4620      	mov	r0, r4
 8008e48:	4629      	mov	r1, r5
 8008e4a:	f7f7 fe67 	bl	8000b1c <__aeabi_dcmplt>
 8008e4e:	2800      	cmp	r0, #0
 8008e50:	f000 808b 	beq.w	8008f6a <_dtoa_r+0x4da>
 8008e54:	9b03      	ldr	r3, [sp, #12]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	f000 8087 	beq.w	8008f6a <_dtoa_r+0x4da>
 8008e5c:	f1bb 0f00 	cmp.w	fp, #0
 8008e60:	dd34      	ble.n	8008ecc <_dtoa_r+0x43c>
 8008e62:	4620      	mov	r0, r4
 8008e64:	4b6d      	ldr	r3, [pc, #436]	@ (800901c <_dtoa_r+0x58c>)
 8008e66:	2200      	movs	r2, #0
 8008e68:	4629      	mov	r1, r5
 8008e6a:	f7f7 fbe5 	bl	8000638 <__aeabi_dmul>
 8008e6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e72:	f107 38ff 	add.w	r8, r7, #4294967295
 8008e76:	3601      	adds	r6, #1
 8008e78:	465c      	mov	r4, fp
 8008e7a:	4630      	mov	r0, r6
 8008e7c:	f7f7 fb72 	bl	8000564 <__aeabi_i2d>
 8008e80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e84:	f7f7 fbd8 	bl	8000638 <__aeabi_dmul>
 8008e88:	4b65      	ldr	r3, [pc, #404]	@ (8009020 <_dtoa_r+0x590>)
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	f7f7 fa1e 	bl	80002cc <__adddf3>
 8008e90:	4605      	mov	r5, r0
 8008e92:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008e96:	2c00      	cmp	r4, #0
 8008e98:	d16a      	bne.n	8008f70 <_dtoa_r+0x4e0>
 8008e9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e9e:	4b61      	ldr	r3, [pc, #388]	@ (8009024 <_dtoa_r+0x594>)
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f7f7 fa11 	bl	80002c8 <__aeabi_dsub>
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008eae:	462a      	mov	r2, r5
 8008eb0:	4633      	mov	r3, r6
 8008eb2:	f7f7 fe51 	bl	8000b58 <__aeabi_dcmpgt>
 8008eb6:	2800      	cmp	r0, #0
 8008eb8:	f040 8298 	bne.w	80093ec <_dtoa_r+0x95c>
 8008ebc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ec0:	462a      	mov	r2, r5
 8008ec2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008ec6:	f7f7 fe29 	bl	8000b1c <__aeabi_dcmplt>
 8008eca:	bb38      	cbnz	r0, 8008f1c <_dtoa_r+0x48c>
 8008ecc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008ed0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008ed4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	f2c0 8157 	blt.w	800918a <_dtoa_r+0x6fa>
 8008edc:	2f0e      	cmp	r7, #14
 8008ede:	f300 8154 	bgt.w	800918a <_dtoa_r+0x6fa>
 8008ee2:	4b4b      	ldr	r3, [pc, #300]	@ (8009010 <_dtoa_r+0x580>)
 8008ee4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008ee8:	ed93 7b00 	vldr	d7, [r3]
 8008eec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	ed8d 7b00 	vstr	d7, [sp]
 8008ef4:	f280 80e5 	bge.w	80090c2 <_dtoa_r+0x632>
 8008ef8:	9b03      	ldr	r3, [sp, #12]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	f300 80e1 	bgt.w	80090c2 <_dtoa_r+0x632>
 8008f00:	d10c      	bne.n	8008f1c <_dtoa_r+0x48c>
 8008f02:	4b48      	ldr	r3, [pc, #288]	@ (8009024 <_dtoa_r+0x594>)
 8008f04:	2200      	movs	r2, #0
 8008f06:	ec51 0b17 	vmov	r0, r1, d7
 8008f0a:	f7f7 fb95 	bl	8000638 <__aeabi_dmul>
 8008f0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f12:	f7f7 fe17 	bl	8000b44 <__aeabi_dcmpge>
 8008f16:	2800      	cmp	r0, #0
 8008f18:	f000 8266 	beq.w	80093e8 <_dtoa_r+0x958>
 8008f1c:	2400      	movs	r4, #0
 8008f1e:	4625      	mov	r5, r4
 8008f20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008f22:	4656      	mov	r6, sl
 8008f24:	ea6f 0803 	mvn.w	r8, r3
 8008f28:	2700      	movs	r7, #0
 8008f2a:	4621      	mov	r1, r4
 8008f2c:	4648      	mov	r0, r9
 8008f2e:	f000 fcbf 	bl	80098b0 <_Bfree>
 8008f32:	2d00      	cmp	r5, #0
 8008f34:	f000 80bd 	beq.w	80090b2 <_dtoa_r+0x622>
 8008f38:	b12f      	cbz	r7, 8008f46 <_dtoa_r+0x4b6>
 8008f3a:	42af      	cmp	r7, r5
 8008f3c:	d003      	beq.n	8008f46 <_dtoa_r+0x4b6>
 8008f3e:	4639      	mov	r1, r7
 8008f40:	4648      	mov	r0, r9
 8008f42:	f000 fcb5 	bl	80098b0 <_Bfree>
 8008f46:	4629      	mov	r1, r5
 8008f48:	4648      	mov	r0, r9
 8008f4a:	f000 fcb1 	bl	80098b0 <_Bfree>
 8008f4e:	e0b0      	b.n	80090b2 <_dtoa_r+0x622>
 8008f50:	07e2      	lsls	r2, r4, #31
 8008f52:	d505      	bpl.n	8008f60 <_dtoa_r+0x4d0>
 8008f54:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008f58:	f7f7 fb6e 	bl	8000638 <__aeabi_dmul>
 8008f5c:	3601      	adds	r6, #1
 8008f5e:	2301      	movs	r3, #1
 8008f60:	1064      	asrs	r4, r4, #1
 8008f62:	3508      	adds	r5, #8
 8008f64:	e762      	b.n	8008e2c <_dtoa_r+0x39c>
 8008f66:	2602      	movs	r6, #2
 8008f68:	e765      	b.n	8008e36 <_dtoa_r+0x3a6>
 8008f6a:	9c03      	ldr	r4, [sp, #12]
 8008f6c:	46b8      	mov	r8, r7
 8008f6e:	e784      	b.n	8008e7a <_dtoa_r+0x3ea>
 8008f70:	4b27      	ldr	r3, [pc, #156]	@ (8009010 <_dtoa_r+0x580>)
 8008f72:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008f74:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008f78:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008f7c:	4454      	add	r4, sl
 8008f7e:	2900      	cmp	r1, #0
 8008f80:	d054      	beq.n	800902c <_dtoa_r+0x59c>
 8008f82:	4929      	ldr	r1, [pc, #164]	@ (8009028 <_dtoa_r+0x598>)
 8008f84:	2000      	movs	r0, #0
 8008f86:	f7f7 fc81 	bl	800088c <__aeabi_ddiv>
 8008f8a:	4633      	mov	r3, r6
 8008f8c:	462a      	mov	r2, r5
 8008f8e:	f7f7 f99b 	bl	80002c8 <__aeabi_dsub>
 8008f92:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008f96:	4656      	mov	r6, sl
 8008f98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f9c:	f7f7 fdfc 	bl	8000b98 <__aeabi_d2iz>
 8008fa0:	4605      	mov	r5, r0
 8008fa2:	f7f7 fadf 	bl	8000564 <__aeabi_i2d>
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	460b      	mov	r3, r1
 8008faa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008fae:	f7f7 f98b 	bl	80002c8 <__aeabi_dsub>
 8008fb2:	3530      	adds	r5, #48	@ 0x30
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	460b      	mov	r3, r1
 8008fb8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008fbc:	f806 5b01 	strb.w	r5, [r6], #1
 8008fc0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008fc4:	f7f7 fdaa 	bl	8000b1c <__aeabi_dcmplt>
 8008fc8:	2800      	cmp	r0, #0
 8008fca:	d172      	bne.n	80090b2 <_dtoa_r+0x622>
 8008fcc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008fd0:	4911      	ldr	r1, [pc, #68]	@ (8009018 <_dtoa_r+0x588>)
 8008fd2:	2000      	movs	r0, #0
 8008fd4:	f7f7 f978 	bl	80002c8 <__aeabi_dsub>
 8008fd8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008fdc:	f7f7 fd9e 	bl	8000b1c <__aeabi_dcmplt>
 8008fe0:	2800      	cmp	r0, #0
 8008fe2:	f040 80b4 	bne.w	800914e <_dtoa_r+0x6be>
 8008fe6:	42a6      	cmp	r6, r4
 8008fe8:	f43f af70 	beq.w	8008ecc <_dtoa_r+0x43c>
 8008fec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800901c <_dtoa_r+0x58c>)
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	f7f7 fb20 	bl	8000638 <__aeabi_dmul>
 8008ff8:	4b08      	ldr	r3, [pc, #32]	@ (800901c <_dtoa_r+0x58c>)
 8008ffa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008ffe:	2200      	movs	r2, #0
 8009000:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009004:	f7f7 fb18 	bl	8000638 <__aeabi_dmul>
 8009008:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800900c:	e7c4      	b.n	8008f98 <_dtoa_r+0x508>
 800900e:	bf00      	nop
 8009010:	0800c3e0 	.word	0x0800c3e0
 8009014:	0800c3b8 	.word	0x0800c3b8
 8009018:	3ff00000 	.word	0x3ff00000
 800901c:	40240000 	.word	0x40240000
 8009020:	401c0000 	.word	0x401c0000
 8009024:	40140000 	.word	0x40140000
 8009028:	3fe00000 	.word	0x3fe00000
 800902c:	4631      	mov	r1, r6
 800902e:	4628      	mov	r0, r5
 8009030:	f7f7 fb02 	bl	8000638 <__aeabi_dmul>
 8009034:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009038:	9413      	str	r4, [sp, #76]	@ 0x4c
 800903a:	4656      	mov	r6, sl
 800903c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009040:	f7f7 fdaa 	bl	8000b98 <__aeabi_d2iz>
 8009044:	4605      	mov	r5, r0
 8009046:	f7f7 fa8d 	bl	8000564 <__aeabi_i2d>
 800904a:	4602      	mov	r2, r0
 800904c:	460b      	mov	r3, r1
 800904e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009052:	f7f7 f939 	bl	80002c8 <__aeabi_dsub>
 8009056:	3530      	adds	r5, #48	@ 0x30
 8009058:	f806 5b01 	strb.w	r5, [r6], #1
 800905c:	4602      	mov	r2, r0
 800905e:	460b      	mov	r3, r1
 8009060:	42a6      	cmp	r6, r4
 8009062:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009066:	f04f 0200 	mov.w	r2, #0
 800906a:	d124      	bne.n	80090b6 <_dtoa_r+0x626>
 800906c:	4baf      	ldr	r3, [pc, #700]	@ (800932c <_dtoa_r+0x89c>)
 800906e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009072:	f7f7 f92b 	bl	80002cc <__adddf3>
 8009076:	4602      	mov	r2, r0
 8009078:	460b      	mov	r3, r1
 800907a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800907e:	f7f7 fd6b 	bl	8000b58 <__aeabi_dcmpgt>
 8009082:	2800      	cmp	r0, #0
 8009084:	d163      	bne.n	800914e <_dtoa_r+0x6be>
 8009086:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800908a:	49a8      	ldr	r1, [pc, #672]	@ (800932c <_dtoa_r+0x89c>)
 800908c:	2000      	movs	r0, #0
 800908e:	f7f7 f91b 	bl	80002c8 <__aeabi_dsub>
 8009092:	4602      	mov	r2, r0
 8009094:	460b      	mov	r3, r1
 8009096:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800909a:	f7f7 fd3f 	bl	8000b1c <__aeabi_dcmplt>
 800909e:	2800      	cmp	r0, #0
 80090a0:	f43f af14 	beq.w	8008ecc <_dtoa_r+0x43c>
 80090a4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80090a6:	1e73      	subs	r3, r6, #1
 80090a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80090aa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80090ae:	2b30      	cmp	r3, #48	@ 0x30
 80090b0:	d0f8      	beq.n	80090a4 <_dtoa_r+0x614>
 80090b2:	4647      	mov	r7, r8
 80090b4:	e03b      	b.n	800912e <_dtoa_r+0x69e>
 80090b6:	4b9e      	ldr	r3, [pc, #632]	@ (8009330 <_dtoa_r+0x8a0>)
 80090b8:	f7f7 fabe 	bl	8000638 <__aeabi_dmul>
 80090bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80090c0:	e7bc      	b.n	800903c <_dtoa_r+0x5ac>
 80090c2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80090c6:	4656      	mov	r6, sl
 80090c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80090cc:	4620      	mov	r0, r4
 80090ce:	4629      	mov	r1, r5
 80090d0:	f7f7 fbdc 	bl	800088c <__aeabi_ddiv>
 80090d4:	f7f7 fd60 	bl	8000b98 <__aeabi_d2iz>
 80090d8:	4680      	mov	r8, r0
 80090da:	f7f7 fa43 	bl	8000564 <__aeabi_i2d>
 80090de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80090e2:	f7f7 faa9 	bl	8000638 <__aeabi_dmul>
 80090e6:	4602      	mov	r2, r0
 80090e8:	460b      	mov	r3, r1
 80090ea:	4620      	mov	r0, r4
 80090ec:	4629      	mov	r1, r5
 80090ee:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80090f2:	f7f7 f8e9 	bl	80002c8 <__aeabi_dsub>
 80090f6:	f806 4b01 	strb.w	r4, [r6], #1
 80090fa:	9d03      	ldr	r5, [sp, #12]
 80090fc:	eba6 040a 	sub.w	r4, r6, sl
 8009100:	42a5      	cmp	r5, r4
 8009102:	4602      	mov	r2, r0
 8009104:	460b      	mov	r3, r1
 8009106:	d133      	bne.n	8009170 <_dtoa_r+0x6e0>
 8009108:	f7f7 f8e0 	bl	80002cc <__adddf3>
 800910c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009110:	4604      	mov	r4, r0
 8009112:	460d      	mov	r5, r1
 8009114:	f7f7 fd20 	bl	8000b58 <__aeabi_dcmpgt>
 8009118:	b9c0      	cbnz	r0, 800914c <_dtoa_r+0x6bc>
 800911a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800911e:	4620      	mov	r0, r4
 8009120:	4629      	mov	r1, r5
 8009122:	f7f7 fcf1 	bl	8000b08 <__aeabi_dcmpeq>
 8009126:	b110      	cbz	r0, 800912e <_dtoa_r+0x69e>
 8009128:	f018 0f01 	tst.w	r8, #1
 800912c:	d10e      	bne.n	800914c <_dtoa_r+0x6bc>
 800912e:	9902      	ldr	r1, [sp, #8]
 8009130:	4648      	mov	r0, r9
 8009132:	f000 fbbd 	bl	80098b0 <_Bfree>
 8009136:	2300      	movs	r3, #0
 8009138:	7033      	strb	r3, [r6, #0]
 800913a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800913c:	3701      	adds	r7, #1
 800913e:	601f      	str	r7, [r3, #0]
 8009140:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009142:	2b00      	cmp	r3, #0
 8009144:	f000 824b 	beq.w	80095de <_dtoa_r+0xb4e>
 8009148:	601e      	str	r6, [r3, #0]
 800914a:	e248      	b.n	80095de <_dtoa_r+0xb4e>
 800914c:	46b8      	mov	r8, r7
 800914e:	4633      	mov	r3, r6
 8009150:	461e      	mov	r6, r3
 8009152:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009156:	2a39      	cmp	r2, #57	@ 0x39
 8009158:	d106      	bne.n	8009168 <_dtoa_r+0x6d8>
 800915a:	459a      	cmp	sl, r3
 800915c:	d1f8      	bne.n	8009150 <_dtoa_r+0x6c0>
 800915e:	2230      	movs	r2, #48	@ 0x30
 8009160:	f108 0801 	add.w	r8, r8, #1
 8009164:	f88a 2000 	strb.w	r2, [sl]
 8009168:	781a      	ldrb	r2, [r3, #0]
 800916a:	3201      	adds	r2, #1
 800916c:	701a      	strb	r2, [r3, #0]
 800916e:	e7a0      	b.n	80090b2 <_dtoa_r+0x622>
 8009170:	4b6f      	ldr	r3, [pc, #444]	@ (8009330 <_dtoa_r+0x8a0>)
 8009172:	2200      	movs	r2, #0
 8009174:	f7f7 fa60 	bl	8000638 <__aeabi_dmul>
 8009178:	2200      	movs	r2, #0
 800917a:	2300      	movs	r3, #0
 800917c:	4604      	mov	r4, r0
 800917e:	460d      	mov	r5, r1
 8009180:	f7f7 fcc2 	bl	8000b08 <__aeabi_dcmpeq>
 8009184:	2800      	cmp	r0, #0
 8009186:	d09f      	beq.n	80090c8 <_dtoa_r+0x638>
 8009188:	e7d1      	b.n	800912e <_dtoa_r+0x69e>
 800918a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800918c:	2a00      	cmp	r2, #0
 800918e:	f000 80ea 	beq.w	8009366 <_dtoa_r+0x8d6>
 8009192:	9a07      	ldr	r2, [sp, #28]
 8009194:	2a01      	cmp	r2, #1
 8009196:	f300 80cd 	bgt.w	8009334 <_dtoa_r+0x8a4>
 800919a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800919c:	2a00      	cmp	r2, #0
 800919e:	f000 80c1 	beq.w	8009324 <_dtoa_r+0x894>
 80091a2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80091a6:	9c08      	ldr	r4, [sp, #32]
 80091a8:	9e00      	ldr	r6, [sp, #0]
 80091aa:	9a00      	ldr	r2, [sp, #0]
 80091ac:	441a      	add	r2, r3
 80091ae:	9200      	str	r2, [sp, #0]
 80091b0:	9a06      	ldr	r2, [sp, #24]
 80091b2:	2101      	movs	r1, #1
 80091b4:	441a      	add	r2, r3
 80091b6:	4648      	mov	r0, r9
 80091b8:	9206      	str	r2, [sp, #24]
 80091ba:	f000 fc77 	bl	8009aac <__i2b>
 80091be:	4605      	mov	r5, r0
 80091c0:	b166      	cbz	r6, 80091dc <_dtoa_r+0x74c>
 80091c2:	9b06      	ldr	r3, [sp, #24]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	dd09      	ble.n	80091dc <_dtoa_r+0x74c>
 80091c8:	42b3      	cmp	r3, r6
 80091ca:	9a00      	ldr	r2, [sp, #0]
 80091cc:	bfa8      	it	ge
 80091ce:	4633      	movge	r3, r6
 80091d0:	1ad2      	subs	r2, r2, r3
 80091d2:	9200      	str	r2, [sp, #0]
 80091d4:	9a06      	ldr	r2, [sp, #24]
 80091d6:	1af6      	subs	r6, r6, r3
 80091d8:	1ad3      	subs	r3, r2, r3
 80091da:	9306      	str	r3, [sp, #24]
 80091dc:	9b08      	ldr	r3, [sp, #32]
 80091de:	b30b      	cbz	r3, 8009224 <_dtoa_r+0x794>
 80091e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	f000 80c6 	beq.w	8009374 <_dtoa_r+0x8e4>
 80091e8:	2c00      	cmp	r4, #0
 80091ea:	f000 80c0 	beq.w	800936e <_dtoa_r+0x8de>
 80091ee:	4629      	mov	r1, r5
 80091f0:	4622      	mov	r2, r4
 80091f2:	4648      	mov	r0, r9
 80091f4:	f000 fd12 	bl	8009c1c <__pow5mult>
 80091f8:	9a02      	ldr	r2, [sp, #8]
 80091fa:	4601      	mov	r1, r0
 80091fc:	4605      	mov	r5, r0
 80091fe:	4648      	mov	r0, r9
 8009200:	f000 fc6a 	bl	8009ad8 <__multiply>
 8009204:	9902      	ldr	r1, [sp, #8]
 8009206:	4680      	mov	r8, r0
 8009208:	4648      	mov	r0, r9
 800920a:	f000 fb51 	bl	80098b0 <_Bfree>
 800920e:	9b08      	ldr	r3, [sp, #32]
 8009210:	1b1b      	subs	r3, r3, r4
 8009212:	9308      	str	r3, [sp, #32]
 8009214:	f000 80b1 	beq.w	800937a <_dtoa_r+0x8ea>
 8009218:	9a08      	ldr	r2, [sp, #32]
 800921a:	4641      	mov	r1, r8
 800921c:	4648      	mov	r0, r9
 800921e:	f000 fcfd 	bl	8009c1c <__pow5mult>
 8009222:	9002      	str	r0, [sp, #8]
 8009224:	2101      	movs	r1, #1
 8009226:	4648      	mov	r0, r9
 8009228:	f000 fc40 	bl	8009aac <__i2b>
 800922c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800922e:	4604      	mov	r4, r0
 8009230:	2b00      	cmp	r3, #0
 8009232:	f000 81d8 	beq.w	80095e6 <_dtoa_r+0xb56>
 8009236:	461a      	mov	r2, r3
 8009238:	4601      	mov	r1, r0
 800923a:	4648      	mov	r0, r9
 800923c:	f000 fcee 	bl	8009c1c <__pow5mult>
 8009240:	9b07      	ldr	r3, [sp, #28]
 8009242:	2b01      	cmp	r3, #1
 8009244:	4604      	mov	r4, r0
 8009246:	f300 809f 	bgt.w	8009388 <_dtoa_r+0x8f8>
 800924a:	9b04      	ldr	r3, [sp, #16]
 800924c:	2b00      	cmp	r3, #0
 800924e:	f040 8097 	bne.w	8009380 <_dtoa_r+0x8f0>
 8009252:	9b05      	ldr	r3, [sp, #20]
 8009254:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009258:	2b00      	cmp	r3, #0
 800925a:	f040 8093 	bne.w	8009384 <_dtoa_r+0x8f4>
 800925e:	9b05      	ldr	r3, [sp, #20]
 8009260:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009264:	0d1b      	lsrs	r3, r3, #20
 8009266:	051b      	lsls	r3, r3, #20
 8009268:	b133      	cbz	r3, 8009278 <_dtoa_r+0x7e8>
 800926a:	9b00      	ldr	r3, [sp, #0]
 800926c:	3301      	adds	r3, #1
 800926e:	9300      	str	r3, [sp, #0]
 8009270:	9b06      	ldr	r3, [sp, #24]
 8009272:	3301      	adds	r3, #1
 8009274:	9306      	str	r3, [sp, #24]
 8009276:	2301      	movs	r3, #1
 8009278:	9308      	str	r3, [sp, #32]
 800927a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800927c:	2b00      	cmp	r3, #0
 800927e:	f000 81b8 	beq.w	80095f2 <_dtoa_r+0xb62>
 8009282:	6923      	ldr	r3, [r4, #16]
 8009284:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009288:	6918      	ldr	r0, [r3, #16]
 800928a:	f000 fbc3 	bl	8009a14 <__hi0bits>
 800928e:	f1c0 0020 	rsb	r0, r0, #32
 8009292:	9b06      	ldr	r3, [sp, #24]
 8009294:	4418      	add	r0, r3
 8009296:	f010 001f 	ands.w	r0, r0, #31
 800929a:	f000 8082 	beq.w	80093a2 <_dtoa_r+0x912>
 800929e:	f1c0 0320 	rsb	r3, r0, #32
 80092a2:	2b04      	cmp	r3, #4
 80092a4:	dd73      	ble.n	800938e <_dtoa_r+0x8fe>
 80092a6:	9b00      	ldr	r3, [sp, #0]
 80092a8:	f1c0 001c 	rsb	r0, r0, #28
 80092ac:	4403      	add	r3, r0
 80092ae:	9300      	str	r3, [sp, #0]
 80092b0:	9b06      	ldr	r3, [sp, #24]
 80092b2:	4403      	add	r3, r0
 80092b4:	4406      	add	r6, r0
 80092b6:	9306      	str	r3, [sp, #24]
 80092b8:	9b00      	ldr	r3, [sp, #0]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	dd05      	ble.n	80092ca <_dtoa_r+0x83a>
 80092be:	9902      	ldr	r1, [sp, #8]
 80092c0:	461a      	mov	r2, r3
 80092c2:	4648      	mov	r0, r9
 80092c4:	f000 fd04 	bl	8009cd0 <__lshift>
 80092c8:	9002      	str	r0, [sp, #8]
 80092ca:	9b06      	ldr	r3, [sp, #24]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	dd05      	ble.n	80092dc <_dtoa_r+0x84c>
 80092d0:	4621      	mov	r1, r4
 80092d2:	461a      	mov	r2, r3
 80092d4:	4648      	mov	r0, r9
 80092d6:	f000 fcfb 	bl	8009cd0 <__lshift>
 80092da:	4604      	mov	r4, r0
 80092dc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d061      	beq.n	80093a6 <_dtoa_r+0x916>
 80092e2:	9802      	ldr	r0, [sp, #8]
 80092e4:	4621      	mov	r1, r4
 80092e6:	f000 fd5f 	bl	8009da8 <__mcmp>
 80092ea:	2800      	cmp	r0, #0
 80092ec:	da5b      	bge.n	80093a6 <_dtoa_r+0x916>
 80092ee:	2300      	movs	r3, #0
 80092f0:	9902      	ldr	r1, [sp, #8]
 80092f2:	220a      	movs	r2, #10
 80092f4:	4648      	mov	r0, r9
 80092f6:	f000 fafd 	bl	80098f4 <__multadd>
 80092fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092fc:	9002      	str	r0, [sp, #8]
 80092fe:	f107 38ff 	add.w	r8, r7, #4294967295
 8009302:	2b00      	cmp	r3, #0
 8009304:	f000 8177 	beq.w	80095f6 <_dtoa_r+0xb66>
 8009308:	4629      	mov	r1, r5
 800930a:	2300      	movs	r3, #0
 800930c:	220a      	movs	r2, #10
 800930e:	4648      	mov	r0, r9
 8009310:	f000 faf0 	bl	80098f4 <__multadd>
 8009314:	f1bb 0f00 	cmp.w	fp, #0
 8009318:	4605      	mov	r5, r0
 800931a:	dc6f      	bgt.n	80093fc <_dtoa_r+0x96c>
 800931c:	9b07      	ldr	r3, [sp, #28]
 800931e:	2b02      	cmp	r3, #2
 8009320:	dc49      	bgt.n	80093b6 <_dtoa_r+0x926>
 8009322:	e06b      	b.n	80093fc <_dtoa_r+0x96c>
 8009324:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009326:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800932a:	e73c      	b.n	80091a6 <_dtoa_r+0x716>
 800932c:	3fe00000 	.word	0x3fe00000
 8009330:	40240000 	.word	0x40240000
 8009334:	9b03      	ldr	r3, [sp, #12]
 8009336:	1e5c      	subs	r4, r3, #1
 8009338:	9b08      	ldr	r3, [sp, #32]
 800933a:	42a3      	cmp	r3, r4
 800933c:	db09      	blt.n	8009352 <_dtoa_r+0x8c2>
 800933e:	1b1c      	subs	r4, r3, r4
 8009340:	9b03      	ldr	r3, [sp, #12]
 8009342:	2b00      	cmp	r3, #0
 8009344:	f6bf af30 	bge.w	80091a8 <_dtoa_r+0x718>
 8009348:	9b00      	ldr	r3, [sp, #0]
 800934a:	9a03      	ldr	r2, [sp, #12]
 800934c:	1a9e      	subs	r6, r3, r2
 800934e:	2300      	movs	r3, #0
 8009350:	e72b      	b.n	80091aa <_dtoa_r+0x71a>
 8009352:	9b08      	ldr	r3, [sp, #32]
 8009354:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009356:	9408      	str	r4, [sp, #32]
 8009358:	1ae3      	subs	r3, r4, r3
 800935a:	441a      	add	r2, r3
 800935c:	9e00      	ldr	r6, [sp, #0]
 800935e:	9b03      	ldr	r3, [sp, #12]
 8009360:	920d      	str	r2, [sp, #52]	@ 0x34
 8009362:	2400      	movs	r4, #0
 8009364:	e721      	b.n	80091aa <_dtoa_r+0x71a>
 8009366:	9c08      	ldr	r4, [sp, #32]
 8009368:	9e00      	ldr	r6, [sp, #0]
 800936a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800936c:	e728      	b.n	80091c0 <_dtoa_r+0x730>
 800936e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009372:	e751      	b.n	8009218 <_dtoa_r+0x788>
 8009374:	9a08      	ldr	r2, [sp, #32]
 8009376:	9902      	ldr	r1, [sp, #8]
 8009378:	e750      	b.n	800921c <_dtoa_r+0x78c>
 800937a:	f8cd 8008 	str.w	r8, [sp, #8]
 800937e:	e751      	b.n	8009224 <_dtoa_r+0x794>
 8009380:	2300      	movs	r3, #0
 8009382:	e779      	b.n	8009278 <_dtoa_r+0x7e8>
 8009384:	9b04      	ldr	r3, [sp, #16]
 8009386:	e777      	b.n	8009278 <_dtoa_r+0x7e8>
 8009388:	2300      	movs	r3, #0
 800938a:	9308      	str	r3, [sp, #32]
 800938c:	e779      	b.n	8009282 <_dtoa_r+0x7f2>
 800938e:	d093      	beq.n	80092b8 <_dtoa_r+0x828>
 8009390:	9a00      	ldr	r2, [sp, #0]
 8009392:	331c      	adds	r3, #28
 8009394:	441a      	add	r2, r3
 8009396:	9200      	str	r2, [sp, #0]
 8009398:	9a06      	ldr	r2, [sp, #24]
 800939a:	441a      	add	r2, r3
 800939c:	441e      	add	r6, r3
 800939e:	9206      	str	r2, [sp, #24]
 80093a0:	e78a      	b.n	80092b8 <_dtoa_r+0x828>
 80093a2:	4603      	mov	r3, r0
 80093a4:	e7f4      	b.n	8009390 <_dtoa_r+0x900>
 80093a6:	9b03      	ldr	r3, [sp, #12]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	46b8      	mov	r8, r7
 80093ac:	dc20      	bgt.n	80093f0 <_dtoa_r+0x960>
 80093ae:	469b      	mov	fp, r3
 80093b0:	9b07      	ldr	r3, [sp, #28]
 80093b2:	2b02      	cmp	r3, #2
 80093b4:	dd1e      	ble.n	80093f4 <_dtoa_r+0x964>
 80093b6:	f1bb 0f00 	cmp.w	fp, #0
 80093ba:	f47f adb1 	bne.w	8008f20 <_dtoa_r+0x490>
 80093be:	4621      	mov	r1, r4
 80093c0:	465b      	mov	r3, fp
 80093c2:	2205      	movs	r2, #5
 80093c4:	4648      	mov	r0, r9
 80093c6:	f000 fa95 	bl	80098f4 <__multadd>
 80093ca:	4601      	mov	r1, r0
 80093cc:	4604      	mov	r4, r0
 80093ce:	9802      	ldr	r0, [sp, #8]
 80093d0:	f000 fcea 	bl	8009da8 <__mcmp>
 80093d4:	2800      	cmp	r0, #0
 80093d6:	f77f ada3 	ble.w	8008f20 <_dtoa_r+0x490>
 80093da:	4656      	mov	r6, sl
 80093dc:	2331      	movs	r3, #49	@ 0x31
 80093de:	f806 3b01 	strb.w	r3, [r6], #1
 80093e2:	f108 0801 	add.w	r8, r8, #1
 80093e6:	e59f      	b.n	8008f28 <_dtoa_r+0x498>
 80093e8:	9c03      	ldr	r4, [sp, #12]
 80093ea:	46b8      	mov	r8, r7
 80093ec:	4625      	mov	r5, r4
 80093ee:	e7f4      	b.n	80093da <_dtoa_r+0x94a>
 80093f0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80093f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	f000 8101 	beq.w	80095fe <_dtoa_r+0xb6e>
 80093fc:	2e00      	cmp	r6, #0
 80093fe:	dd05      	ble.n	800940c <_dtoa_r+0x97c>
 8009400:	4629      	mov	r1, r5
 8009402:	4632      	mov	r2, r6
 8009404:	4648      	mov	r0, r9
 8009406:	f000 fc63 	bl	8009cd0 <__lshift>
 800940a:	4605      	mov	r5, r0
 800940c:	9b08      	ldr	r3, [sp, #32]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d05c      	beq.n	80094cc <_dtoa_r+0xa3c>
 8009412:	6869      	ldr	r1, [r5, #4]
 8009414:	4648      	mov	r0, r9
 8009416:	f000 fa0b 	bl	8009830 <_Balloc>
 800941a:	4606      	mov	r6, r0
 800941c:	b928      	cbnz	r0, 800942a <_dtoa_r+0x99a>
 800941e:	4b82      	ldr	r3, [pc, #520]	@ (8009628 <_dtoa_r+0xb98>)
 8009420:	4602      	mov	r2, r0
 8009422:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009426:	f7ff bb4a 	b.w	8008abe <_dtoa_r+0x2e>
 800942a:	692a      	ldr	r2, [r5, #16]
 800942c:	3202      	adds	r2, #2
 800942e:	0092      	lsls	r2, r2, #2
 8009430:	f105 010c 	add.w	r1, r5, #12
 8009434:	300c      	adds	r0, #12
 8009436:	f002 f92f 	bl	800b698 <memcpy>
 800943a:	2201      	movs	r2, #1
 800943c:	4631      	mov	r1, r6
 800943e:	4648      	mov	r0, r9
 8009440:	f000 fc46 	bl	8009cd0 <__lshift>
 8009444:	f10a 0301 	add.w	r3, sl, #1
 8009448:	9300      	str	r3, [sp, #0]
 800944a:	eb0a 030b 	add.w	r3, sl, fp
 800944e:	9308      	str	r3, [sp, #32]
 8009450:	9b04      	ldr	r3, [sp, #16]
 8009452:	f003 0301 	and.w	r3, r3, #1
 8009456:	462f      	mov	r7, r5
 8009458:	9306      	str	r3, [sp, #24]
 800945a:	4605      	mov	r5, r0
 800945c:	9b00      	ldr	r3, [sp, #0]
 800945e:	9802      	ldr	r0, [sp, #8]
 8009460:	4621      	mov	r1, r4
 8009462:	f103 3bff 	add.w	fp, r3, #4294967295
 8009466:	f7ff fa8b 	bl	8008980 <quorem>
 800946a:	4603      	mov	r3, r0
 800946c:	3330      	adds	r3, #48	@ 0x30
 800946e:	9003      	str	r0, [sp, #12]
 8009470:	4639      	mov	r1, r7
 8009472:	9802      	ldr	r0, [sp, #8]
 8009474:	9309      	str	r3, [sp, #36]	@ 0x24
 8009476:	f000 fc97 	bl	8009da8 <__mcmp>
 800947a:	462a      	mov	r2, r5
 800947c:	9004      	str	r0, [sp, #16]
 800947e:	4621      	mov	r1, r4
 8009480:	4648      	mov	r0, r9
 8009482:	f000 fcad 	bl	8009de0 <__mdiff>
 8009486:	68c2      	ldr	r2, [r0, #12]
 8009488:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800948a:	4606      	mov	r6, r0
 800948c:	bb02      	cbnz	r2, 80094d0 <_dtoa_r+0xa40>
 800948e:	4601      	mov	r1, r0
 8009490:	9802      	ldr	r0, [sp, #8]
 8009492:	f000 fc89 	bl	8009da8 <__mcmp>
 8009496:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009498:	4602      	mov	r2, r0
 800949a:	4631      	mov	r1, r6
 800949c:	4648      	mov	r0, r9
 800949e:	920c      	str	r2, [sp, #48]	@ 0x30
 80094a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80094a2:	f000 fa05 	bl	80098b0 <_Bfree>
 80094a6:	9b07      	ldr	r3, [sp, #28]
 80094a8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80094aa:	9e00      	ldr	r6, [sp, #0]
 80094ac:	ea42 0103 	orr.w	r1, r2, r3
 80094b0:	9b06      	ldr	r3, [sp, #24]
 80094b2:	4319      	orrs	r1, r3
 80094b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094b6:	d10d      	bne.n	80094d4 <_dtoa_r+0xa44>
 80094b8:	2b39      	cmp	r3, #57	@ 0x39
 80094ba:	d027      	beq.n	800950c <_dtoa_r+0xa7c>
 80094bc:	9a04      	ldr	r2, [sp, #16]
 80094be:	2a00      	cmp	r2, #0
 80094c0:	dd01      	ble.n	80094c6 <_dtoa_r+0xa36>
 80094c2:	9b03      	ldr	r3, [sp, #12]
 80094c4:	3331      	adds	r3, #49	@ 0x31
 80094c6:	f88b 3000 	strb.w	r3, [fp]
 80094ca:	e52e      	b.n	8008f2a <_dtoa_r+0x49a>
 80094cc:	4628      	mov	r0, r5
 80094ce:	e7b9      	b.n	8009444 <_dtoa_r+0x9b4>
 80094d0:	2201      	movs	r2, #1
 80094d2:	e7e2      	b.n	800949a <_dtoa_r+0xa0a>
 80094d4:	9904      	ldr	r1, [sp, #16]
 80094d6:	2900      	cmp	r1, #0
 80094d8:	db04      	blt.n	80094e4 <_dtoa_r+0xa54>
 80094da:	9807      	ldr	r0, [sp, #28]
 80094dc:	4301      	orrs	r1, r0
 80094de:	9806      	ldr	r0, [sp, #24]
 80094e0:	4301      	orrs	r1, r0
 80094e2:	d120      	bne.n	8009526 <_dtoa_r+0xa96>
 80094e4:	2a00      	cmp	r2, #0
 80094e6:	ddee      	ble.n	80094c6 <_dtoa_r+0xa36>
 80094e8:	9902      	ldr	r1, [sp, #8]
 80094ea:	9300      	str	r3, [sp, #0]
 80094ec:	2201      	movs	r2, #1
 80094ee:	4648      	mov	r0, r9
 80094f0:	f000 fbee 	bl	8009cd0 <__lshift>
 80094f4:	4621      	mov	r1, r4
 80094f6:	9002      	str	r0, [sp, #8]
 80094f8:	f000 fc56 	bl	8009da8 <__mcmp>
 80094fc:	2800      	cmp	r0, #0
 80094fe:	9b00      	ldr	r3, [sp, #0]
 8009500:	dc02      	bgt.n	8009508 <_dtoa_r+0xa78>
 8009502:	d1e0      	bne.n	80094c6 <_dtoa_r+0xa36>
 8009504:	07da      	lsls	r2, r3, #31
 8009506:	d5de      	bpl.n	80094c6 <_dtoa_r+0xa36>
 8009508:	2b39      	cmp	r3, #57	@ 0x39
 800950a:	d1da      	bne.n	80094c2 <_dtoa_r+0xa32>
 800950c:	2339      	movs	r3, #57	@ 0x39
 800950e:	f88b 3000 	strb.w	r3, [fp]
 8009512:	4633      	mov	r3, r6
 8009514:	461e      	mov	r6, r3
 8009516:	3b01      	subs	r3, #1
 8009518:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800951c:	2a39      	cmp	r2, #57	@ 0x39
 800951e:	d04e      	beq.n	80095be <_dtoa_r+0xb2e>
 8009520:	3201      	adds	r2, #1
 8009522:	701a      	strb	r2, [r3, #0]
 8009524:	e501      	b.n	8008f2a <_dtoa_r+0x49a>
 8009526:	2a00      	cmp	r2, #0
 8009528:	dd03      	ble.n	8009532 <_dtoa_r+0xaa2>
 800952a:	2b39      	cmp	r3, #57	@ 0x39
 800952c:	d0ee      	beq.n	800950c <_dtoa_r+0xa7c>
 800952e:	3301      	adds	r3, #1
 8009530:	e7c9      	b.n	80094c6 <_dtoa_r+0xa36>
 8009532:	9a00      	ldr	r2, [sp, #0]
 8009534:	9908      	ldr	r1, [sp, #32]
 8009536:	f802 3c01 	strb.w	r3, [r2, #-1]
 800953a:	428a      	cmp	r2, r1
 800953c:	d028      	beq.n	8009590 <_dtoa_r+0xb00>
 800953e:	9902      	ldr	r1, [sp, #8]
 8009540:	2300      	movs	r3, #0
 8009542:	220a      	movs	r2, #10
 8009544:	4648      	mov	r0, r9
 8009546:	f000 f9d5 	bl	80098f4 <__multadd>
 800954a:	42af      	cmp	r7, r5
 800954c:	9002      	str	r0, [sp, #8]
 800954e:	f04f 0300 	mov.w	r3, #0
 8009552:	f04f 020a 	mov.w	r2, #10
 8009556:	4639      	mov	r1, r7
 8009558:	4648      	mov	r0, r9
 800955a:	d107      	bne.n	800956c <_dtoa_r+0xadc>
 800955c:	f000 f9ca 	bl	80098f4 <__multadd>
 8009560:	4607      	mov	r7, r0
 8009562:	4605      	mov	r5, r0
 8009564:	9b00      	ldr	r3, [sp, #0]
 8009566:	3301      	adds	r3, #1
 8009568:	9300      	str	r3, [sp, #0]
 800956a:	e777      	b.n	800945c <_dtoa_r+0x9cc>
 800956c:	f000 f9c2 	bl	80098f4 <__multadd>
 8009570:	4629      	mov	r1, r5
 8009572:	4607      	mov	r7, r0
 8009574:	2300      	movs	r3, #0
 8009576:	220a      	movs	r2, #10
 8009578:	4648      	mov	r0, r9
 800957a:	f000 f9bb 	bl	80098f4 <__multadd>
 800957e:	4605      	mov	r5, r0
 8009580:	e7f0      	b.n	8009564 <_dtoa_r+0xad4>
 8009582:	f1bb 0f00 	cmp.w	fp, #0
 8009586:	bfcc      	ite	gt
 8009588:	465e      	movgt	r6, fp
 800958a:	2601      	movle	r6, #1
 800958c:	4456      	add	r6, sl
 800958e:	2700      	movs	r7, #0
 8009590:	9902      	ldr	r1, [sp, #8]
 8009592:	9300      	str	r3, [sp, #0]
 8009594:	2201      	movs	r2, #1
 8009596:	4648      	mov	r0, r9
 8009598:	f000 fb9a 	bl	8009cd0 <__lshift>
 800959c:	4621      	mov	r1, r4
 800959e:	9002      	str	r0, [sp, #8]
 80095a0:	f000 fc02 	bl	8009da8 <__mcmp>
 80095a4:	2800      	cmp	r0, #0
 80095a6:	dcb4      	bgt.n	8009512 <_dtoa_r+0xa82>
 80095a8:	d102      	bne.n	80095b0 <_dtoa_r+0xb20>
 80095aa:	9b00      	ldr	r3, [sp, #0]
 80095ac:	07db      	lsls	r3, r3, #31
 80095ae:	d4b0      	bmi.n	8009512 <_dtoa_r+0xa82>
 80095b0:	4633      	mov	r3, r6
 80095b2:	461e      	mov	r6, r3
 80095b4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80095b8:	2a30      	cmp	r2, #48	@ 0x30
 80095ba:	d0fa      	beq.n	80095b2 <_dtoa_r+0xb22>
 80095bc:	e4b5      	b.n	8008f2a <_dtoa_r+0x49a>
 80095be:	459a      	cmp	sl, r3
 80095c0:	d1a8      	bne.n	8009514 <_dtoa_r+0xa84>
 80095c2:	2331      	movs	r3, #49	@ 0x31
 80095c4:	f108 0801 	add.w	r8, r8, #1
 80095c8:	f88a 3000 	strb.w	r3, [sl]
 80095cc:	e4ad      	b.n	8008f2a <_dtoa_r+0x49a>
 80095ce:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80095d0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800962c <_dtoa_r+0xb9c>
 80095d4:	b11b      	cbz	r3, 80095de <_dtoa_r+0xb4e>
 80095d6:	f10a 0308 	add.w	r3, sl, #8
 80095da:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80095dc:	6013      	str	r3, [r2, #0]
 80095de:	4650      	mov	r0, sl
 80095e0:	b017      	add	sp, #92	@ 0x5c
 80095e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095e6:	9b07      	ldr	r3, [sp, #28]
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	f77f ae2e 	ble.w	800924a <_dtoa_r+0x7ba>
 80095ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80095f0:	9308      	str	r3, [sp, #32]
 80095f2:	2001      	movs	r0, #1
 80095f4:	e64d      	b.n	8009292 <_dtoa_r+0x802>
 80095f6:	f1bb 0f00 	cmp.w	fp, #0
 80095fa:	f77f aed9 	ble.w	80093b0 <_dtoa_r+0x920>
 80095fe:	4656      	mov	r6, sl
 8009600:	9802      	ldr	r0, [sp, #8]
 8009602:	4621      	mov	r1, r4
 8009604:	f7ff f9bc 	bl	8008980 <quorem>
 8009608:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800960c:	f806 3b01 	strb.w	r3, [r6], #1
 8009610:	eba6 020a 	sub.w	r2, r6, sl
 8009614:	4593      	cmp	fp, r2
 8009616:	ddb4      	ble.n	8009582 <_dtoa_r+0xaf2>
 8009618:	9902      	ldr	r1, [sp, #8]
 800961a:	2300      	movs	r3, #0
 800961c:	220a      	movs	r2, #10
 800961e:	4648      	mov	r0, r9
 8009620:	f000 f968 	bl	80098f4 <__multadd>
 8009624:	9002      	str	r0, [sp, #8]
 8009626:	e7eb      	b.n	8009600 <_dtoa_r+0xb70>
 8009628:	0800c285 	.word	0x0800c285
 800962c:	0800c209 	.word	0x0800c209

08009630 <_free_r>:
 8009630:	b538      	push	{r3, r4, r5, lr}
 8009632:	4605      	mov	r5, r0
 8009634:	2900      	cmp	r1, #0
 8009636:	d041      	beq.n	80096bc <_free_r+0x8c>
 8009638:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800963c:	1f0c      	subs	r4, r1, #4
 800963e:	2b00      	cmp	r3, #0
 8009640:	bfb8      	it	lt
 8009642:	18e4      	addlt	r4, r4, r3
 8009644:	f000 f8e8 	bl	8009818 <__malloc_lock>
 8009648:	4a1d      	ldr	r2, [pc, #116]	@ (80096c0 <_free_r+0x90>)
 800964a:	6813      	ldr	r3, [r2, #0]
 800964c:	b933      	cbnz	r3, 800965c <_free_r+0x2c>
 800964e:	6063      	str	r3, [r4, #4]
 8009650:	6014      	str	r4, [r2, #0]
 8009652:	4628      	mov	r0, r5
 8009654:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009658:	f000 b8e4 	b.w	8009824 <__malloc_unlock>
 800965c:	42a3      	cmp	r3, r4
 800965e:	d908      	bls.n	8009672 <_free_r+0x42>
 8009660:	6820      	ldr	r0, [r4, #0]
 8009662:	1821      	adds	r1, r4, r0
 8009664:	428b      	cmp	r3, r1
 8009666:	bf01      	itttt	eq
 8009668:	6819      	ldreq	r1, [r3, #0]
 800966a:	685b      	ldreq	r3, [r3, #4]
 800966c:	1809      	addeq	r1, r1, r0
 800966e:	6021      	streq	r1, [r4, #0]
 8009670:	e7ed      	b.n	800964e <_free_r+0x1e>
 8009672:	461a      	mov	r2, r3
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	b10b      	cbz	r3, 800967c <_free_r+0x4c>
 8009678:	42a3      	cmp	r3, r4
 800967a:	d9fa      	bls.n	8009672 <_free_r+0x42>
 800967c:	6811      	ldr	r1, [r2, #0]
 800967e:	1850      	adds	r0, r2, r1
 8009680:	42a0      	cmp	r0, r4
 8009682:	d10b      	bne.n	800969c <_free_r+0x6c>
 8009684:	6820      	ldr	r0, [r4, #0]
 8009686:	4401      	add	r1, r0
 8009688:	1850      	adds	r0, r2, r1
 800968a:	4283      	cmp	r3, r0
 800968c:	6011      	str	r1, [r2, #0]
 800968e:	d1e0      	bne.n	8009652 <_free_r+0x22>
 8009690:	6818      	ldr	r0, [r3, #0]
 8009692:	685b      	ldr	r3, [r3, #4]
 8009694:	6053      	str	r3, [r2, #4]
 8009696:	4408      	add	r0, r1
 8009698:	6010      	str	r0, [r2, #0]
 800969a:	e7da      	b.n	8009652 <_free_r+0x22>
 800969c:	d902      	bls.n	80096a4 <_free_r+0x74>
 800969e:	230c      	movs	r3, #12
 80096a0:	602b      	str	r3, [r5, #0]
 80096a2:	e7d6      	b.n	8009652 <_free_r+0x22>
 80096a4:	6820      	ldr	r0, [r4, #0]
 80096a6:	1821      	adds	r1, r4, r0
 80096a8:	428b      	cmp	r3, r1
 80096aa:	bf04      	itt	eq
 80096ac:	6819      	ldreq	r1, [r3, #0]
 80096ae:	685b      	ldreq	r3, [r3, #4]
 80096b0:	6063      	str	r3, [r4, #4]
 80096b2:	bf04      	itt	eq
 80096b4:	1809      	addeq	r1, r1, r0
 80096b6:	6021      	streq	r1, [r4, #0]
 80096b8:	6054      	str	r4, [r2, #4]
 80096ba:	e7ca      	b.n	8009652 <_free_r+0x22>
 80096bc:	bd38      	pop	{r3, r4, r5, pc}
 80096be:	bf00      	nop
 80096c0:	2000062c 	.word	0x2000062c

080096c4 <malloc>:
 80096c4:	4b02      	ldr	r3, [pc, #8]	@ (80096d0 <malloc+0xc>)
 80096c6:	4601      	mov	r1, r0
 80096c8:	6818      	ldr	r0, [r3, #0]
 80096ca:	f000 b825 	b.w	8009718 <_malloc_r>
 80096ce:	bf00      	nop
 80096d0:	20000030 	.word	0x20000030

080096d4 <sbrk_aligned>:
 80096d4:	b570      	push	{r4, r5, r6, lr}
 80096d6:	4e0f      	ldr	r6, [pc, #60]	@ (8009714 <sbrk_aligned+0x40>)
 80096d8:	460c      	mov	r4, r1
 80096da:	6831      	ldr	r1, [r6, #0]
 80096dc:	4605      	mov	r5, r0
 80096de:	b911      	cbnz	r1, 80096e6 <sbrk_aligned+0x12>
 80096e0:	f001 ffca 	bl	800b678 <_sbrk_r>
 80096e4:	6030      	str	r0, [r6, #0]
 80096e6:	4621      	mov	r1, r4
 80096e8:	4628      	mov	r0, r5
 80096ea:	f001 ffc5 	bl	800b678 <_sbrk_r>
 80096ee:	1c43      	adds	r3, r0, #1
 80096f0:	d103      	bne.n	80096fa <sbrk_aligned+0x26>
 80096f2:	f04f 34ff 	mov.w	r4, #4294967295
 80096f6:	4620      	mov	r0, r4
 80096f8:	bd70      	pop	{r4, r5, r6, pc}
 80096fa:	1cc4      	adds	r4, r0, #3
 80096fc:	f024 0403 	bic.w	r4, r4, #3
 8009700:	42a0      	cmp	r0, r4
 8009702:	d0f8      	beq.n	80096f6 <sbrk_aligned+0x22>
 8009704:	1a21      	subs	r1, r4, r0
 8009706:	4628      	mov	r0, r5
 8009708:	f001 ffb6 	bl	800b678 <_sbrk_r>
 800970c:	3001      	adds	r0, #1
 800970e:	d1f2      	bne.n	80096f6 <sbrk_aligned+0x22>
 8009710:	e7ef      	b.n	80096f2 <sbrk_aligned+0x1e>
 8009712:	bf00      	nop
 8009714:	20000628 	.word	0x20000628

08009718 <_malloc_r>:
 8009718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800971c:	1ccd      	adds	r5, r1, #3
 800971e:	f025 0503 	bic.w	r5, r5, #3
 8009722:	3508      	adds	r5, #8
 8009724:	2d0c      	cmp	r5, #12
 8009726:	bf38      	it	cc
 8009728:	250c      	movcc	r5, #12
 800972a:	2d00      	cmp	r5, #0
 800972c:	4606      	mov	r6, r0
 800972e:	db01      	blt.n	8009734 <_malloc_r+0x1c>
 8009730:	42a9      	cmp	r1, r5
 8009732:	d904      	bls.n	800973e <_malloc_r+0x26>
 8009734:	230c      	movs	r3, #12
 8009736:	6033      	str	r3, [r6, #0]
 8009738:	2000      	movs	r0, #0
 800973a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800973e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009814 <_malloc_r+0xfc>
 8009742:	f000 f869 	bl	8009818 <__malloc_lock>
 8009746:	f8d8 3000 	ldr.w	r3, [r8]
 800974a:	461c      	mov	r4, r3
 800974c:	bb44      	cbnz	r4, 80097a0 <_malloc_r+0x88>
 800974e:	4629      	mov	r1, r5
 8009750:	4630      	mov	r0, r6
 8009752:	f7ff ffbf 	bl	80096d4 <sbrk_aligned>
 8009756:	1c43      	adds	r3, r0, #1
 8009758:	4604      	mov	r4, r0
 800975a:	d158      	bne.n	800980e <_malloc_r+0xf6>
 800975c:	f8d8 4000 	ldr.w	r4, [r8]
 8009760:	4627      	mov	r7, r4
 8009762:	2f00      	cmp	r7, #0
 8009764:	d143      	bne.n	80097ee <_malloc_r+0xd6>
 8009766:	2c00      	cmp	r4, #0
 8009768:	d04b      	beq.n	8009802 <_malloc_r+0xea>
 800976a:	6823      	ldr	r3, [r4, #0]
 800976c:	4639      	mov	r1, r7
 800976e:	4630      	mov	r0, r6
 8009770:	eb04 0903 	add.w	r9, r4, r3
 8009774:	f001 ff80 	bl	800b678 <_sbrk_r>
 8009778:	4581      	cmp	r9, r0
 800977a:	d142      	bne.n	8009802 <_malloc_r+0xea>
 800977c:	6821      	ldr	r1, [r4, #0]
 800977e:	1a6d      	subs	r5, r5, r1
 8009780:	4629      	mov	r1, r5
 8009782:	4630      	mov	r0, r6
 8009784:	f7ff ffa6 	bl	80096d4 <sbrk_aligned>
 8009788:	3001      	adds	r0, #1
 800978a:	d03a      	beq.n	8009802 <_malloc_r+0xea>
 800978c:	6823      	ldr	r3, [r4, #0]
 800978e:	442b      	add	r3, r5
 8009790:	6023      	str	r3, [r4, #0]
 8009792:	f8d8 3000 	ldr.w	r3, [r8]
 8009796:	685a      	ldr	r2, [r3, #4]
 8009798:	bb62      	cbnz	r2, 80097f4 <_malloc_r+0xdc>
 800979a:	f8c8 7000 	str.w	r7, [r8]
 800979e:	e00f      	b.n	80097c0 <_malloc_r+0xa8>
 80097a0:	6822      	ldr	r2, [r4, #0]
 80097a2:	1b52      	subs	r2, r2, r5
 80097a4:	d420      	bmi.n	80097e8 <_malloc_r+0xd0>
 80097a6:	2a0b      	cmp	r2, #11
 80097a8:	d917      	bls.n	80097da <_malloc_r+0xc2>
 80097aa:	1961      	adds	r1, r4, r5
 80097ac:	42a3      	cmp	r3, r4
 80097ae:	6025      	str	r5, [r4, #0]
 80097b0:	bf18      	it	ne
 80097b2:	6059      	strne	r1, [r3, #4]
 80097b4:	6863      	ldr	r3, [r4, #4]
 80097b6:	bf08      	it	eq
 80097b8:	f8c8 1000 	streq.w	r1, [r8]
 80097bc:	5162      	str	r2, [r4, r5]
 80097be:	604b      	str	r3, [r1, #4]
 80097c0:	4630      	mov	r0, r6
 80097c2:	f000 f82f 	bl	8009824 <__malloc_unlock>
 80097c6:	f104 000b 	add.w	r0, r4, #11
 80097ca:	1d23      	adds	r3, r4, #4
 80097cc:	f020 0007 	bic.w	r0, r0, #7
 80097d0:	1ac2      	subs	r2, r0, r3
 80097d2:	bf1c      	itt	ne
 80097d4:	1a1b      	subne	r3, r3, r0
 80097d6:	50a3      	strne	r3, [r4, r2]
 80097d8:	e7af      	b.n	800973a <_malloc_r+0x22>
 80097da:	6862      	ldr	r2, [r4, #4]
 80097dc:	42a3      	cmp	r3, r4
 80097de:	bf0c      	ite	eq
 80097e0:	f8c8 2000 	streq.w	r2, [r8]
 80097e4:	605a      	strne	r2, [r3, #4]
 80097e6:	e7eb      	b.n	80097c0 <_malloc_r+0xa8>
 80097e8:	4623      	mov	r3, r4
 80097ea:	6864      	ldr	r4, [r4, #4]
 80097ec:	e7ae      	b.n	800974c <_malloc_r+0x34>
 80097ee:	463c      	mov	r4, r7
 80097f0:	687f      	ldr	r7, [r7, #4]
 80097f2:	e7b6      	b.n	8009762 <_malloc_r+0x4a>
 80097f4:	461a      	mov	r2, r3
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	42a3      	cmp	r3, r4
 80097fa:	d1fb      	bne.n	80097f4 <_malloc_r+0xdc>
 80097fc:	2300      	movs	r3, #0
 80097fe:	6053      	str	r3, [r2, #4]
 8009800:	e7de      	b.n	80097c0 <_malloc_r+0xa8>
 8009802:	230c      	movs	r3, #12
 8009804:	6033      	str	r3, [r6, #0]
 8009806:	4630      	mov	r0, r6
 8009808:	f000 f80c 	bl	8009824 <__malloc_unlock>
 800980c:	e794      	b.n	8009738 <_malloc_r+0x20>
 800980e:	6005      	str	r5, [r0, #0]
 8009810:	e7d6      	b.n	80097c0 <_malloc_r+0xa8>
 8009812:	bf00      	nop
 8009814:	2000062c 	.word	0x2000062c

08009818 <__malloc_lock>:
 8009818:	4801      	ldr	r0, [pc, #4]	@ (8009820 <__malloc_lock+0x8>)
 800981a:	f7ff b8a8 	b.w	800896e <__retarget_lock_acquire_recursive>
 800981e:	bf00      	nop
 8009820:	20000624 	.word	0x20000624

08009824 <__malloc_unlock>:
 8009824:	4801      	ldr	r0, [pc, #4]	@ (800982c <__malloc_unlock+0x8>)
 8009826:	f7ff b8a3 	b.w	8008970 <__retarget_lock_release_recursive>
 800982a:	bf00      	nop
 800982c:	20000624 	.word	0x20000624

08009830 <_Balloc>:
 8009830:	b570      	push	{r4, r5, r6, lr}
 8009832:	69c6      	ldr	r6, [r0, #28]
 8009834:	4604      	mov	r4, r0
 8009836:	460d      	mov	r5, r1
 8009838:	b976      	cbnz	r6, 8009858 <_Balloc+0x28>
 800983a:	2010      	movs	r0, #16
 800983c:	f7ff ff42 	bl	80096c4 <malloc>
 8009840:	4602      	mov	r2, r0
 8009842:	61e0      	str	r0, [r4, #28]
 8009844:	b920      	cbnz	r0, 8009850 <_Balloc+0x20>
 8009846:	4b18      	ldr	r3, [pc, #96]	@ (80098a8 <_Balloc+0x78>)
 8009848:	4818      	ldr	r0, [pc, #96]	@ (80098ac <_Balloc+0x7c>)
 800984a:	216b      	movs	r1, #107	@ 0x6b
 800984c:	f001 ff3c 	bl	800b6c8 <__assert_func>
 8009850:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009854:	6006      	str	r6, [r0, #0]
 8009856:	60c6      	str	r6, [r0, #12]
 8009858:	69e6      	ldr	r6, [r4, #28]
 800985a:	68f3      	ldr	r3, [r6, #12]
 800985c:	b183      	cbz	r3, 8009880 <_Balloc+0x50>
 800985e:	69e3      	ldr	r3, [r4, #28]
 8009860:	68db      	ldr	r3, [r3, #12]
 8009862:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009866:	b9b8      	cbnz	r0, 8009898 <_Balloc+0x68>
 8009868:	2101      	movs	r1, #1
 800986a:	fa01 f605 	lsl.w	r6, r1, r5
 800986e:	1d72      	adds	r2, r6, #5
 8009870:	0092      	lsls	r2, r2, #2
 8009872:	4620      	mov	r0, r4
 8009874:	f001 ff46 	bl	800b704 <_calloc_r>
 8009878:	b160      	cbz	r0, 8009894 <_Balloc+0x64>
 800987a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800987e:	e00e      	b.n	800989e <_Balloc+0x6e>
 8009880:	2221      	movs	r2, #33	@ 0x21
 8009882:	2104      	movs	r1, #4
 8009884:	4620      	mov	r0, r4
 8009886:	f001 ff3d 	bl	800b704 <_calloc_r>
 800988a:	69e3      	ldr	r3, [r4, #28]
 800988c:	60f0      	str	r0, [r6, #12]
 800988e:	68db      	ldr	r3, [r3, #12]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d1e4      	bne.n	800985e <_Balloc+0x2e>
 8009894:	2000      	movs	r0, #0
 8009896:	bd70      	pop	{r4, r5, r6, pc}
 8009898:	6802      	ldr	r2, [r0, #0]
 800989a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800989e:	2300      	movs	r3, #0
 80098a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80098a4:	e7f7      	b.n	8009896 <_Balloc+0x66>
 80098a6:	bf00      	nop
 80098a8:	0800c216 	.word	0x0800c216
 80098ac:	0800c296 	.word	0x0800c296

080098b0 <_Bfree>:
 80098b0:	b570      	push	{r4, r5, r6, lr}
 80098b2:	69c6      	ldr	r6, [r0, #28]
 80098b4:	4605      	mov	r5, r0
 80098b6:	460c      	mov	r4, r1
 80098b8:	b976      	cbnz	r6, 80098d8 <_Bfree+0x28>
 80098ba:	2010      	movs	r0, #16
 80098bc:	f7ff ff02 	bl	80096c4 <malloc>
 80098c0:	4602      	mov	r2, r0
 80098c2:	61e8      	str	r0, [r5, #28]
 80098c4:	b920      	cbnz	r0, 80098d0 <_Bfree+0x20>
 80098c6:	4b09      	ldr	r3, [pc, #36]	@ (80098ec <_Bfree+0x3c>)
 80098c8:	4809      	ldr	r0, [pc, #36]	@ (80098f0 <_Bfree+0x40>)
 80098ca:	218f      	movs	r1, #143	@ 0x8f
 80098cc:	f001 fefc 	bl	800b6c8 <__assert_func>
 80098d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098d4:	6006      	str	r6, [r0, #0]
 80098d6:	60c6      	str	r6, [r0, #12]
 80098d8:	b13c      	cbz	r4, 80098ea <_Bfree+0x3a>
 80098da:	69eb      	ldr	r3, [r5, #28]
 80098dc:	6862      	ldr	r2, [r4, #4]
 80098de:	68db      	ldr	r3, [r3, #12]
 80098e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80098e4:	6021      	str	r1, [r4, #0]
 80098e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80098ea:	bd70      	pop	{r4, r5, r6, pc}
 80098ec:	0800c216 	.word	0x0800c216
 80098f0:	0800c296 	.word	0x0800c296

080098f4 <__multadd>:
 80098f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098f8:	690d      	ldr	r5, [r1, #16]
 80098fa:	4607      	mov	r7, r0
 80098fc:	460c      	mov	r4, r1
 80098fe:	461e      	mov	r6, r3
 8009900:	f101 0c14 	add.w	ip, r1, #20
 8009904:	2000      	movs	r0, #0
 8009906:	f8dc 3000 	ldr.w	r3, [ip]
 800990a:	b299      	uxth	r1, r3
 800990c:	fb02 6101 	mla	r1, r2, r1, r6
 8009910:	0c1e      	lsrs	r6, r3, #16
 8009912:	0c0b      	lsrs	r3, r1, #16
 8009914:	fb02 3306 	mla	r3, r2, r6, r3
 8009918:	b289      	uxth	r1, r1
 800991a:	3001      	adds	r0, #1
 800991c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009920:	4285      	cmp	r5, r0
 8009922:	f84c 1b04 	str.w	r1, [ip], #4
 8009926:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800992a:	dcec      	bgt.n	8009906 <__multadd+0x12>
 800992c:	b30e      	cbz	r6, 8009972 <__multadd+0x7e>
 800992e:	68a3      	ldr	r3, [r4, #8]
 8009930:	42ab      	cmp	r3, r5
 8009932:	dc19      	bgt.n	8009968 <__multadd+0x74>
 8009934:	6861      	ldr	r1, [r4, #4]
 8009936:	4638      	mov	r0, r7
 8009938:	3101      	adds	r1, #1
 800993a:	f7ff ff79 	bl	8009830 <_Balloc>
 800993e:	4680      	mov	r8, r0
 8009940:	b928      	cbnz	r0, 800994e <__multadd+0x5a>
 8009942:	4602      	mov	r2, r0
 8009944:	4b0c      	ldr	r3, [pc, #48]	@ (8009978 <__multadd+0x84>)
 8009946:	480d      	ldr	r0, [pc, #52]	@ (800997c <__multadd+0x88>)
 8009948:	21ba      	movs	r1, #186	@ 0xba
 800994a:	f001 febd 	bl	800b6c8 <__assert_func>
 800994e:	6922      	ldr	r2, [r4, #16]
 8009950:	3202      	adds	r2, #2
 8009952:	f104 010c 	add.w	r1, r4, #12
 8009956:	0092      	lsls	r2, r2, #2
 8009958:	300c      	adds	r0, #12
 800995a:	f001 fe9d 	bl	800b698 <memcpy>
 800995e:	4621      	mov	r1, r4
 8009960:	4638      	mov	r0, r7
 8009962:	f7ff ffa5 	bl	80098b0 <_Bfree>
 8009966:	4644      	mov	r4, r8
 8009968:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800996c:	3501      	adds	r5, #1
 800996e:	615e      	str	r6, [r3, #20]
 8009970:	6125      	str	r5, [r4, #16]
 8009972:	4620      	mov	r0, r4
 8009974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009978:	0800c285 	.word	0x0800c285
 800997c:	0800c296 	.word	0x0800c296

08009980 <__s2b>:
 8009980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009984:	460c      	mov	r4, r1
 8009986:	4615      	mov	r5, r2
 8009988:	461f      	mov	r7, r3
 800998a:	2209      	movs	r2, #9
 800998c:	3308      	adds	r3, #8
 800998e:	4606      	mov	r6, r0
 8009990:	fb93 f3f2 	sdiv	r3, r3, r2
 8009994:	2100      	movs	r1, #0
 8009996:	2201      	movs	r2, #1
 8009998:	429a      	cmp	r2, r3
 800999a:	db09      	blt.n	80099b0 <__s2b+0x30>
 800999c:	4630      	mov	r0, r6
 800999e:	f7ff ff47 	bl	8009830 <_Balloc>
 80099a2:	b940      	cbnz	r0, 80099b6 <__s2b+0x36>
 80099a4:	4602      	mov	r2, r0
 80099a6:	4b19      	ldr	r3, [pc, #100]	@ (8009a0c <__s2b+0x8c>)
 80099a8:	4819      	ldr	r0, [pc, #100]	@ (8009a10 <__s2b+0x90>)
 80099aa:	21d3      	movs	r1, #211	@ 0xd3
 80099ac:	f001 fe8c 	bl	800b6c8 <__assert_func>
 80099b0:	0052      	lsls	r2, r2, #1
 80099b2:	3101      	adds	r1, #1
 80099b4:	e7f0      	b.n	8009998 <__s2b+0x18>
 80099b6:	9b08      	ldr	r3, [sp, #32]
 80099b8:	6143      	str	r3, [r0, #20]
 80099ba:	2d09      	cmp	r5, #9
 80099bc:	f04f 0301 	mov.w	r3, #1
 80099c0:	6103      	str	r3, [r0, #16]
 80099c2:	dd16      	ble.n	80099f2 <__s2b+0x72>
 80099c4:	f104 0909 	add.w	r9, r4, #9
 80099c8:	46c8      	mov	r8, r9
 80099ca:	442c      	add	r4, r5
 80099cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80099d0:	4601      	mov	r1, r0
 80099d2:	3b30      	subs	r3, #48	@ 0x30
 80099d4:	220a      	movs	r2, #10
 80099d6:	4630      	mov	r0, r6
 80099d8:	f7ff ff8c 	bl	80098f4 <__multadd>
 80099dc:	45a0      	cmp	r8, r4
 80099de:	d1f5      	bne.n	80099cc <__s2b+0x4c>
 80099e0:	f1a5 0408 	sub.w	r4, r5, #8
 80099e4:	444c      	add	r4, r9
 80099e6:	1b2d      	subs	r5, r5, r4
 80099e8:	1963      	adds	r3, r4, r5
 80099ea:	42bb      	cmp	r3, r7
 80099ec:	db04      	blt.n	80099f8 <__s2b+0x78>
 80099ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099f2:	340a      	adds	r4, #10
 80099f4:	2509      	movs	r5, #9
 80099f6:	e7f6      	b.n	80099e6 <__s2b+0x66>
 80099f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80099fc:	4601      	mov	r1, r0
 80099fe:	3b30      	subs	r3, #48	@ 0x30
 8009a00:	220a      	movs	r2, #10
 8009a02:	4630      	mov	r0, r6
 8009a04:	f7ff ff76 	bl	80098f4 <__multadd>
 8009a08:	e7ee      	b.n	80099e8 <__s2b+0x68>
 8009a0a:	bf00      	nop
 8009a0c:	0800c285 	.word	0x0800c285
 8009a10:	0800c296 	.word	0x0800c296

08009a14 <__hi0bits>:
 8009a14:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009a18:	4603      	mov	r3, r0
 8009a1a:	bf36      	itet	cc
 8009a1c:	0403      	lslcc	r3, r0, #16
 8009a1e:	2000      	movcs	r0, #0
 8009a20:	2010      	movcc	r0, #16
 8009a22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009a26:	bf3c      	itt	cc
 8009a28:	021b      	lslcc	r3, r3, #8
 8009a2a:	3008      	addcc	r0, #8
 8009a2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a30:	bf3c      	itt	cc
 8009a32:	011b      	lslcc	r3, r3, #4
 8009a34:	3004      	addcc	r0, #4
 8009a36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a3a:	bf3c      	itt	cc
 8009a3c:	009b      	lslcc	r3, r3, #2
 8009a3e:	3002      	addcc	r0, #2
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	db05      	blt.n	8009a50 <__hi0bits+0x3c>
 8009a44:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009a48:	f100 0001 	add.w	r0, r0, #1
 8009a4c:	bf08      	it	eq
 8009a4e:	2020      	moveq	r0, #32
 8009a50:	4770      	bx	lr

08009a52 <__lo0bits>:
 8009a52:	6803      	ldr	r3, [r0, #0]
 8009a54:	4602      	mov	r2, r0
 8009a56:	f013 0007 	ands.w	r0, r3, #7
 8009a5a:	d00b      	beq.n	8009a74 <__lo0bits+0x22>
 8009a5c:	07d9      	lsls	r1, r3, #31
 8009a5e:	d421      	bmi.n	8009aa4 <__lo0bits+0x52>
 8009a60:	0798      	lsls	r0, r3, #30
 8009a62:	bf49      	itett	mi
 8009a64:	085b      	lsrmi	r3, r3, #1
 8009a66:	089b      	lsrpl	r3, r3, #2
 8009a68:	2001      	movmi	r0, #1
 8009a6a:	6013      	strmi	r3, [r2, #0]
 8009a6c:	bf5c      	itt	pl
 8009a6e:	6013      	strpl	r3, [r2, #0]
 8009a70:	2002      	movpl	r0, #2
 8009a72:	4770      	bx	lr
 8009a74:	b299      	uxth	r1, r3
 8009a76:	b909      	cbnz	r1, 8009a7c <__lo0bits+0x2a>
 8009a78:	0c1b      	lsrs	r3, r3, #16
 8009a7a:	2010      	movs	r0, #16
 8009a7c:	b2d9      	uxtb	r1, r3
 8009a7e:	b909      	cbnz	r1, 8009a84 <__lo0bits+0x32>
 8009a80:	3008      	adds	r0, #8
 8009a82:	0a1b      	lsrs	r3, r3, #8
 8009a84:	0719      	lsls	r1, r3, #28
 8009a86:	bf04      	itt	eq
 8009a88:	091b      	lsreq	r3, r3, #4
 8009a8a:	3004      	addeq	r0, #4
 8009a8c:	0799      	lsls	r1, r3, #30
 8009a8e:	bf04      	itt	eq
 8009a90:	089b      	lsreq	r3, r3, #2
 8009a92:	3002      	addeq	r0, #2
 8009a94:	07d9      	lsls	r1, r3, #31
 8009a96:	d403      	bmi.n	8009aa0 <__lo0bits+0x4e>
 8009a98:	085b      	lsrs	r3, r3, #1
 8009a9a:	f100 0001 	add.w	r0, r0, #1
 8009a9e:	d003      	beq.n	8009aa8 <__lo0bits+0x56>
 8009aa0:	6013      	str	r3, [r2, #0]
 8009aa2:	4770      	bx	lr
 8009aa4:	2000      	movs	r0, #0
 8009aa6:	4770      	bx	lr
 8009aa8:	2020      	movs	r0, #32
 8009aaa:	4770      	bx	lr

08009aac <__i2b>:
 8009aac:	b510      	push	{r4, lr}
 8009aae:	460c      	mov	r4, r1
 8009ab0:	2101      	movs	r1, #1
 8009ab2:	f7ff febd 	bl	8009830 <_Balloc>
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	b928      	cbnz	r0, 8009ac6 <__i2b+0x1a>
 8009aba:	4b05      	ldr	r3, [pc, #20]	@ (8009ad0 <__i2b+0x24>)
 8009abc:	4805      	ldr	r0, [pc, #20]	@ (8009ad4 <__i2b+0x28>)
 8009abe:	f240 1145 	movw	r1, #325	@ 0x145
 8009ac2:	f001 fe01 	bl	800b6c8 <__assert_func>
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	6144      	str	r4, [r0, #20]
 8009aca:	6103      	str	r3, [r0, #16]
 8009acc:	bd10      	pop	{r4, pc}
 8009ace:	bf00      	nop
 8009ad0:	0800c285 	.word	0x0800c285
 8009ad4:	0800c296 	.word	0x0800c296

08009ad8 <__multiply>:
 8009ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009adc:	4617      	mov	r7, r2
 8009ade:	690a      	ldr	r2, [r1, #16]
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	429a      	cmp	r2, r3
 8009ae4:	bfa8      	it	ge
 8009ae6:	463b      	movge	r3, r7
 8009ae8:	4689      	mov	r9, r1
 8009aea:	bfa4      	itt	ge
 8009aec:	460f      	movge	r7, r1
 8009aee:	4699      	movge	r9, r3
 8009af0:	693d      	ldr	r5, [r7, #16]
 8009af2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	6879      	ldr	r1, [r7, #4]
 8009afa:	eb05 060a 	add.w	r6, r5, sl
 8009afe:	42b3      	cmp	r3, r6
 8009b00:	b085      	sub	sp, #20
 8009b02:	bfb8      	it	lt
 8009b04:	3101      	addlt	r1, #1
 8009b06:	f7ff fe93 	bl	8009830 <_Balloc>
 8009b0a:	b930      	cbnz	r0, 8009b1a <__multiply+0x42>
 8009b0c:	4602      	mov	r2, r0
 8009b0e:	4b41      	ldr	r3, [pc, #260]	@ (8009c14 <__multiply+0x13c>)
 8009b10:	4841      	ldr	r0, [pc, #260]	@ (8009c18 <__multiply+0x140>)
 8009b12:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009b16:	f001 fdd7 	bl	800b6c8 <__assert_func>
 8009b1a:	f100 0414 	add.w	r4, r0, #20
 8009b1e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009b22:	4623      	mov	r3, r4
 8009b24:	2200      	movs	r2, #0
 8009b26:	4573      	cmp	r3, lr
 8009b28:	d320      	bcc.n	8009b6c <__multiply+0x94>
 8009b2a:	f107 0814 	add.w	r8, r7, #20
 8009b2e:	f109 0114 	add.w	r1, r9, #20
 8009b32:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009b36:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009b3a:	9302      	str	r3, [sp, #8]
 8009b3c:	1beb      	subs	r3, r5, r7
 8009b3e:	3b15      	subs	r3, #21
 8009b40:	f023 0303 	bic.w	r3, r3, #3
 8009b44:	3304      	adds	r3, #4
 8009b46:	3715      	adds	r7, #21
 8009b48:	42bd      	cmp	r5, r7
 8009b4a:	bf38      	it	cc
 8009b4c:	2304      	movcc	r3, #4
 8009b4e:	9301      	str	r3, [sp, #4]
 8009b50:	9b02      	ldr	r3, [sp, #8]
 8009b52:	9103      	str	r1, [sp, #12]
 8009b54:	428b      	cmp	r3, r1
 8009b56:	d80c      	bhi.n	8009b72 <__multiply+0x9a>
 8009b58:	2e00      	cmp	r6, #0
 8009b5a:	dd03      	ble.n	8009b64 <__multiply+0x8c>
 8009b5c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d055      	beq.n	8009c10 <__multiply+0x138>
 8009b64:	6106      	str	r6, [r0, #16]
 8009b66:	b005      	add	sp, #20
 8009b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b6c:	f843 2b04 	str.w	r2, [r3], #4
 8009b70:	e7d9      	b.n	8009b26 <__multiply+0x4e>
 8009b72:	f8b1 a000 	ldrh.w	sl, [r1]
 8009b76:	f1ba 0f00 	cmp.w	sl, #0
 8009b7a:	d01f      	beq.n	8009bbc <__multiply+0xe4>
 8009b7c:	46c4      	mov	ip, r8
 8009b7e:	46a1      	mov	r9, r4
 8009b80:	2700      	movs	r7, #0
 8009b82:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009b86:	f8d9 3000 	ldr.w	r3, [r9]
 8009b8a:	fa1f fb82 	uxth.w	fp, r2
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	fb0a 330b 	mla	r3, sl, fp, r3
 8009b94:	443b      	add	r3, r7
 8009b96:	f8d9 7000 	ldr.w	r7, [r9]
 8009b9a:	0c12      	lsrs	r2, r2, #16
 8009b9c:	0c3f      	lsrs	r7, r7, #16
 8009b9e:	fb0a 7202 	mla	r2, sl, r2, r7
 8009ba2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009ba6:	b29b      	uxth	r3, r3
 8009ba8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009bac:	4565      	cmp	r5, ip
 8009bae:	f849 3b04 	str.w	r3, [r9], #4
 8009bb2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009bb6:	d8e4      	bhi.n	8009b82 <__multiply+0xaa>
 8009bb8:	9b01      	ldr	r3, [sp, #4]
 8009bba:	50e7      	str	r7, [r4, r3]
 8009bbc:	9b03      	ldr	r3, [sp, #12]
 8009bbe:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009bc2:	3104      	adds	r1, #4
 8009bc4:	f1b9 0f00 	cmp.w	r9, #0
 8009bc8:	d020      	beq.n	8009c0c <__multiply+0x134>
 8009bca:	6823      	ldr	r3, [r4, #0]
 8009bcc:	4647      	mov	r7, r8
 8009bce:	46a4      	mov	ip, r4
 8009bd0:	f04f 0a00 	mov.w	sl, #0
 8009bd4:	f8b7 b000 	ldrh.w	fp, [r7]
 8009bd8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009bdc:	fb09 220b 	mla	r2, r9, fp, r2
 8009be0:	4452      	add	r2, sl
 8009be2:	b29b      	uxth	r3, r3
 8009be4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009be8:	f84c 3b04 	str.w	r3, [ip], #4
 8009bec:	f857 3b04 	ldr.w	r3, [r7], #4
 8009bf0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009bf4:	f8bc 3000 	ldrh.w	r3, [ip]
 8009bf8:	fb09 330a 	mla	r3, r9, sl, r3
 8009bfc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009c00:	42bd      	cmp	r5, r7
 8009c02:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009c06:	d8e5      	bhi.n	8009bd4 <__multiply+0xfc>
 8009c08:	9a01      	ldr	r2, [sp, #4]
 8009c0a:	50a3      	str	r3, [r4, r2]
 8009c0c:	3404      	adds	r4, #4
 8009c0e:	e79f      	b.n	8009b50 <__multiply+0x78>
 8009c10:	3e01      	subs	r6, #1
 8009c12:	e7a1      	b.n	8009b58 <__multiply+0x80>
 8009c14:	0800c285 	.word	0x0800c285
 8009c18:	0800c296 	.word	0x0800c296

08009c1c <__pow5mult>:
 8009c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c20:	4615      	mov	r5, r2
 8009c22:	f012 0203 	ands.w	r2, r2, #3
 8009c26:	4607      	mov	r7, r0
 8009c28:	460e      	mov	r6, r1
 8009c2a:	d007      	beq.n	8009c3c <__pow5mult+0x20>
 8009c2c:	4c25      	ldr	r4, [pc, #148]	@ (8009cc4 <__pow5mult+0xa8>)
 8009c2e:	3a01      	subs	r2, #1
 8009c30:	2300      	movs	r3, #0
 8009c32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009c36:	f7ff fe5d 	bl	80098f4 <__multadd>
 8009c3a:	4606      	mov	r6, r0
 8009c3c:	10ad      	asrs	r5, r5, #2
 8009c3e:	d03d      	beq.n	8009cbc <__pow5mult+0xa0>
 8009c40:	69fc      	ldr	r4, [r7, #28]
 8009c42:	b97c      	cbnz	r4, 8009c64 <__pow5mult+0x48>
 8009c44:	2010      	movs	r0, #16
 8009c46:	f7ff fd3d 	bl	80096c4 <malloc>
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	61f8      	str	r0, [r7, #28]
 8009c4e:	b928      	cbnz	r0, 8009c5c <__pow5mult+0x40>
 8009c50:	4b1d      	ldr	r3, [pc, #116]	@ (8009cc8 <__pow5mult+0xac>)
 8009c52:	481e      	ldr	r0, [pc, #120]	@ (8009ccc <__pow5mult+0xb0>)
 8009c54:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009c58:	f001 fd36 	bl	800b6c8 <__assert_func>
 8009c5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009c60:	6004      	str	r4, [r0, #0]
 8009c62:	60c4      	str	r4, [r0, #12]
 8009c64:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009c68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009c6c:	b94c      	cbnz	r4, 8009c82 <__pow5mult+0x66>
 8009c6e:	f240 2171 	movw	r1, #625	@ 0x271
 8009c72:	4638      	mov	r0, r7
 8009c74:	f7ff ff1a 	bl	8009aac <__i2b>
 8009c78:	2300      	movs	r3, #0
 8009c7a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009c7e:	4604      	mov	r4, r0
 8009c80:	6003      	str	r3, [r0, #0]
 8009c82:	f04f 0900 	mov.w	r9, #0
 8009c86:	07eb      	lsls	r3, r5, #31
 8009c88:	d50a      	bpl.n	8009ca0 <__pow5mult+0x84>
 8009c8a:	4631      	mov	r1, r6
 8009c8c:	4622      	mov	r2, r4
 8009c8e:	4638      	mov	r0, r7
 8009c90:	f7ff ff22 	bl	8009ad8 <__multiply>
 8009c94:	4631      	mov	r1, r6
 8009c96:	4680      	mov	r8, r0
 8009c98:	4638      	mov	r0, r7
 8009c9a:	f7ff fe09 	bl	80098b0 <_Bfree>
 8009c9e:	4646      	mov	r6, r8
 8009ca0:	106d      	asrs	r5, r5, #1
 8009ca2:	d00b      	beq.n	8009cbc <__pow5mult+0xa0>
 8009ca4:	6820      	ldr	r0, [r4, #0]
 8009ca6:	b938      	cbnz	r0, 8009cb8 <__pow5mult+0x9c>
 8009ca8:	4622      	mov	r2, r4
 8009caa:	4621      	mov	r1, r4
 8009cac:	4638      	mov	r0, r7
 8009cae:	f7ff ff13 	bl	8009ad8 <__multiply>
 8009cb2:	6020      	str	r0, [r4, #0]
 8009cb4:	f8c0 9000 	str.w	r9, [r0]
 8009cb8:	4604      	mov	r4, r0
 8009cba:	e7e4      	b.n	8009c86 <__pow5mult+0x6a>
 8009cbc:	4630      	mov	r0, r6
 8009cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cc2:	bf00      	nop
 8009cc4:	0800c3a8 	.word	0x0800c3a8
 8009cc8:	0800c216 	.word	0x0800c216
 8009ccc:	0800c296 	.word	0x0800c296

08009cd0 <__lshift>:
 8009cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cd4:	460c      	mov	r4, r1
 8009cd6:	6849      	ldr	r1, [r1, #4]
 8009cd8:	6923      	ldr	r3, [r4, #16]
 8009cda:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009cde:	68a3      	ldr	r3, [r4, #8]
 8009ce0:	4607      	mov	r7, r0
 8009ce2:	4691      	mov	r9, r2
 8009ce4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009ce8:	f108 0601 	add.w	r6, r8, #1
 8009cec:	42b3      	cmp	r3, r6
 8009cee:	db0b      	blt.n	8009d08 <__lshift+0x38>
 8009cf0:	4638      	mov	r0, r7
 8009cf2:	f7ff fd9d 	bl	8009830 <_Balloc>
 8009cf6:	4605      	mov	r5, r0
 8009cf8:	b948      	cbnz	r0, 8009d0e <__lshift+0x3e>
 8009cfa:	4602      	mov	r2, r0
 8009cfc:	4b28      	ldr	r3, [pc, #160]	@ (8009da0 <__lshift+0xd0>)
 8009cfe:	4829      	ldr	r0, [pc, #164]	@ (8009da4 <__lshift+0xd4>)
 8009d00:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009d04:	f001 fce0 	bl	800b6c8 <__assert_func>
 8009d08:	3101      	adds	r1, #1
 8009d0a:	005b      	lsls	r3, r3, #1
 8009d0c:	e7ee      	b.n	8009cec <__lshift+0x1c>
 8009d0e:	2300      	movs	r3, #0
 8009d10:	f100 0114 	add.w	r1, r0, #20
 8009d14:	f100 0210 	add.w	r2, r0, #16
 8009d18:	4618      	mov	r0, r3
 8009d1a:	4553      	cmp	r3, sl
 8009d1c:	db33      	blt.n	8009d86 <__lshift+0xb6>
 8009d1e:	6920      	ldr	r0, [r4, #16]
 8009d20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009d24:	f104 0314 	add.w	r3, r4, #20
 8009d28:	f019 091f 	ands.w	r9, r9, #31
 8009d2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009d30:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009d34:	d02b      	beq.n	8009d8e <__lshift+0xbe>
 8009d36:	f1c9 0e20 	rsb	lr, r9, #32
 8009d3a:	468a      	mov	sl, r1
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	6818      	ldr	r0, [r3, #0]
 8009d40:	fa00 f009 	lsl.w	r0, r0, r9
 8009d44:	4310      	orrs	r0, r2
 8009d46:	f84a 0b04 	str.w	r0, [sl], #4
 8009d4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d4e:	459c      	cmp	ip, r3
 8009d50:	fa22 f20e 	lsr.w	r2, r2, lr
 8009d54:	d8f3      	bhi.n	8009d3e <__lshift+0x6e>
 8009d56:	ebac 0304 	sub.w	r3, ip, r4
 8009d5a:	3b15      	subs	r3, #21
 8009d5c:	f023 0303 	bic.w	r3, r3, #3
 8009d60:	3304      	adds	r3, #4
 8009d62:	f104 0015 	add.w	r0, r4, #21
 8009d66:	4560      	cmp	r0, ip
 8009d68:	bf88      	it	hi
 8009d6a:	2304      	movhi	r3, #4
 8009d6c:	50ca      	str	r2, [r1, r3]
 8009d6e:	b10a      	cbz	r2, 8009d74 <__lshift+0xa4>
 8009d70:	f108 0602 	add.w	r6, r8, #2
 8009d74:	3e01      	subs	r6, #1
 8009d76:	4638      	mov	r0, r7
 8009d78:	612e      	str	r6, [r5, #16]
 8009d7a:	4621      	mov	r1, r4
 8009d7c:	f7ff fd98 	bl	80098b0 <_Bfree>
 8009d80:	4628      	mov	r0, r5
 8009d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d86:	f842 0f04 	str.w	r0, [r2, #4]!
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	e7c5      	b.n	8009d1a <__lshift+0x4a>
 8009d8e:	3904      	subs	r1, #4
 8009d90:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d94:	f841 2f04 	str.w	r2, [r1, #4]!
 8009d98:	459c      	cmp	ip, r3
 8009d9a:	d8f9      	bhi.n	8009d90 <__lshift+0xc0>
 8009d9c:	e7ea      	b.n	8009d74 <__lshift+0xa4>
 8009d9e:	bf00      	nop
 8009da0:	0800c285 	.word	0x0800c285
 8009da4:	0800c296 	.word	0x0800c296

08009da8 <__mcmp>:
 8009da8:	690a      	ldr	r2, [r1, #16]
 8009daa:	4603      	mov	r3, r0
 8009dac:	6900      	ldr	r0, [r0, #16]
 8009dae:	1a80      	subs	r0, r0, r2
 8009db0:	b530      	push	{r4, r5, lr}
 8009db2:	d10e      	bne.n	8009dd2 <__mcmp+0x2a>
 8009db4:	3314      	adds	r3, #20
 8009db6:	3114      	adds	r1, #20
 8009db8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009dbc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009dc0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009dc4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009dc8:	4295      	cmp	r5, r2
 8009dca:	d003      	beq.n	8009dd4 <__mcmp+0x2c>
 8009dcc:	d205      	bcs.n	8009dda <__mcmp+0x32>
 8009dce:	f04f 30ff 	mov.w	r0, #4294967295
 8009dd2:	bd30      	pop	{r4, r5, pc}
 8009dd4:	42a3      	cmp	r3, r4
 8009dd6:	d3f3      	bcc.n	8009dc0 <__mcmp+0x18>
 8009dd8:	e7fb      	b.n	8009dd2 <__mcmp+0x2a>
 8009dda:	2001      	movs	r0, #1
 8009ddc:	e7f9      	b.n	8009dd2 <__mcmp+0x2a>
	...

08009de0 <__mdiff>:
 8009de0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009de4:	4689      	mov	r9, r1
 8009de6:	4606      	mov	r6, r0
 8009de8:	4611      	mov	r1, r2
 8009dea:	4648      	mov	r0, r9
 8009dec:	4614      	mov	r4, r2
 8009dee:	f7ff ffdb 	bl	8009da8 <__mcmp>
 8009df2:	1e05      	subs	r5, r0, #0
 8009df4:	d112      	bne.n	8009e1c <__mdiff+0x3c>
 8009df6:	4629      	mov	r1, r5
 8009df8:	4630      	mov	r0, r6
 8009dfa:	f7ff fd19 	bl	8009830 <_Balloc>
 8009dfe:	4602      	mov	r2, r0
 8009e00:	b928      	cbnz	r0, 8009e0e <__mdiff+0x2e>
 8009e02:	4b3f      	ldr	r3, [pc, #252]	@ (8009f00 <__mdiff+0x120>)
 8009e04:	f240 2137 	movw	r1, #567	@ 0x237
 8009e08:	483e      	ldr	r0, [pc, #248]	@ (8009f04 <__mdiff+0x124>)
 8009e0a:	f001 fc5d 	bl	800b6c8 <__assert_func>
 8009e0e:	2301      	movs	r3, #1
 8009e10:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009e14:	4610      	mov	r0, r2
 8009e16:	b003      	add	sp, #12
 8009e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e1c:	bfbc      	itt	lt
 8009e1e:	464b      	movlt	r3, r9
 8009e20:	46a1      	movlt	r9, r4
 8009e22:	4630      	mov	r0, r6
 8009e24:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009e28:	bfba      	itte	lt
 8009e2a:	461c      	movlt	r4, r3
 8009e2c:	2501      	movlt	r5, #1
 8009e2e:	2500      	movge	r5, #0
 8009e30:	f7ff fcfe 	bl	8009830 <_Balloc>
 8009e34:	4602      	mov	r2, r0
 8009e36:	b918      	cbnz	r0, 8009e40 <__mdiff+0x60>
 8009e38:	4b31      	ldr	r3, [pc, #196]	@ (8009f00 <__mdiff+0x120>)
 8009e3a:	f240 2145 	movw	r1, #581	@ 0x245
 8009e3e:	e7e3      	b.n	8009e08 <__mdiff+0x28>
 8009e40:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009e44:	6926      	ldr	r6, [r4, #16]
 8009e46:	60c5      	str	r5, [r0, #12]
 8009e48:	f109 0310 	add.w	r3, r9, #16
 8009e4c:	f109 0514 	add.w	r5, r9, #20
 8009e50:	f104 0e14 	add.w	lr, r4, #20
 8009e54:	f100 0b14 	add.w	fp, r0, #20
 8009e58:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009e5c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009e60:	9301      	str	r3, [sp, #4]
 8009e62:	46d9      	mov	r9, fp
 8009e64:	f04f 0c00 	mov.w	ip, #0
 8009e68:	9b01      	ldr	r3, [sp, #4]
 8009e6a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009e6e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009e72:	9301      	str	r3, [sp, #4]
 8009e74:	fa1f f38a 	uxth.w	r3, sl
 8009e78:	4619      	mov	r1, r3
 8009e7a:	b283      	uxth	r3, r0
 8009e7c:	1acb      	subs	r3, r1, r3
 8009e7e:	0c00      	lsrs	r0, r0, #16
 8009e80:	4463      	add	r3, ip
 8009e82:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009e86:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009e8a:	b29b      	uxth	r3, r3
 8009e8c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009e90:	4576      	cmp	r6, lr
 8009e92:	f849 3b04 	str.w	r3, [r9], #4
 8009e96:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009e9a:	d8e5      	bhi.n	8009e68 <__mdiff+0x88>
 8009e9c:	1b33      	subs	r3, r6, r4
 8009e9e:	3b15      	subs	r3, #21
 8009ea0:	f023 0303 	bic.w	r3, r3, #3
 8009ea4:	3415      	adds	r4, #21
 8009ea6:	3304      	adds	r3, #4
 8009ea8:	42a6      	cmp	r6, r4
 8009eaa:	bf38      	it	cc
 8009eac:	2304      	movcc	r3, #4
 8009eae:	441d      	add	r5, r3
 8009eb0:	445b      	add	r3, fp
 8009eb2:	461e      	mov	r6, r3
 8009eb4:	462c      	mov	r4, r5
 8009eb6:	4544      	cmp	r4, r8
 8009eb8:	d30e      	bcc.n	8009ed8 <__mdiff+0xf8>
 8009eba:	f108 0103 	add.w	r1, r8, #3
 8009ebe:	1b49      	subs	r1, r1, r5
 8009ec0:	f021 0103 	bic.w	r1, r1, #3
 8009ec4:	3d03      	subs	r5, #3
 8009ec6:	45a8      	cmp	r8, r5
 8009ec8:	bf38      	it	cc
 8009eca:	2100      	movcc	r1, #0
 8009ecc:	440b      	add	r3, r1
 8009ece:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009ed2:	b191      	cbz	r1, 8009efa <__mdiff+0x11a>
 8009ed4:	6117      	str	r7, [r2, #16]
 8009ed6:	e79d      	b.n	8009e14 <__mdiff+0x34>
 8009ed8:	f854 1b04 	ldr.w	r1, [r4], #4
 8009edc:	46e6      	mov	lr, ip
 8009ede:	0c08      	lsrs	r0, r1, #16
 8009ee0:	fa1c fc81 	uxtah	ip, ip, r1
 8009ee4:	4471      	add	r1, lr
 8009ee6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009eea:	b289      	uxth	r1, r1
 8009eec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009ef0:	f846 1b04 	str.w	r1, [r6], #4
 8009ef4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009ef8:	e7dd      	b.n	8009eb6 <__mdiff+0xd6>
 8009efa:	3f01      	subs	r7, #1
 8009efc:	e7e7      	b.n	8009ece <__mdiff+0xee>
 8009efe:	bf00      	nop
 8009f00:	0800c285 	.word	0x0800c285
 8009f04:	0800c296 	.word	0x0800c296

08009f08 <__ulp>:
 8009f08:	b082      	sub	sp, #8
 8009f0a:	ed8d 0b00 	vstr	d0, [sp]
 8009f0e:	9a01      	ldr	r2, [sp, #4]
 8009f10:	4b0f      	ldr	r3, [pc, #60]	@ (8009f50 <__ulp+0x48>)
 8009f12:	4013      	ands	r3, r2
 8009f14:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	dc08      	bgt.n	8009f2e <__ulp+0x26>
 8009f1c:	425b      	negs	r3, r3
 8009f1e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009f22:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009f26:	da04      	bge.n	8009f32 <__ulp+0x2a>
 8009f28:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009f2c:	4113      	asrs	r3, r2
 8009f2e:	2200      	movs	r2, #0
 8009f30:	e008      	b.n	8009f44 <__ulp+0x3c>
 8009f32:	f1a2 0314 	sub.w	r3, r2, #20
 8009f36:	2b1e      	cmp	r3, #30
 8009f38:	bfda      	itte	le
 8009f3a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009f3e:	40da      	lsrle	r2, r3
 8009f40:	2201      	movgt	r2, #1
 8009f42:	2300      	movs	r3, #0
 8009f44:	4619      	mov	r1, r3
 8009f46:	4610      	mov	r0, r2
 8009f48:	ec41 0b10 	vmov	d0, r0, r1
 8009f4c:	b002      	add	sp, #8
 8009f4e:	4770      	bx	lr
 8009f50:	7ff00000 	.word	0x7ff00000

08009f54 <__b2d>:
 8009f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f58:	6906      	ldr	r6, [r0, #16]
 8009f5a:	f100 0814 	add.w	r8, r0, #20
 8009f5e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009f62:	1f37      	subs	r7, r6, #4
 8009f64:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009f68:	4610      	mov	r0, r2
 8009f6a:	f7ff fd53 	bl	8009a14 <__hi0bits>
 8009f6e:	f1c0 0320 	rsb	r3, r0, #32
 8009f72:	280a      	cmp	r0, #10
 8009f74:	600b      	str	r3, [r1, #0]
 8009f76:	491b      	ldr	r1, [pc, #108]	@ (8009fe4 <__b2d+0x90>)
 8009f78:	dc15      	bgt.n	8009fa6 <__b2d+0x52>
 8009f7a:	f1c0 0c0b 	rsb	ip, r0, #11
 8009f7e:	fa22 f30c 	lsr.w	r3, r2, ip
 8009f82:	45b8      	cmp	r8, r7
 8009f84:	ea43 0501 	orr.w	r5, r3, r1
 8009f88:	bf34      	ite	cc
 8009f8a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009f8e:	2300      	movcs	r3, #0
 8009f90:	3015      	adds	r0, #21
 8009f92:	fa02 f000 	lsl.w	r0, r2, r0
 8009f96:	fa23 f30c 	lsr.w	r3, r3, ip
 8009f9a:	4303      	orrs	r3, r0
 8009f9c:	461c      	mov	r4, r3
 8009f9e:	ec45 4b10 	vmov	d0, r4, r5
 8009fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fa6:	45b8      	cmp	r8, r7
 8009fa8:	bf3a      	itte	cc
 8009faa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009fae:	f1a6 0708 	subcc.w	r7, r6, #8
 8009fb2:	2300      	movcs	r3, #0
 8009fb4:	380b      	subs	r0, #11
 8009fb6:	d012      	beq.n	8009fde <__b2d+0x8a>
 8009fb8:	f1c0 0120 	rsb	r1, r0, #32
 8009fbc:	fa23 f401 	lsr.w	r4, r3, r1
 8009fc0:	4082      	lsls	r2, r0
 8009fc2:	4322      	orrs	r2, r4
 8009fc4:	4547      	cmp	r7, r8
 8009fc6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009fca:	bf8c      	ite	hi
 8009fcc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009fd0:	2200      	movls	r2, #0
 8009fd2:	4083      	lsls	r3, r0
 8009fd4:	40ca      	lsrs	r2, r1
 8009fd6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	e7de      	b.n	8009f9c <__b2d+0x48>
 8009fde:	ea42 0501 	orr.w	r5, r2, r1
 8009fe2:	e7db      	b.n	8009f9c <__b2d+0x48>
 8009fe4:	3ff00000 	.word	0x3ff00000

08009fe8 <__d2b>:
 8009fe8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009fec:	460f      	mov	r7, r1
 8009fee:	2101      	movs	r1, #1
 8009ff0:	ec59 8b10 	vmov	r8, r9, d0
 8009ff4:	4616      	mov	r6, r2
 8009ff6:	f7ff fc1b 	bl	8009830 <_Balloc>
 8009ffa:	4604      	mov	r4, r0
 8009ffc:	b930      	cbnz	r0, 800a00c <__d2b+0x24>
 8009ffe:	4602      	mov	r2, r0
 800a000:	4b23      	ldr	r3, [pc, #140]	@ (800a090 <__d2b+0xa8>)
 800a002:	4824      	ldr	r0, [pc, #144]	@ (800a094 <__d2b+0xac>)
 800a004:	f240 310f 	movw	r1, #783	@ 0x30f
 800a008:	f001 fb5e 	bl	800b6c8 <__assert_func>
 800a00c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a010:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a014:	b10d      	cbz	r5, 800a01a <__d2b+0x32>
 800a016:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a01a:	9301      	str	r3, [sp, #4]
 800a01c:	f1b8 0300 	subs.w	r3, r8, #0
 800a020:	d023      	beq.n	800a06a <__d2b+0x82>
 800a022:	4668      	mov	r0, sp
 800a024:	9300      	str	r3, [sp, #0]
 800a026:	f7ff fd14 	bl	8009a52 <__lo0bits>
 800a02a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a02e:	b1d0      	cbz	r0, 800a066 <__d2b+0x7e>
 800a030:	f1c0 0320 	rsb	r3, r0, #32
 800a034:	fa02 f303 	lsl.w	r3, r2, r3
 800a038:	430b      	orrs	r3, r1
 800a03a:	40c2      	lsrs	r2, r0
 800a03c:	6163      	str	r3, [r4, #20]
 800a03e:	9201      	str	r2, [sp, #4]
 800a040:	9b01      	ldr	r3, [sp, #4]
 800a042:	61a3      	str	r3, [r4, #24]
 800a044:	2b00      	cmp	r3, #0
 800a046:	bf0c      	ite	eq
 800a048:	2201      	moveq	r2, #1
 800a04a:	2202      	movne	r2, #2
 800a04c:	6122      	str	r2, [r4, #16]
 800a04e:	b1a5      	cbz	r5, 800a07a <__d2b+0x92>
 800a050:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a054:	4405      	add	r5, r0
 800a056:	603d      	str	r5, [r7, #0]
 800a058:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a05c:	6030      	str	r0, [r6, #0]
 800a05e:	4620      	mov	r0, r4
 800a060:	b003      	add	sp, #12
 800a062:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a066:	6161      	str	r1, [r4, #20]
 800a068:	e7ea      	b.n	800a040 <__d2b+0x58>
 800a06a:	a801      	add	r0, sp, #4
 800a06c:	f7ff fcf1 	bl	8009a52 <__lo0bits>
 800a070:	9b01      	ldr	r3, [sp, #4]
 800a072:	6163      	str	r3, [r4, #20]
 800a074:	3020      	adds	r0, #32
 800a076:	2201      	movs	r2, #1
 800a078:	e7e8      	b.n	800a04c <__d2b+0x64>
 800a07a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a07e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a082:	6038      	str	r0, [r7, #0]
 800a084:	6918      	ldr	r0, [r3, #16]
 800a086:	f7ff fcc5 	bl	8009a14 <__hi0bits>
 800a08a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a08e:	e7e5      	b.n	800a05c <__d2b+0x74>
 800a090:	0800c285 	.word	0x0800c285
 800a094:	0800c296 	.word	0x0800c296

0800a098 <__ratio>:
 800a098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a09c:	b085      	sub	sp, #20
 800a09e:	e9cd 1000 	strd	r1, r0, [sp]
 800a0a2:	a902      	add	r1, sp, #8
 800a0a4:	f7ff ff56 	bl	8009f54 <__b2d>
 800a0a8:	9800      	ldr	r0, [sp, #0]
 800a0aa:	a903      	add	r1, sp, #12
 800a0ac:	ec55 4b10 	vmov	r4, r5, d0
 800a0b0:	f7ff ff50 	bl	8009f54 <__b2d>
 800a0b4:	9b01      	ldr	r3, [sp, #4]
 800a0b6:	6919      	ldr	r1, [r3, #16]
 800a0b8:	9b00      	ldr	r3, [sp, #0]
 800a0ba:	691b      	ldr	r3, [r3, #16]
 800a0bc:	1ac9      	subs	r1, r1, r3
 800a0be:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a0c2:	1a9b      	subs	r3, r3, r2
 800a0c4:	ec5b ab10 	vmov	sl, fp, d0
 800a0c8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	bfce      	itee	gt
 800a0d0:	462a      	movgt	r2, r5
 800a0d2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a0d6:	465a      	movle	r2, fp
 800a0d8:	462f      	mov	r7, r5
 800a0da:	46d9      	mov	r9, fp
 800a0dc:	bfcc      	ite	gt
 800a0de:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a0e2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a0e6:	464b      	mov	r3, r9
 800a0e8:	4652      	mov	r2, sl
 800a0ea:	4620      	mov	r0, r4
 800a0ec:	4639      	mov	r1, r7
 800a0ee:	f7f6 fbcd 	bl	800088c <__aeabi_ddiv>
 800a0f2:	ec41 0b10 	vmov	d0, r0, r1
 800a0f6:	b005      	add	sp, #20
 800a0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a0fc <__copybits>:
 800a0fc:	3901      	subs	r1, #1
 800a0fe:	b570      	push	{r4, r5, r6, lr}
 800a100:	1149      	asrs	r1, r1, #5
 800a102:	6914      	ldr	r4, [r2, #16]
 800a104:	3101      	adds	r1, #1
 800a106:	f102 0314 	add.w	r3, r2, #20
 800a10a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a10e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a112:	1f05      	subs	r5, r0, #4
 800a114:	42a3      	cmp	r3, r4
 800a116:	d30c      	bcc.n	800a132 <__copybits+0x36>
 800a118:	1aa3      	subs	r3, r4, r2
 800a11a:	3b11      	subs	r3, #17
 800a11c:	f023 0303 	bic.w	r3, r3, #3
 800a120:	3211      	adds	r2, #17
 800a122:	42a2      	cmp	r2, r4
 800a124:	bf88      	it	hi
 800a126:	2300      	movhi	r3, #0
 800a128:	4418      	add	r0, r3
 800a12a:	2300      	movs	r3, #0
 800a12c:	4288      	cmp	r0, r1
 800a12e:	d305      	bcc.n	800a13c <__copybits+0x40>
 800a130:	bd70      	pop	{r4, r5, r6, pc}
 800a132:	f853 6b04 	ldr.w	r6, [r3], #4
 800a136:	f845 6f04 	str.w	r6, [r5, #4]!
 800a13a:	e7eb      	b.n	800a114 <__copybits+0x18>
 800a13c:	f840 3b04 	str.w	r3, [r0], #4
 800a140:	e7f4      	b.n	800a12c <__copybits+0x30>

0800a142 <__any_on>:
 800a142:	f100 0214 	add.w	r2, r0, #20
 800a146:	6900      	ldr	r0, [r0, #16]
 800a148:	114b      	asrs	r3, r1, #5
 800a14a:	4298      	cmp	r0, r3
 800a14c:	b510      	push	{r4, lr}
 800a14e:	db11      	blt.n	800a174 <__any_on+0x32>
 800a150:	dd0a      	ble.n	800a168 <__any_on+0x26>
 800a152:	f011 011f 	ands.w	r1, r1, #31
 800a156:	d007      	beq.n	800a168 <__any_on+0x26>
 800a158:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a15c:	fa24 f001 	lsr.w	r0, r4, r1
 800a160:	fa00 f101 	lsl.w	r1, r0, r1
 800a164:	428c      	cmp	r4, r1
 800a166:	d10b      	bne.n	800a180 <__any_on+0x3e>
 800a168:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d803      	bhi.n	800a178 <__any_on+0x36>
 800a170:	2000      	movs	r0, #0
 800a172:	bd10      	pop	{r4, pc}
 800a174:	4603      	mov	r3, r0
 800a176:	e7f7      	b.n	800a168 <__any_on+0x26>
 800a178:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a17c:	2900      	cmp	r1, #0
 800a17e:	d0f5      	beq.n	800a16c <__any_on+0x2a>
 800a180:	2001      	movs	r0, #1
 800a182:	e7f6      	b.n	800a172 <__any_on+0x30>

0800a184 <sulp>:
 800a184:	b570      	push	{r4, r5, r6, lr}
 800a186:	4604      	mov	r4, r0
 800a188:	460d      	mov	r5, r1
 800a18a:	ec45 4b10 	vmov	d0, r4, r5
 800a18e:	4616      	mov	r6, r2
 800a190:	f7ff feba 	bl	8009f08 <__ulp>
 800a194:	ec51 0b10 	vmov	r0, r1, d0
 800a198:	b17e      	cbz	r6, 800a1ba <sulp+0x36>
 800a19a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a19e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	dd09      	ble.n	800a1ba <sulp+0x36>
 800a1a6:	051b      	lsls	r3, r3, #20
 800a1a8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a1ac:	2400      	movs	r4, #0
 800a1ae:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a1b2:	4622      	mov	r2, r4
 800a1b4:	462b      	mov	r3, r5
 800a1b6:	f7f6 fa3f 	bl	8000638 <__aeabi_dmul>
 800a1ba:	ec41 0b10 	vmov	d0, r0, r1
 800a1be:	bd70      	pop	{r4, r5, r6, pc}

0800a1c0 <_strtod_l>:
 800a1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1c4:	b09f      	sub	sp, #124	@ 0x7c
 800a1c6:	460c      	mov	r4, r1
 800a1c8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	921a      	str	r2, [sp, #104]	@ 0x68
 800a1ce:	9005      	str	r0, [sp, #20]
 800a1d0:	f04f 0a00 	mov.w	sl, #0
 800a1d4:	f04f 0b00 	mov.w	fp, #0
 800a1d8:	460a      	mov	r2, r1
 800a1da:	9219      	str	r2, [sp, #100]	@ 0x64
 800a1dc:	7811      	ldrb	r1, [r2, #0]
 800a1de:	292b      	cmp	r1, #43	@ 0x2b
 800a1e0:	d04a      	beq.n	800a278 <_strtod_l+0xb8>
 800a1e2:	d838      	bhi.n	800a256 <_strtod_l+0x96>
 800a1e4:	290d      	cmp	r1, #13
 800a1e6:	d832      	bhi.n	800a24e <_strtod_l+0x8e>
 800a1e8:	2908      	cmp	r1, #8
 800a1ea:	d832      	bhi.n	800a252 <_strtod_l+0x92>
 800a1ec:	2900      	cmp	r1, #0
 800a1ee:	d03b      	beq.n	800a268 <_strtod_l+0xa8>
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	920e      	str	r2, [sp, #56]	@ 0x38
 800a1f4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a1f6:	782a      	ldrb	r2, [r5, #0]
 800a1f8:	2a30      	cmp	r2, #48	@ 0x30
 800a1fa:	f040 80b2 	bne.w	800a362 <_strtod_l+0x1a2>
 800a1fe:	786a      	ldrb	r2, [r5, #1]
 800a200:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a204:	2a58      	cmp	r2, #88	@ 0x58
 800a206:	d16e      	bne.n	800a2e6 <_strtod_l+0x126>
 800a208:	9302      	str	r3, [sp, #8]
 800a20a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a20c:	9301      	str	r3, [sp, #4]
 800a20e:	ab1a      	add	r3, sp, #104	@ 0x68
 800a210:	9300      	str	r3, [sp, #0]
 800a212:	4a8f      	ldr	r2, [pc, #572]	@ (800a450 <_strtod_l+0x290>)
 800a214:	9805      	ldr	r0, [sp, #20]
 800a216:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a218:	a919      	add	r1, sp, #100	@ 0x64
 800a21a:	f001 faef 	bl	800b7fc <__gethex>
 800a21e:	f010 060f 	ands.w	r6, r0, #15
 800a222:	4604      	mov	r4, r0
 800a224:	d005      	beq.n	800a232 <_strtod_l+0x72>
 800a226:	2e06      	cmp	r6, #6
 800a228:	d128      	bne.n	800a27c <_strtod_l+0xbc>
 800a22a:	3501      	adds	r5, #1
 800a22c:	2300      	movs	r3, #0
 800a22e:	9519      	str	r5, [sp, #100]	@ 0x64
 800a230:	930e      	str	r3, [sp, #56]	@ 0x38
 800a232:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a234:	2b00      	cmp	r3, #0
 800a236:	f040 858e 	bne.w	800ad56 <_strtod_l+0xb96>
 800a23a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a23c:	b1cb      	cbz	r3, 800a272 <_strtod_l+0xb2>
 800a23e:	4652      	mov	r2, sl
 800a240:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a244:	ec43 2b10 	vmov	d0, r2, r3
 800a248:	b01f      	add	sp, #124	@ 0x7c
 800a24a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a24e:	2920      	cmp	r1, #32
 800a250:	d1ce      	bne.n	800a1f0 <_strtod_l+0x30>
 800a252:	3201      	adds	r2, #1
 800a254:	e7c1      	b.n	800a1da <_strtod_l+0x1a>
 800a256:	292d      	cmp	r1, #45	@ 0x2d
 800a258:	d1ca      	bne.n	800a1f0 <_strtod_l+0x30>
 800a25a:	2101      	movs	r1, #1
 800a25c:	910e      	str	r1, [sp, #56]	@ 0x38
 800a25e:	1c51      	adds	r1, r2, #1
 800a260:	9119      	str	r1, [sp, #100]	@ 0x64
 800a262:	7852      	ldrb	r2, [r2, #1]
 800a264:	2a00      	cmp	r2, #0
 800a266:	d1c5      	bne.n	800a1f4 <_strtod_l+0x34>
 800a268:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a26a:	9419      	str	r4, [sp, #100]	@ 0x64
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	f040 8570 	bne.w	800ad52 <_strtod_l+0xb92>
 800a272:	4652      	mov	r2, sl
 800a274:	465b      	mov	r3, fp
 800a276:	e7e5      	b.n	800a244 <_strtod_l+0x84>
 800a278:	2100      	movs	r1, #0
 800a27a:	e7ef      	b.n	800a25c <_strtod_l+0x9c>
 800a27c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a27e:	b13a      	cbz	r2, 800a290 <_strtod_l+0xd0>
 800a280:	2135      	movs	r1, #53	@ 0x35
 800a282:	a81c      	add	r0, sp, #112	@ 0x70
 800a284:	f7ff ff3a 	bl	800a0fc <__copybits>
 800a288:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a28a:	9805      	ldr	r0, [sp, #20]
 800a28c:	f7ff fb10 	bl	80098b0 <_Bfree>
 800a290:	3e01      	subs	r6, #1
 800a292:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a294:	2e04      	cmp	r6, #4
 800a296:	d806      	bhi.n	800a2a6 <_strtod_l+0xe6>
 800a298:	e8df f006 	tbb	[pc, r6]
 800a29c:	201d0314 	.word	0x201d0314
 800a2a0:	14          	.byte	0x14
 800a2a1:	00          	.byte	0x00
 800a2a2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a2a6:	05e1      	lsls	r1, r4, #23
 800a2a8:	bf48      	it	mi
 800a2aa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a2ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a2b2:	0d1b      	lsrs	r3, r3, #20
 800a2b4:	051b      	lsls	r3, r3, #20
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d1bb      	bne.n	800a232 <_strtod_l+0x72>
 800a2ba:	f7fe fb2d 	bl	8008918 <__errno>
 800a2be:	2322      	movs	r3, #34	@ 0x22
 800a2c0:	6003      	str	r3, [r0, #0]
 800a2c2:	e7b6      	b.n	800a232 <_strtod_l+0x72>
 800a2c4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a2c8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a2cc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a2d0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a2d4:	e7e7      	b.n	800a2a6 <_strtod_l+0xe6>
 800a2d6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800a458 <_strtod_l+0x298>
 800a2da:	e7e4      	b.n	800a2a6 <_strtod_l+0xe6>
 800a2dc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a2e0:	f04f 3aff 	mov.w	sl, #4294967295
 800a2e4:	e7df      	b.n	800a2a6 <_strtod_l+0xe6>
 800a2e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a2e8:	1c5a      	adds	r2, r3, #1
 800a2ea:	9219      	str	r2, [sp, #100]	@ 0x64
 800a2ec:	785b      	ldrb	r3, [r3, #1]
 800a2ee:	2b30      	cmp	r3, #48	@ 0x30
 800a2f0:	d0f9      	beq.n	800a2e6 <_strtod_l+0x126>
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d09d      	beq.n	800a232 <_strtod_l+0x72>
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	2700      	movs	r7, #0
 800a2fa:	9308      	str	r3, [sp, #32]
 800a2fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a2fe:	930c      	str	r3, [sp, #48]	@ 0x30
 800a300:	970b      	str	r7, [sp, #44]	@ 0x2c
 800a302:	46b9      	mov	r9, r7
 800a304:	220a      	movs	r2, #10
 800a306:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a308:	7805      	ldrb	r5, [r0, #0]
 800a30a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a30e:	b2d9      	uxtb	r1, r3
 800a310:	2909      	cmp	r1, #9
 800a312:	d928      	bls.n	800a366 <_strtod_l+0x1a6>
 800a314:	494f      	ldr	r1, [pc, #316]	@ (800a454 <_strtod_l+0x294>)
 800a316:	2201      	movs	r2, #1
 800a318:	f001 f97a 	bl	800b610 <strncmp>
 800a31c:	2800      	cmp	r0, #0
 800a31e:	d032      	beq.n	800a386 <_strtod_l+0x1c6>
 800a320:	2000      	movs	r0, #0
 800a322:	462a      	mov	r2, r5
 800a324:	900a      	str	r0, [sp, #40]	@ 0x28
 800a326:	464d      	mov	r5, r9
 800a328:	4603      	mov	r3, r0
 800a32a:	2a65      	cmp	r2, #101	@ 0x65
 800a32c:	d001      	beq.n	800a332 <_strtod_l+0x172>
 800a32e:	2a45      	cmp	r2, #69	@ 0x45
 800a330:	d114      	bne.n	800a35c <_strtod_l+0x19c>
 800a332:	b91d      	cbnz	r5, 800a33c <_strtod_l+0x17c>
 800a334:	9a08      	ldr	r2, [sp, #32]
 800a336:	4302      	orrs	r2, r0
 800a338:	d096      	beq.n	800a268 <_strtod_l+0xa8>
 800a33a:	2500      	movs	r5, #0
 800a33c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a33e:	1c62      	adds	r2, r4, #1
 800a340:	9219      	str	r2, [sp, #100]	@ 0x64
 800a342:	7862      	ldrb	r2, [r4, #1]
 800a344:	2a2b      	cmp	r2, #43	@ 0x2b
 800a346:	d07a      	beq.n	800a43e <_strtod_l+0x27e>
 800a348:	2a2d      	cmp	r2, #45	@ 0x2d
 800a34a:	d07e      	beq.n	800a44a <_strtod_l+0x28a>
 800a34c:	f04f 0c00 	mov.w	ip, #0
 800a350:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a354:	2909      	cmp	r1, #9
 800a356:	f240 8085 	bls.w	800a464 <_strtod_l+0x2a4>
 800a35a:	9419      	str	r4, [sp, #100]	@ 0x64
 800a35c:	f04f 0800 	mov.w	r8, #0
 800a360:	e0a5      	b.n	800a4ae <_strtod_l+0x2ee>
 800a362:	2300      	movs	r3, #0
 800a364:	e7c8      	b.n	800a2f8 <_strtod_l+0x138>
 800a366:	f1b9 0f08 	cmp.w	r9, #8
 800a36a:	bfd8      	it	le
 800a36c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800a36e:	f100 0001 	add.w	r0, r0, #1
 800a372:	bfda      	itte	le
 800a374:	fb02 3301 	mlale	r3, r2, r1, r3
 800a378:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800a37a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800a37e:	f109 0901 	add.w	r9, r9, #1
 800a382:	9019      	str	r0, [sp, #100]	@ 0x64
 800a384:	e7bf      	b.n	800a306 <_strtod_l+0x146>
 800a386:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a388:	1c5a      	adds	r2, r3, #1
 800a38a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a38c:	785a      	ldrb	r2, [r3, #1]
 800a38e:	f1b9 0f00 	cmp.w	r9, #0
 800a392:	d03b      	beq.n	800a40c <_strtod_l+0x24c>
 800a394:	900a      	str	r0, [sp, #40]	@ 0x28
 800a396:	464d      	mov	r5, r9
 800a398:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a39c:	2b09      	cmp	r3, #9
 800a39e:	d912      	bls.n	800a3c6 <_strtod_l+0x206>
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	e7c2      	b.n	800a32a <_strtod_l+0x16a>
 800a3a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a3a6:	1c5a      	adds	r2, r3, #1
 800a3a8:	9219      	str	r2, [sp, #100]	@ 0x64
 800a3aa:	785a      	ldrb	r2, [r3, #1]
 800a3ac:	3001      	adds	r0, #1
 800a3ae:	2a30      	cmp	r2, #48	@ 0x30
 800a3b0:	d0f8      	beq.n	800a3a4 <_strtod_l+0x1e4>
 800a3b2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a3b6:	2b08      	cmp	r3, #8
 800a3b8:	f200 84d2 	bhi.w	800ad60 <_strtod_l+0xba0>
 800a3bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a3be:	900a      	str	r0, [sp, #40]	@ 0x28
 800a3c0:	2000      	movs	r0, #0
 800a3c2:	930c      	str	r3, [sp, #48]	@ 0x30
 800a3c4:	4605      	mov	r5, r0
 800a3c6:	3a30      	subs	r2, #48	@ 0x30
 800a3c8:	f100 0301 	add.w	r3, r0, #1
 800a3cc:	d018      	beq.n	800a400 <_strtod_l+0x240>
 800a3ce:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a3d0:	4419      	add	r1, r3
 800a3d2:	910a      	str	r1, [sp, #40]	@ 0x28
 800a3d4:	462e      	mov	r6, r5
 800a3d6:	f04f 0e0a 	mov.w	lr, #10
 800a3da:	1c71      	adds	r1, r6, #1
 800a3dc:	eba1 0c05 	sub.w	ip, r1, r5
 800a3e0:	4563      	cmp	r3, ip
 800a3e2:	dc15      	bgt.n	800a410 <_strtod_l+0x250>
 800a3e4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800a3e8:	182b      	adds	r3, r5, r0
 800a3ea:	2b08      	cmp	r3, #8
 800a3ec:	f105 0501 	add.w	r5, r5, #1
 800a3f0:	4405      	add	r5, r0
 800a3f2:	dc1a      	bgt.n	800a42a <_strtod_l+0x26a>
 800a3f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a3f6:	230a      	movs	r3, #10
 800a3f8:	fb03 2301 	mla	r3, r3, r1, r2
 800a3fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a3fe:	2300      	movs	r3, #0
 800a400:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a402:	1c51      	adds	r1, r2, #1
 800a404:	9119      	str	r1, [sp, #100]	@ 0x64
 800a406:	7852      	ldrb	r2, [r2, #1]
 800a408:	4618      	mov	r0, r3
 800a40a:	e7c5      	b.n	800a398 <_strtod_l+0x1d8>
 800a40c:	4648      	mov	r0, r9
 800a40e:	e7ce      	b.n	800a3ae <_strtod_l+0x1ee>
 800a410:	2e08      	cmp	r6, #8
 800a412:	dc05      	bgt.n	800a420 <_strtod_l+0x260>
 800a414:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a416:	fb0e f606 	mul.w	r6, lr, r6
 800a41a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800a41c:	460e      	mov	r6, r1
 800a41e:	e7dc      	b.n	800a3da <_strtod_l+0x21a>
 800a420:	2910      	cmp	r1, #16
 800a422:	bfd8      	it	le
 800a424:	fb0e f707 	mulle.w	r7, lr, r7
 800a428:	e7f8      	b.n	800a41c <_strtod_l+0x25c>
 800a42a:	2b0f      	cmp	r3, #15
 800a42c:	bfdc      	itt	le
 800a42e:	230a      	movle	r3, #10
 800a430:	fb03 2707 	mlale	r7, r3, r7, r2
 800a434:	e7e3      	b.n	800a3fe <_strtod_l+0x23e>
 800a436:	2300      	movs	r3, #0
 800a438:	930a      	str	r3, [sp, #40]	@ 0x28
 800a43a:	2301      	movs	r3, #1
 800a43c:	e77a      	b.n	800a334 <_strtod_l+0x174>
 800a43e:	f04f 0c00 	mov.w	ip, #0
 800a442:	1ca2      	adds	r2, r4, #2
 800a444:	9219      	str	r2, [sp, #100]	@ 0x64
 800a446:	78a2      	ldrb	r2, [r4, #2]
 800a448:	e782      	b.n	800a350 <_strtod_l+0x190>
 800a44a:	f04f 0c01 	mov.w	ip, #1
 800a44e:	e7f8      	b.n	800a442 <_strtod_l+0x282>
 800a450:	0800c4bc 	.word	0x0800c4bc
 800a454:	0800c2ef 	.word	0x0800c2ef
 800a458:	7ff00000 	.word	0x7ff00000
 800a45c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a45e:	1c51      	adds	r1, r2, #1
 800a460:	9119      	str	r1, [sp, #100]	@ 0x64
 800a462:	7852      	ldrb	r2, [r2, #1]
 800a464:	2a30      	cmp	r2, #48	@ 0x30
 800a466:	d0f9      	beq.n	800a45c <_strtod_l+0x29c>
 800a468:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a46c:	2908      	cmp	r1, #8
 800a46e:	f63f af75 	bhi.w	800a35c <_strtod_l+0x19c>
 800a472:	3a30      	subs	r2, #48	@ 0x30
 800a474:	9209      	str	r2, [sp, #36]	@ 0x24
 800a476:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a478:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a47a:	f04f 080a 	mov.w	r8, #10
 800a47e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a480:	1c56      	adds	r6, r2, #1
 800a482:	9619      	str	r6, [sp, #100]	@ 0x64
 800a484:	7852      	ldrb	r2, [r2, #1]
 800a486:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a48a:	f1be 0f09 	cmp.w	lr, #9
 800a48e:	d939      	bls.n	800a504 <_strtod_l+0x344>
 800a490:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a492:	1a76      	subs	r6, r6, r1
 800a494:	2e08      	cmp	r6, #8
 800a496:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a49a:	dc03      	bgt.n	800a4a4 <_strtod_l+0x2e4>
 800a49c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a49e:	4588      	cmp	r8, r1
 800a4a0:	bfa8      	it	ge
 800a4a2:	4688      	movge	r8, r1
 800a4a4:	f1bc 0f00 	cmp.w	ip, #0
 800a4a8:	d001      	beq.n	800a4ae <_strtod_l+0x2ee>
 800a4aa:	f1c8 0800 	rsb	r8, r8, #0
 800a4ae:	2d00      	cmp	r5, #0
 800a4b0:	d14e      	bne.n	800a550 <_strtod_l+0x390>
 800a4b2:	9908      	ldr	r1, [sp, #32]
 800a4b4:	4308      	orrs	r0, r1
 800a4b6:	f47f aebc 	bne.w	800a232 <_strtod_l+0x72>
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	f47f aed4 	bne.w	800a268 <_strtod_l+0xa8>
 800a4c0:	2a69      	cmp	r2, #105	@ 0x69
 800a4c2:	d028      	beq.n	800a516 <_strtod_l+0x356>
 800a4c4:	dc25      	bgt.n	800a512 <_strtod_l+0x352>
 800a4c6:	2a49      	cmp	r2, #73	@ 0x49
 800a4c8:	d025      	beq.n	800a516 <_strtod_l+0x356>
 800a4ca:	2a4e      	cmp	r2, #78	@ 0x4e
 800a4cc:	f47f aecc 	bne.w	800a268 <_strtod_l+0xa8>
 800a4d0:	499a      	ldr	r1, [pc, #616]	@ (800a73c <_strtod_l+0x57c>)
 800a4d2:	a819      	add	r0, sp, #100	@ 0x64
 800a4d4:	f001 fbb4 	bl	800bc40 <__match>
 800a4d8:	2800      	cmp	r0, #0
 800a4da:	f43f aec5 	beq.w	800a268 <_strtod_l+0xa8>
 800a4de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	2b28      	cmp	r3, #40	@ 0x28
 800a4e4:	d12e      	bne.n	800a544 <_strtod_l+0x384>
 800a4e6:	4996      	ldr	r1, [pc, #600]	@ (800a740 <_strtod_l+0x580>)
 800a4e8:	aa1c      	add	r2, sp, #112	@ 0x70
 800a4ea:	a819      	add	r0, sp, #100	@ 0x64
 800a4ec:	f001 fbbc 	bl	800bc68 <__hexnan>
 800a4f0:	2805      	cmp	r0, #5
 800a4f2:	d127      	bne.n	800a544 <_strtod_l+0x384>
 800a4f4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a4f6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a4fa:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a4fe:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a502:	e696      	b.n	800a232 <_strtod_l+0x72>
 800a504:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a506:	fb08 2101 	mla	r1, r8, r1, r2
 800a50a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a50e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a510:	e7b5      	b.n	800a47e <_strtod_l+0x2be>
 800a512:	2a6e      	cmp	r2, #110	@ 0x6e
 800a514:	e7da      	b.n	800a4cc <_strtod_l+0x30c>
 800a516:	498b      	ldr	r1, [pc, #556]	@ (800a744 <_strtod_l+0x584>)
 800a518:	a819      	add	r0, sp, #100	@ 0x64
 800a51a:	f001 fb91 	bl	800bc40 <__match>
 800a51e:	2800      	cmp	r0, #0
 800a520:	f43f aea2 	beq.w	800a268 <_strtod_l+0xa8>
 800a524:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a526:	4988      	ldr	r1, [pc, #544]	@ (800a748 <_strtod_l+0x588>)
 800a528:	3b01      	subs	r3, #1
 800a52a:	a819      	add	r0, sp, #100	@ 0x64
 800a52c:	9319      	str	r3, [sp, #100]	@ 0x64
 800a52e:	f001 fb87 	bl	800bc40 <__match>
 800a532:	b910      	cbnz	r0, 800a53a <_strtod_l+0x37a>
 800a534:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a536:	3301      	adds	r3, #1
 800a538:	9319      	str	r3, [sp, #100]	@ 0x64
 800a53a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800a758 <_strtod_l+0x598>
 800a53e:	f04f 0a00 	mov.w	sl, #0
 800a542:	e676      	b.n	800a232 <_strtod_l+0x72>
 800a544:	4881      	ldr	r0, [pc, #516]	@ (800a74c <_strtod_l+0x58c>)
 800a546:	f001 f8b7 	bl	800b6b8 <nan>
 800a54a:	ec5b ab10 	vmov	sl, fp, d0
 800a54e:	e670      	b.n	800a232 <_strtod_l+0x72>
 800a550:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a552:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800a554:	eba8 0303 	sub.w	r3, r8, r3
 800a558:	f1b9 0f00 	cmp.w	r9, #0
 800a55c:	bf08      	it	eq
 800a55e:	46a9      	moveq	r9, r5
 800a560:	2d10      	cmp	r5, #16
 800a562:	9309      	str	r3, [sp, #36]	@ 0x24
 800a564:	462c      	mov	r4, r5
 800a566:	bfa8      	it	ge
 800a568:	2410      	movge	r4, #16
 800a56a:	f7f5 ffeb 	bl	8000544 <__aeabi_ui2d>
 800a56e:	2d09      	cmp	r5, #9
 800a570:	4682      	mov	sl, r0
 800a572:	468b      	mov	fp, r1
 800a574:	dc13      	bgt.n	800a59e <_strtod_l+0x3de>
 800a576:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a578:	2b00      	cmp	r3, #0
 800a57a:	f43f ae5a 	beq.w	800a232 <_strtod_l+0x72>
 800a57e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a580:	dd78      	ble.n	800a674 <_strtod_l+0x4b4>
 800a582:	2b16      	cmp	r3, #22
 800a584:	dc5f      	bgt.n	800a646 <_strtod_l+0x486>
 800a586:	4972      	ldr	r1, [pc, #456]	@ (800a750 <_strtod_l+0x590>)
 800a588:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a58c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a590:	4652      	mov	r2, sl
 800a592:	465b      	mov	r3, fp
 800a594:	f7f6 f850 	bl	8000638 <__aeabi_dmul>
 800a598:	4682      	mov	sl, r0
 800a59a:	468b      	mov	fp, r1
 800a59c:	e649      	b.n	800a232 <_strtod_l+0x72>
 800a59e:	4b6c      	ldr	r3, [pc, #432]	@ (800a750 <_strtod_l+0x590>)
 800a5a0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a5a4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a5a8:	f7f6 f846 	bl	8000638 <__aeabi_dmul>
 800a5ac:	4682      	mov	sl, r0
 800a5ae:	4638      	mov	r0, r7
 800a5b0:	468b      	mov	fp, r1
 800a5b2:	f7f5 ffc7 	bl	8000544 <__aeabi_ui2d>
 800a5b6:	4602      	mov	r2, r0
 800a5b8:	460b      	mov	r3, r1
 800a5ba:	4650      	mov	r0, sl
 800a5bc:	4659      	mov	r1, fp
 800a5be:	f7f5 fe85 	bl	80002cc <__adddf3>
 800a5c2:	2d0f      	cmp	r5, #15
 800a5c4:	4682      	mov	sl, r0
 800a5c6:	468b      	mov	fp, r1
 800a5c8:	ddd5      	ble.n	800a576 <_strtod_l+0x3b6>
 800a5ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5cc:	1b2c      	subs	r4, r5, r4
 800a5ce:	441c      	add	r4, r3
 800a5d0:	2c00      	cmp	r4, #0
 800a5d2:	f340 8093 	ble.w	800a6fc <_strtod_l+0x53c>
 800a5d6:	f014 030f 	ands.w	r3, r4, #15
 800a5da:	d00a      	beq.n	800a5f2 <_strtod_l+0x432>
 800a5dc:	495c      	ldr	r1, [pc, #368]	@ (800a750 <_strtod_l+0x590>)
 800a5de:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a5e2:	4652      	mov	r2, sl
 800a5e4:	465b      	mov	r3, fp
 800a5e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5ea:	f7f6 f825 	bl	8000638 <__aeabi_dmul>
 800a5ee:	4682      	mov	sl, r0
 800a5f0:	468b      	mov	fp, r1
 800a5f2:	f034 040f 	bics.w	r4, r4, #15
 800a5f6:	d073      	beq.n	800a6e0 <_strtod_l+0x520>
 800a5f8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a5fc:	dd49      	ble.n	800a692 <_strtod_l+0x4d2>
 800a5fe:	2400      	movs	r4, #0
 800a600:	46a0      	mov	r8, r4
 800a602:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a604:	46a1      	mov	r9, r4
 800a606:	9a05      	ldr	r2, [sp, #20]
 800a608:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800a758 <_strtod_l+0x598>
 800a60c:	2322      	movs	r3, #34	@ 0x22
 800a60e:	6013      	str	r3, [r2, #0]
 800a610:	f04f 0a00 	mov.w	sl, #0
 800a614:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a616:	2b00      	cmp	r3, #0
 800a618:	f43f ae0b 	beq.w	800a232 <_strtod_l+0x72>
 800a61c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a61e:	9805      	ldr	r0, [sp, #20]
 800a620:	f7ff f946 	bl	80098b0 <_Bfree>
 800a624:	9805      	ldr	r0, [sp, #20]
 800a626:	4649      	mov	r1, r9
 800a628:	f7ff f942 	bl	80098b0 <_Bfree>
 800a62c:	9805      	ldr	r0, [sp, #20]
 800a62e:	4641      	mov	r1, r8
 800a630:	f7ff f93e 	bl	80098b0 <_Bfree>
 800a634:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a636:	9805      	ldr	r0, [sp, #20]
 800a638:	f7ff f93a 	bl	80098b0 <_Bfree>
 800a63c:	9805      	ldr	r0, [sp, #20]
 800a63e:	4621      	mov	r1, r4
 800a640:	f7ff f936 	bl	80098b0 <_Bfree>
 800a644:	e5f5      	b.n	800a232 <_strtod_l+0x72>
 800a646:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a648:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a64c:	4293      	cmp	r3, r2
 800a64e:	dbbc      	blt.n	800a5ca <_strtod_l+0x40a>
 800a650:	4c3f      	ldr	r4, [pc, #252]	@ (800a750 <_strtod_l+0x590>)
 800a652:	f1c5 050f 	rsb	r5, r5, #15
 800a656:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a65a:	4652      	mov	r2, sl
 800a65c:	465b      	mov	r3, fp
 800a65e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a662:	f7f5 ffe9 	bl	8000638 <__aeabi_dmul>
 800a666:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a668:	1b5d      	subs	r5, r3, r5
 800a66a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a66e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a672:	e78f      	b.n	800a594 <_strtod_l+0x3d4>
 800a674:	3316      	adds	r3, #22
 800a676:	dba8      	blt.n	800a5ca <_strtod_l+0x40a>
 800a678:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a67a:	eba3 0808 	sub.w	r8, r3, r8
 800a67e:	4b34      	ldr	r3, [pc, #208]	@ (800a750 <_strtod_l+0x590>)
 800a680:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a684:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a688:	4650      	mov	r0, sl
 800a68a:	4659      	mov	r1, fp
 800a68c:	f7f6 f8fe 	bl	800088c <__aeabi_ddiv>
 800a690:	e782      	b.n	800a598 <_strtod_l+0x3d8>
 800a692:	2300      	movs	r3, #0
 800a694:	4f2f      	ldr	r7, [pc, #188]	@ (800a754 <_strtod_l+0x594>)
 800a696:	1124      	asrs	r4, r4, #4
 800a698:	4650      	mov	r0, sl
 800a69a:	4659      	mov	r1, fp
 800a69c:	461e      	mov	r6, r3
 800a69e:	2c01      	cmp	r4, #1
 800a6a0:	dc21      	bgt.n	800a6e6 <_strtod_l+0x526>
 800a6a2:	b10b      	cbz	r3, 800a6a8 <_strtod_l+0x4e8>
 800a6a4:	4682      	mov	sl, r0
 800a6a6:	468b      	mov	fp, r1
 800a6a8:	492a      	ldr	r1, [pc, #168]	@ (800a754 <_strtod_l+0x594>)
 800a6aa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a6ae:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a6b2:	4652      	mov	r2, sl
 800a6b4:	465b      	mov	r3, fp
 800a6b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6ba:	f7f5 ffbd 	bl	8000638 <__aeabi_dmul>
 800a6be:	4b26      	ldr	r3, [pc, #152]	@ (800a758 <_strtod_l+0x598>)
 800a6c0:	460a      	mov	r2, r1
 800a6c2:	400b      	ands	r3, r1
 800a6c4:	4925      	ldr	r1, [pc, #148]	@ (800a75c <_strtod_l+0x59c>)
 800a6c6:	428b      	cmp	r3, r1
 800a6c8:	4682      	mov	sl, r0
 800a6ca:	d898      	bhi.n	800a5fe <_strtod_l+0x43e>
 800a6cc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a6d0:	428b      	cmp	r3, r1
 800a6d2:	bf86      	itte	hi
 800a6d4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800a760 <_strtod_l+0x5a0>
 800a6d8:	f04f 3aff 	movhi.w	sl, #4294967295
 800a6dc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	9308      	str	r3, [sp, #32]
 800a6e4:	e076      	b.n	800a7d4 <_strtod_l+0x614>
 800a6e6:	07e2      	lsls	r2, r4, #31
 800a6e8:	d504      	bpl.n	800a6f4 <_strtod_l+0x534>
 800a6ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6ee:	f7f5 ffa3 	bl	8000638 <__aeabi_dmul>
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	3601      	adds	r6, #1
 800a6f6:	1064      	asrs	r4, r4, #1
 800a6f8:	3708      	adds	r7, #8
 800a6fa:	e7d0      	b.n	800a69e <_strtod_l+0x4de>
 800a6fc:	d0f0      	beq.n	800a6e0 <_strtod_l+0x520>
 800a6fe:	4264      	negs	r4, r4
 800a700:	f014 020f 	ands.w	r2, r4, #15
 800a704:	d00a      	beq.n	800a71c <_strtod_l+0x55c>
 800a706:	4b12      	ldr	r3, [pc, #72]	@ (800a750 <_strtod_l+0x590>)
 800a708:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a70c:	4650      	mov	r0, sl
 800a70e:	4659      	mov	r1, fp
 800a710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a714:	f7f6 f8ba 	bl	800088c <__aeabi_ddiv>
 800a718:	4682      	mov	sl, r0
 800a71a:	468b      	mov	fp, r1
 800a71c:	1124      	asrs	r4, r4, #4
 800a71e:	d0df      	beq.n	800a6e0 <_strtod_l+0x520>
 800a720:	2c1f      	cmp	r4, #31
 800a722:	dd1f      	ble.n	800a764 <_strtod_l+0x5a4>
 800a724:	2400      	movs	r4, #0
 800a726:	46a0      	mov	r8, r4
 800a728:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a72a:	46a1      	mov	r9, r4
 800a72c:	9a05      	ldr	r2, [sp, #20]
 800a72e:	2322      	movs	r3, #34	@ 0x22
 800a730:	f04f 0a00 	mov.w	sl, #0
 800a734:	f04f 0b00 	mov.w	fp, #0
 800a738:	6013      	str	r3, [r2, #0]
 800a73a:	e76b      	b.n	800a614 <_strtod_l+0x454>
 800a73c:	0800c1dd 	.word	0x0800c1dd
 800a740:	0800c4a8 	.word	0x0800c4a8
 800a744:	0800c1d5 	.word	0x0800c1d5
 800a748:	0800c20c 	.word	0x0800c20c
 800a74c:	0800c345 	.word	0x0800c345
 800a750:	0800c3e0 	.word	0x0800c3e0
 800a754:	0800c3b8 	.word	0x0800c3b8
 800a758:	7ff00000 	.word	0x7ff00000
 800a75c:	7ca00000 	.word	0x7ca00000
 800a760:	7fefffff 	.word	0x7fefffff
 800a764:	f014 0310 	ands.w	r3, r4, #16
 800a768:	bf18      	it	ne
 800a76a:	236a      	movne	r3, #106	@ 0x6a
 800a76c:	4ea9      	ldr	r6, [pc, #676]	@ (800aa14 <_strtod_l+0x854>)
 800a76e:	9308      	str	r3, [sp, #32]
 800a770:	4650      	mov	r0, sl
 800a772:	4659      	mov	r1, fp
 800a774:	2300      	movs	r3, #0
 800a776:	07e7      	lsls	r7, r4, #31
 800a778:	d504      	bpl.n	800a784 <_strtod_l+0x5c4>
 800a77a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a77e:	f7f5 ff5b 	bl	8000638 <__aeabi_dmul>
 800a782:	2301      	movs	r3, #1
 800a784:	1064      	asrs	r4, r4, #1
 800a786:	f106 0608 	add.w	r6, r6, #8
 800a78a:	d1f4      	bne.n	800a776 <_strtod_l+0x5b6>
 800a78c:	b10b      	cbz	r3, 800a792 <_strtod_l+0x5d2>
 800a78e:	4682      	mov	sl, r0
 800a790:	468b      	mov	fp, r1
 800a792:	9b08      	ldr	r3, [sp, #32]
 800a794:	b1b3      	cbz	r3, 800a7c4 <_strtod_l+0x604>
 800a796:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a79a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	4659      	mov	r1, fp
 800a7a2:	dd0f      	ble.n	800a7c4 <_strtod_l+0x604>
 800a7a4:	2b1f      	cmp	r3, #31
 800a7a6:	dd56      	ble.n	800a856 <_strtod_l+0x696>
 800a7a8:	2b34      	cmp	r3, #52	@ 0x34
 800a7aa:	bfde      	ittt	le
 800a7ac:	f04f 33ff 	movle.w	r3, #4294967295
 800a7b0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a7b4:	4093      	lslle	r3, r2
 800a7b6:	f04f 0a00 	mov.w	sl, #0
 800a7ba:	bfcc      	ite	gt
 800a7bc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a7c0:	ea03 0b01 	andle.w	fp, r3, r1
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	4650      	mov	r0, sl
 800a7ca:	4659      	mov	r1, fp
 800a7cc:	f7f6 f99c 	bl	8000b08 <__aeabi_dcmpeq>
 800a7d0:	2800      	cmp	r0, #0
 800a7d2:	d1a7      	bne.n	800a724 <_strtod_l+0x564>
 800a7d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a7d6:	9300      	str	r3, [sp, #0]
 800a7d8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a7da:	9805      	ldr	r0, [sp, #20]
 800a7dc:	462b      	mov	r3, r5
 800a7de:	464a      	mov	r2, r9
 800a7e0:	f7ff f8ce 	bl	8009980 <__s2b>
 800a7e4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a7e6:	2800      	cmp	r0, #0
 800a7e8:	f43f af09 	beq.w	800a5fe <_strtod_l+0x43e>
 800a7ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a7ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7f0:	2a00      	cmp	r2, #0
 800a7f2:	eba3 0308 	sub.w	r3, r3, r8
 800a7f6:	bfa8      	it	ge
 800a7f8:	2300      	movge	r3, #0
 800a7fa:	9312      	str	r3, [sp, #72]	@ 0x48
 800a7fc:	2400      	movs	r4, #0
 800a7fe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a802:	9316      	str	r3, [sp, #88]	@ 0x58
 800a804:	46a0      	mov	r8, r4
 800a806:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a808:	9805      	ldr	r0, [sp, #20]
 800a80a:	6859      	ldr	r1, [r3, #4]
 800a80c:	f7ff f810 	bl	8009830 <_Balloc>
 800a810:	4681      	mov	r9, r0
 800a812:	2800      	cmp	r0, #0
 800a814:	f43f aef7 	beq.w	800a606 <_strtod_l+0x446>
 800a818:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a81a:	691a      	ldr	r2, [r3, #16]
 800a81c:	3202      	adds	r2, #2
 800a81e:	f103 010c 	add.w	r1, r3, #12
 800a822:	0092      	lsls	r2, r2, #2
 800a824:	300c      	adds	r0, #12
 800a826:	f000 ff37 	bl	800b698 <memcpy>
 800a82a:	ec4b ab10 	vmov	d0, sl, fp
 800a82e:	9805      	ldr	r0, [sp, #20]
 800a830:	aa1c      	add	r2, sp, #112	@ 0x70
 800a832:	a91b      	add	r1, sp, #108	@ 0x6c
 800a834:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a838:	f7ff fbd6 	bl	8009fe8 <__d2b>
 800a83c:	901a      	str	r0, [sp, #104]	@ 0x68
 800a83e:	2800      	cmp	r0, #0
 800a840:	f43f aee1 	beq.w	800a606 <_strtod_l+0x446>
 800a844:	9805      	ldr	r0, [sp, #20]
 800a846:	2101      	movs	r1, #1
 800a848:	f7ff f930 	bl	8009aac <__i2b>
 800a84c:	4680      	mov	r8, r0
 800a84e:	b948      	cbnz	r0, 800a864 <_strtod_l+0x6a4>
 800a850:	f04f 0800 	mov.w	r8, #0
 800a854:	e6d7      	b.n	800a606 <_strtod_l+0x446>
 800a856:	f04f 32ff 	mov.w	r2, #4294967295
 800a85a:	fa02 f303 	lsl.w	r3, r2, r3
 800a85e:	ea03 0a0a 	and.w	sl, r3, sl
 800a862:	e7af      	b.n	800a7c4 <_strtod_l+0x604>
 800a864:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a866:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a868:	2d00      	cmp	r5, #0
 800a86a:	bfab      	itete	ge
 800a86c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a86e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a870:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a872:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a874:	bfac      	ite	ge
 800a876:	18ef      	addge	r7, r5, r3
 800a878:	1b5e      	sublt	r6, r3, r5
 800a87a:	9b08      	ldr	r3, [sp, #32]
 800a87c:	1aed      	subs	r5, r5, r3
 800a87e:	4415      	add	r5, r2
 800a880:	4b65      	ldr	r3, [pc, #404]	@ (800aa18 <_strtod_l+0x858>)
 800a882:	3d01      	subs	r5, #1
 800a884:	429d      	cmp	r5, r3
 800a886:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a88a:	da50      	bge.n	800a92e <_strtod_l+0x76e>
 800a88c:	1b5b      	subs	r3, r3, r5
 800a88e:	2b1f      	cmp	r3, #31
 800a890:	eba2 0203 	sub.w	r2, r2, r3
 800a894:	f04f 0101 	mov.w	r1, #1
 800a898:	dc3d      	bgt.n	800a916 <_strtod_l+0x756>
 800a89a:	fa01 f303 	lsl.w	r3, r1, r3
 800a89e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	9310      	str	r3, [sp, #64]	@ 0x40
 800a8a4:	18bd      	adds	r5, r7, r2
 800a8a6:	9b08      	ldr	r3, [sp, #32]
 800a8a8:	42af      	cmp	r7, r5
 800a8aa:	4416      	add	r6, r2
 800a8ac:	441e      	add	r6, r3
 800a8ae:	463b      	mov	r3, r7
 800a8b0:	bfa8      	it	ge
 800a8b2:	462b      	movge	r3, r5
 800a8b4:	42b3      	cmp	r3, r6
 800a8b6:	bfa8      	it	ge
 800a8b8:	4633      	movge	r3, r6
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	bfc2      	ittt	gt
 800a8be:	1aed      	subgt	r5, r5, r3
 800a8c0:	1af6      	subgt	r6, r6, r3
 800a8c2:	1aff      	subgt	r7, r7, r3
 800a8c4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	dd16      	ble.n	800a8f8 <_strtod_l+0x738>
 800a8ca:	4641      	mov	r1, r8
 800a8cc:	9805      	ldr	r0, [sp, #20]
 800a8ce:	461a      	mov	r2, r3
 800a8d0:	f7ff f9a4 	bl	8009c1c <__pow5mult>
 800a8d4:	4680      	mov	r8, r0
 800a8d6:	2800      	cmp	r0, #0
 800a8d8:	d0ba      	beq.n	800a850 <_strtod_l+0x690>
 800a8da:	4601      	mov	r1, r0
 800a8dc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a8de:	9805      	ldr	r0, [sp, #20]
 800a8e0:	f7ff f8fa 	bl	8009ad8 <__multiply>
 800a8e4:	900a      	str	r0, [sp, #40]	@ 0x28
 800a8e6:	2800      	cmp	r0, #0
 800a8e8:	f43f ae8d 	beq.w	800a606 <_strtod_l+0x446>
 800a8ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a8ee:	9805      	ldr	r0, [sp, #20]
 800a8f0:	f7fe ffde 	bl	80098b0 <_Bfree>
 800a8f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8f6:	931a      	str	r3, [sp, #104]	@ 0x68
 800a8f8:	2d00      	cmp	r5, #0
 800a8fa:	dc1d      	bgt.n	800a938 <_strtod_l+0x778>
 800a8fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	dd23      	ble.n	800a94a <_strtod_l+0x78a>
 800a902:	4649      	mov	r1, r9
 800a904:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a906:	9805      	ldr	r0, [sp, #20]
 800a908:	f7ff f988 	bl	8009c1c <__pow5mult>
 800a90c:	4681      	mov	r9, r0
 800a90e:	b9e0      	cbnz	r0, 800a94a <_strtod_l+0x78a>
 800a910:	f04f 0900 	mov.w	r9, #0
 800a914:	e677      	b.n	800a606 <_strtod_l+0x446>
 800a916:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a91a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a91e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a922:	35e2      	adds	r5, #226	@ 0xe2
 800a924:	fa01 f305 	lsl.w	r3, r1, r5
 800a928:	9310      	str	r3, [sp, #64]	@ 0x40
 800a92a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a92c:	e7ba      	b.n	800a8a4 <_strtod_l+0x6e4>
 800a92e:	2300      	movs	r3, #0
 800a930:	9310      	str	r3, [sp, #64]	@ 0x40
 800a932:	2301      	movs	r3, #1
 800a934:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a936:	e7b5      	b.n	800a8a4 <_strtod_l+0x6e4>
 800a938:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a93a:	9805      	ldr	r0, [sp, #20]
 800a93c:	462a      	mov	r2, r5
 800a93e:	f7ff f9c7 	bl	8009cd0 <__lshift>
 800a942:	901a      	str	r0, [sp, #104]	@ 0x68
 800a944:	2800      	cmp	r0, #0
 800a946:	d1d9      	bne.n	800a8fc <_strtod_l+0x73c>
 800a948:	e65d      	b.n	800a606 <_strtod_l+0x446>
 800a94a:	2e00      	cmp	r6, #0
 800a94c:	dd07      	ble.n	800a95e <_strtod_l+0x79e>
 800a94e:	4649      	mov	r1, r9
 800a950:	9805      	ldr	r0, [sp, #20]
 800a952:	4632      	mov	r2, r6
 800a954:	f7ff f9bc 	bl	8009cd0 <__lshift>
 800a958:	4681      	mov	r9, r0
 800a95a:	2800      	cmp	r0, #0
 800a95c:	d0d8      	beq.n	800a910 <_strtod_l+0x750>
 800a95e:	2f00      	cmp	r7, #0
 800a960:	dd08      	ble.n	800a974 <_strtod_l+0x7b4>
 800a962:	4641      	mov	r1, r8
 800a964:	9805      	ldr	r0, [sp, #20]
 800a966:	463a      	mov	r2, r7
 800a968:	f7ff f9b2 	bl	8009cd0 <__lshift>
 800a96c:	4680      	mov	r8, r0
 800a96e:	2800      	cmp	r0, #0
 800a970:	f43f ae49 	beq.w	800a606 <_strtod_l+0x446>
 800a974:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a976:	9805      	ldr	r0, [sp, #20]
 800a978:	464a      	mov	r2, r9
 800a97a:	f7ff fa31 	bl	8009de0 <__mdiff>
 800a97e:	4604      	mov	r4, r0
 800a980:	2800      	cmp	r0, #0
 800a982:	f43f ae40 	beq.w	800a606 <_strtod_l+0x446>
 800a986:	68c3      	ldr	r3, [r0, #12]
 800a988:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a98a:	2300      	movs	r3, #0
 800a98c:	60c3      	str	r3, [r0, #12]
 800a98e:	4641      	mov	r1, r8
 800a990:	f7ff fa0a 	bl	8009da8 <__mcmp>
 800a994:	2800      	cmp	r0, #0
 800a996:	da45      	bge.n	800aa24 <_strtod_l+0x864>
 800a998:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a99a:	ea53 030a 	orrs.w	r3, r3, sl
 800a99e:	d16b      	bne.n	800aa78 <_strtod_l+0x8b8>
 800a9a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d167      	bne.n	800aa78 <_strtod_l+0x8b8>
 800a9a8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a9ac:	0d1b      	lsrs	r3, r3, #20
 800a9ae:	051b      	lsls	r3, r3, #20
 800a9b0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a9b4:	d960      	bls.n	800aa78 <_strtod_l+0x8b8>
 800a9b6:	6963      	ldr	r3, [r4, #20]
 800a9b8:	b913      	cbnz	r3, 800a9c0 <_strtod_l+0x800>
 800a9ba:	6923      	ldr	r3, [r4, #16]
 800a9bc:	2b01      	cmp	r3, #1
 800a9be:	dd5b      	ble.n	800aa78 <_strtod_l+0x8b8>
 800a9c0:	4621      	mov	r1, r4
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	9805      	ldr	r0, [sp, #20]
 800a9c6:	f7ff f983 	bl	8009cd0 <__lshift>
 800a9ca:	4641      	mov	r1, r8
 800a9cc:	4604      	mov	r4, r0
 800a9ce:	f7ff f9eb 	bl	8009da8 <__mcmp>
 800a9d2:	2800      	cmp	r0, #0
 800a9d4:	dd50      	ble.n	800aa78 <_strtod_l+0x8b8>
 800a9d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a9da:	9a08      	ldr	r2, [sp, #32]
 800a9dc:	0d1b      	lsrs	r3, r3, #20
 800a9de:	051b      	lsls	r3, r3, #20
 800a9e0:	2a00      	cmp	r2, #0
 800a9e2:	d06a      	beq.n	800aaba <_strtod_l+0x8fa>
 800a9e4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a9e8:	d867      	bhi.n	800aaba <_strtod_l+0x8fa>
 800a9ea:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a9ee:	f67f ae9d 	bls.w	800a72c <_strtod_l+0x56c>
 800a9f2:	4b0a      	ldr	r3, [pc, #40]	@ (800aa1c <_strtod_l+0x85c>)
 800a9f4:	4650      	mov	r0, sl
 800a9f6:	4659      	mov	r1, fp
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	f7f5 fe1d 	bl	8000638 <__aeabi_dmul>
 800a9fe:	4b08      	ldr	r3, [pc, #32]	@ (800aa20 <_strtod_l+0x860>)
 800aa00:	400b      	ands	r3, r1
 800aa02:	4682      	mov	sl, r0
 800aa04:	468b      	mov	fp, r1
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	f47f ae08 	bne.w	800a61c <_strtod_l+0x45c>
 800aa0c:	9a05      	ldr	r2, [sp, #20]
 800aa0e:	2322      	movs	r3, #34	@ 0x22
 800aa10:	6013      	str	r3, [r2, #0]
 800aa12:	e603      	b.n	800a61c <_strtod_l+0x45c>
 800aa14:	0800c4d0 	.word	0x0800c4d0
 800aa18:	fffffc02 	.word	0xfffffc02
 800aa1c:	39500000 	.word	0x39500000
 800aa20:	7ff00000 	.word	0x7ff00000
 800aa24:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800aa28:	d165      	bne.n	800aaf6 <_strtod_l+0x936>
 800aa2a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800aa2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aa30:	b35a      	cbz	r2, 800aa8a <_strtod_l+0x8ca>
 800aa32:	4a9f      	ldr	r2, [pc, #636]	@ (800acb0 <_strtod_l+0xaf0>)
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d12b      	bne.n	800aa90 <_strtod_l+0x8d0>
 800aa38:	9b08      	ldr	r3, [sp, #32]
 800aa3a:	4651      	mov	r1, sl
 800aa3c:	b303      	cbz	r3, 800aa80 <_strtod_l+0x8c0>
 800aa3e:	4b9d      	ldr	r3, [pc, #628]	@ (800acb4 <_strtod_l+0xaf4>)
 800aa40:	465a      	mov	r2, fp
 800aa42:	4013      	ands	r3, r2
 800aa44:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800aa48:	f04f 32ff 	mov.w	r2, #4294967295
 800aa4c:	d81b      	bhi.n	800aa86 <_strtod_l+0x8c6>
 800aa4e:	0d1b      	lsrs	r3, r3, #20
 800aa50:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800aa54:	fa02 f303 	lsl.w	r3, r2, r3
 800aa58:	4299      	cmp	r1, r3
 800aa5a:	d119      	bne.n	800aa90 <_strtod_l+0x8d0>
 800aa5c:	4b96      	ldr	r3, [pc, #600]	@ (800acb8 <_strtod_l+0xaf8>)
 800aa5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d102      	bne.n	800aa6a <_strtod_l+0x8aa>
 800aa64:	3101      	adds	r1, #1
 800aa66:	f43f adce 	beq.w	800a606 <_strtod_l+0x446>
 800aa6a:	4b92      	ldr	r3, [pc, #584]	@ (800acb4 <_strtod_l+0xaf4>)
 800aa6c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aa6e:	401a      	ands	r2, r3
 800aa70:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800aa74:	f04f 0a00 	mov.w	sl, #0
 800aa78:	9b08      	ldr	r3, [sp, #32]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d1b9      	bne.n	800a9f2 <_strtod_l+0x832>
 800aa7e:	e5cd      	b.n	800a61c <_strtod_l+0x45c>
 800aa80:	f04f 33ff 	mov.w	r3, #4294967295
 800aa84:	e7e8      	b.n	800aa58 <_strtod_l+0x898>
 800aa86:	4613      	mov	r3, r2
 800aa88:	e7e6      	b.n	800aa58 <_strtod_l+0x898>
 800aa8a:	ea53 030a 	orrs.w	r3, r3, sl
 800aa8e:	d0a2      	beq.n	800a9d6 <_strtod_l+0x816>
 800aa90:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800aa92:	b1db      	cbz	r3, 800aacc <_strtod_l+0x90c>
 800aa94:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aa96:	4213      	tst	r3, r2
 800aa98:	d0ee      	beq.n	800aa78 <_strtod_l+0x8b8>
 800aa9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa9c:	9a08      	ldr	r2, [sp, #32]
 800aa9e:	4650      	mov	r0, sl
 800aaa0:	4659      	mov	r1, fp
 800aaa2:	b1bb      	cbz	r3, 800aad4 <_strtod_l+0x914>
 800aaa4:	f7ff fb6e 	bl	800a184 <sulp>
 800aaa8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aaac:	ec53 2b10 	vmov	r2, r3, d0
 800aab0:	f7f5 fc0c 	bl	80002cc <__adddf3>
 800aab4:	4682      	mov	sl, r0
 800aab6:	468b      	mov	fp, r1
 800aab8:	e7de      	b.n	800aa78 <_strtod_l+0x8b8>
 800aaba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800aabe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800aac2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800aac6:	f04f 3aff 	mov.w	sl, #4294967295
 800aaca:	e7d5      	b.n	800aa78 <_strtod_l+0x8b8>
 800aacc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800aace:	ea13 0f0a 	tst.w	r3, sl
 800aad2:	e7e1      	b.n	800aa98 <_strtod_l+0x8d8>
 800aad4:	f7ff fb56 	bl	800a184 <sulp>
 800aad8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aadc:	ec53 2b10 	vmov	r2, r3, d0
 800aae0:	f7f5 fbf2 	bl	80002c8 <__aeabi_dsub>
 800aae4:	2200      	movs	r2, #0
 800aae6:	2300      	movs	r3, #0
 800aae8:	4682      	mov	sl, r0
 800aaea:	468b      	mov	fp, r1
 800aaec:	f7f6 f80c 	bl	8000b08 <__aeabi_dcmpeq>
 800aaf0:	2800      	cmp	r0, #0
 800aaf2:	d0c1      	beq.n	800aa78 <_strtod_l+0x8b8>
 800aaf4:	e61a      	b.n	800a72c <_strtod_l+0x56c>
 800aaf6:	4641      	mov	r1, r8
 800aaf8:	4620      	mov	r0, r4
 800aafa:	f7ff facd 	bl	800a098 <__ratio>
 800aafe:	ec57 6b10 	vmov	r6, r7, d0
 800ab02:	2200      	movs	r2, #0
 800ab04:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ab08:	4630      	mov	r0, r6
 800ab0a:	4639      	mov	r1, r7
 800ab0c:	f7f6 f810 	bl	8000b30 <__aeabi_dcmple>
 800ab10:	2800      	cmp	r0, #0
 800ab12:	d06f      	beq.n	800abf4 <_strtod_l+0xa34>
 800ab14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d17a      	bne.n	800ac10 <_strtod_l+0xa50>
 800ab1a:	f1ba 0f00 	cmp.w	sl, #0
 800ab1e:	d158      	bne.n	800abd2 <_strtod_l+0xa12>
 800ab20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d15a      	bne.n	800abe0 <_strtod_l+0xa20>
 800ab2a:	4b64      	ldr	r3, [pc, #400]	@ (800acbc <_strtod_l+0xafc>)
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	4630      	mov	r0, r6
 800ab30:	4639      	mov	r1, r7
 800ab32:	f7f5 fff3 	bl	8000b1c <__aeabi_dcmplt>
 800ab36:	2800      	cmp	r0, #0
 800ab38:	d159      	bne.n	800abee <_strtod_l+0xa2e>
 800ab3a:	4630      	mov	r0, r6
 800ab3c:	4639      	mov	r1, r7
 800ab3e:	4b60      	ldr	r3, [pc, #384]	@ (800acc0 <_strtod_l+0xb00>)
 800ab40:	2200      	movs	r2, #0
 800ab42:	f7f5 fd79 	bl	8000638 <__aeabi_dmul>
 800ab46:	4606      	mov	r6, r0
 800ab48:	460f      	mov	r7, r1
 800ab4a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ab4e:	9606      	str	r6, [sp, #24]
 800ab50:	9307      	str	r3, [sp, #28]
 800ab52:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ab56:	4d57      	ldr	r5, [pc, #348]	@ (800acb4 <_strtod_l+0xaf4>)
 800ab58:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ab5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab5e:	401d      	ands	r5, r3
 800ab60:	4b58      	ldr	r3, [pc, #352]	@ (800acc4 <_strtod_l+0xb04>)
 800ab62:	429d      	cmp	r5, r3
 800ab64:	f040 80b2 	bne.w	800accc <_strtod_l+0xb0c>
 800ab68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab6a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ab6e:	ec4b ab10 	vmov	d0, sl, fp
 800ab72:	f7ff f9c9 	bl	8009f08 <__ulp>
 800ab76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ab7a:	ec51 0b10 	vmov	r0, r1, d0
 800ab7e:	f7f5 fd5b 	bl	8000638 <__aeabi_dmul>
 800ab82:	4652      	mov	r2, sl
 800ab84:	465b      	mov	r3, fp
 800ab86:	f7f5 fba1 	bl	80002cc <__adddf3>
 800ab8a:	460b      	mov	r3, r1
 800ab8c:	4949      	ldr	r1, [pc, #292]	@ (800acb4 <_strtod_l+0xaf4>)
 800ab8e:	4a4e      	ldr	r2, [pc, #312]	@ (800acc8 <_strtod_l+0xb08>)
 800ab90:	4019      	ands	r1, r3
 800ab92:	4291      	cmp	r1, r2
 800ab94:	4682      	mov	sl, r0
 800ab96:	d942      	bls.n	800ac1e <_strtod_l+0xa5e>
 800ab98:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ab9a:	4b47      	ldr	r3, [pc, #284]	@ (800acb8 <_strtod_l+0xaf8>)
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	d103      	bne.n	800aba8 <_strtod_l+0x9e8>
 800aba0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aba2:	3301      	adds	r3, #1
 800aba4:	f43f ad2f 	beq.w	800a606 <_strtod_l+0x446>
 800aba8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800acb8 <_strtod_l+0xaf8>
 800abac:	f04f 3aff 	mov.w	sl, #4294967295
 800abb0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800abb2:	9805      	ldr	r0, [sp, #20]
 800abb4:	f7fe fe7c 	bl	80098b0 <_Bfree>
 800abb8:	9805      	ldr	r0, [sp, #20]
 800abba:	4649      	mov	r1, r9
 800abbc:	f7fe fe78 	bl	80098b0 <_Bfree>
 800abc0:	9805      	ldr	r0, [sp, #20]
 800abc2:	4641      	mov	r1, r8
 800abc4:	f7fe fe74 	bl	80098b0 <_Bfree>
 800abc8:	9805      	ldr	r0, [sp, #20]
 800abca:	4621      	mov	r1, r4
 800abcc:	f7fe fe70 	bl	80098b0 <_Bfree>
 800abd0:	e619      	b.n	800a806 <_strtod_l+0x646>
 800abd2:	f1ba 0f01 	cmp.w	sl, #1
 800abd6:	d103      	bne.n	800abe0 <_strtod_l+0xa20>
 800abd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800abda:	2b00      	cmp	r3, #0
 800abdc:	f43f ada6 	beq.w	800a72c <_strtod_l+0x56c>
 800abe0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800ac90 <_strtod_l+0xad0>
 800abe4:	4f35      	ldr	r7, [pc, #212]	@ (800acbc <_strtod_l+0xafc>)
 800abe6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800abea:	2600      	movs	r6, #0
 800abec:	e7b1      	b.n	800ab52 <_strtod_l+0x992>
 800abee:	4f34      	ldr	r7, [pc, #208]	@ (800acc0 <_strtod_l+0xb00>)
 800abf0:	2600      	movs	r6, #0
 800abf2:	e7aa      	b.n	800ab4a <_strtod_l+0x98a>
 800abf4:	4b32      	ldr	r3, [pc, #200]	@ (800acc0 <_strtod_l+0xb00>)
 800abf6:	4630      	mov	r0, r6
 800abf8:	4639      	mov	r1, r7
 800abfa:	2200      	movs	r2, #0
 800abfc:	f7f5 fd1c 	bl	8000638 <__aeabi_dmul>
 800ac00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac02:	4606      	mov	r6, r0
 800ac04:	460f      	mov	r7, r1
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d09f      	beq.n	800ab4a <_strtod_l+0x98a>
 800ac0a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ac0e:	e7a0      	b.n	800ab52 <_strtod_l+0x992>
 800ac10:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ac98 <_strtod_l+0xad8>
 800ac14:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ac18:	ec57 6b17 	vmov	r6, r7, d7
 800ac1c:	e799      	b.n	800ab52 <_strtod_l+0x992>
 800ac1e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ac22:	9b08      	ldr	r3, [sp, #32]
 800ac24:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d1c1      	bne.n	800abb0 <_strtod_l+0x9f0>
 800ac2c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ac30:	0d1b      	lsrs	r3, r3, #20
 800ac32:	051b      	lsls	r3, r3, #20
 800ac34:	429d      	cmp	r5, r3
 800ac36:	d1bb      	bne.n	800abb0 <_strtod_l+0x9f0>
 800ac38:	4630      	mov	r0, r6
 800ac3a:	4639      	mov	r1, r7
 800ac3c:	f7f6 f85c 	bl	8000cf8 <__aeabi_d2lz>
 800ac40:	f7f5 fccc 	bl	80005dc <__aeabi_l2d>
 800ac44:	4602      	mov	r2, r0
 800ac46:	460b      	mov	r3, r1
 800ac48:	4630      	mov	r0, r6
 800ac4a:	4639      	mov	r1, r7
 800ac4c:	f7f5 fb3c 	bl	80002c8 <__aeabi_dsub>
 800ac50:	460b      	mov	r3, r1
 800ac52:	4602      	mov	r2, r0
 800ac54:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ac58:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ac5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac5e:	ea46 060a 	orr.w	r6, r6, sl
 800ac62:	431e      	orrs	r6, r3
 800ac64:	d06f      	beq.n	800ad46 <_strtod_l+0xb86>
 800ac66:	a30e      	add	r3, pc, #56	@ (adr r3, 800aca0 <_strtod_l+0xae0>)
 800ac68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac6c:	f7f5 ff56 	bl	8000b1c <__aeabi_dcmplt>
 800ac70:	2800      	cmp	r0, #0
 800ac72:	f47f acd3 	bne.w	800a61c <_strtod_l+0x45c>
 800ac76:	a30c      	add	r3, pc, #48	@ (adr r3, 800aca8 <_strtod_l+0xae8>)
 800ac78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac80:	f7f5 ff6a 	bl	8000b58 <__aeabi_dcmpgt>
 800ac84:	2800      	cmp	r0, #0
 800ac86:	d093      	beq.n	800abb0 <_strtod_l+0x9f0>
 800ac88:	e4c8      	b.n	800a61c <_strtod_l+0x45c>
 800ac8a:	bf00      	nop
 800ac8c:	f3af 8000 	nop.w
 800ac90:	00000000 	.word	0x00000000
 800ac94:	bff00000 	.word	0xbff00000
 800ac98:	00000000 	.word	0x00000000
 800ac9c:	3ff00000 	.word	0x3ff00000
 800aca0:	94a03595 	.word	0x94a03595
 800aca4:	3fdfffff 	.word	0x3fdfffff
 800aca8:	35afe535 	.word	0x35afe535
 800acac:	3fe00000 	.word	0x3fe00000
 800acb0:	000fffff 	.word	0x000fffff
 800acb4:	7ff00000 	.word	0x7ff00000
 800acb8:	7fefffff 	.word	0x7fefffff
 800acbc:	3ff00000 	.word	0x3ff00000
 800acc0:	3fe00000 	.word	0x3fe00000
 800acc4:	7fe00000 	.word	0x7fe00000
 800acc8:	7c9fffff 	.word	0x7c9fffff
 800accc:	9b08      	ldr	r3, [sp, #32]
 800acce:	b323      	cbz	r3, 800ad1a <_strtod_l+0xb5a>
 800acd0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800acd4:	d821      	bhi.n	800ad1a <_strtod_l+0xb5a>
 800acd6:	a328      	add	r3, pc, #160	@ (adr r3, 800ad78 <_strtod_l+0xbb8>)
 800acd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acdc:	4630      	mov	r0, r6
 800acde:	4639      	mov	r1, r7
 800ace0:	f7f5 ff26 	bl	8000b30 <__aeabi_dcmple>
 800ace4:	b1a0      	cbz	r0, 800ad10 <_strtod_l+0xb50>
 800ace6:	4639      	mov	r1, r7
 800ace8:	4630      	mov	r0, r6
 800acea:	f7f5 ff7d 	bl	8000be8 <__aeabi_d2uiz>
 800acee:	2801      	cmp	r0, #1
 800acf0:	bf38      	it	cc
 800acf2:	2001      	movcc	r0, #1
 800acf4:	f7f5 fc26 	bl	8000544 <__aeabi_ui2d>
 800acf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800acfa:	4606      	mov	r6, r0
 800acfc:	460f      	mov	r7, r1
 800acfe:	b9fb      	cbnz	r3, 800ad40 <_strtod_l+0xb80>
 800ad00:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ad04:	9014      	str	r0, [sp, #80]	@ 0x50
 800ad06:	9315      	str	r3, [sp, #84]	@ 0x54
 800ad08:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ad0c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ad10:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ad12:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ad16:	1b5b      	subs	r3, r3, r5
 800ad18:	9311      	str	r3, [sp, #68]	@ 0x44
 800ad1a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ad1e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ad22:	f7ff f8f1 	bl	8009f08 <__ulp>
 800ad26:	4650      	mov	r0, sl
 800ad28:	ec53 2b10 	vmov	r2, r3, d0
 800ad2c:	4659      	mov	r1, fp
 800ad2e:	f7f5 fc83 	bl	8000638 <__aeabi_dmul>
 800ad32:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ad36:	f7f5 fac9 	bl	80002cc <__adddf3>
 800ad3a:	4682      	mov	sl, r0
 800ad3c:	468b      	mov	fp, r1
 800ad3e:	e770      	b.n	800ac22 <_strtod_l+0xa62>
 800ad40:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ad44:	e7e0      	b.n	800ad08 <_strtod_l+0xb48>
 800ad46:	a30e      	add	r3, pc, #56	@ (adr r3, 800ad80 <_strtod_l+0xbc0>)
 800ad48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad4c:	f7f5 fee6 	bl	8000b1c <__aeabi_dcmplt>
 800ad50:	e798      	b.n	800ac84 <_strtod_l+0xac4>
 800ad52:	2300      	movs	r3, #0
 800ad54:	930e      	str	r3, [sp, #56]	@ 0x38
 800ad56:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ad58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad5a:	6013      	str	r3, [r2, #0]
 800ad5c:	f7ff ba6d 	b.w	800a23a <_strtod_l+0x7a>
 800ad60:	2a65      	cmp	r2, #101	@ 0x65
 800ad62:	f43f ab68 	beq.w	800a436 <_strtod_l+0x276>
 800ad66:	2a45      	cmp	r2, #69	@ 0x45
 800ad68:	f43f ab65 	beq.w	800a436 <_strtod_l+0x276>
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	f7ff bba0 	b.w	800a4b2 <_strtod_l+0x2f2>
 800ad72:	bf00      	nop
 800ad74:	f3af 8000 	nop.w
 800ad78:	ffc00000 	.word	0xffc00000
 800ad7c:	41dfffff 	.word	0x41dfffff
 800ad80:	94a03595 	.word	0x94a03595
 800ad84:	3fcfffff 	.word	0x3fcfffff

0800ad88 <_strtod_r>:
 800ad88:	4b01      	ldr	r3, [pc, #4]	@ (800ad90 <_strtod_r+0x8>)
 800ad8a:	f7ff ba19 	b.w	800a1c0 <_strtod_l>
 800ad8e:	bf00      	nop
 800ad90:	20000080 	.word	0x20000080

0800ad94 <_strtol_l.isra.0>:
 800ad94:	2b24      	cmp	r3, #36	@ 0x24
 800ad96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad9a:	4686      	mov	lr, r0
 800ad9c:	4690      	mov	r8, r2
 800ad9e:	d801      	bhi.n	800ada4 <_strtol_l.isra.0+0x10>
 800ada0:	2b01      	cmp	r3, #1
 800ada2:	d106      	bne.n	800adb2 <_strtol_l.isra.0+0x1e>
 800ada4:	f7fd fdb8 	bl	8008918 <__errno>
 800ada8:	2316      	movs	r3, #22
 800adaa:	6003      	str	r3, [r0, #0]
 800adac:	2000      	movs	r0, #0
 800adae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adb2:	4834      	ldr	r0, [pc, #208]	@ (800ae84 <_strtol_l.isra.0+0xf0>)
 800adb4:	460d      	mov	r5, r1
 800adb6:	462a      	mov	r2, r5
 800adb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800adbc:	5d06      	ldrb	r6, [r0, r4]
 800adbe:	f016 0608 	ands.w	r6, r6, #8
 800adc2:	d1f8      	bne.n	800adb6 <_strtol_l.isra.0+0x22>
 800adc4:	2c2d      	cmp	r4, #45	@ 0x2d
 800adc6:	d110      	bne.n	800adea <_strtol_l.isra.0+0x56>
 800adc8:	782c      	ldrb	r4, [r5, #0]
 800adca:	2601      	movs	r6, #1
 800adcc:	1c95      	adds	r5, r2, #2
 800adce:	f033 0210 	bics.w	r2, r3, #16
 800add2:	d115      	bne.n	800ae00 <_strtol_l.isra.0+0x6c>
 800add4:	2c30      	cmp	r4, #48	@ 0x30
 800add6:	d10d      	bne.n	800adf4 <_strtol_l.isra.0+0x60>
 800add8:	782a      	ldrb	r2, [r5, #0]
 800adda:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800adde:	2a58      	cmp	r2, #88	@ 0x58
 800ade0:	d108      	bne.n	800adf4 <_strtol_l.isra.0+0x60>
 800ade2:	786c      	ldrb	r4, [r5, #1]
 800ade4:	3502      	adds	r5, #2
 800ade6:	2310      	movs	r3, #16
 800ade8:	e00a      	b.n	800ae00 <_strtol_l.isra.0+0x6c>
 800adea:	2c2b      	cmp	r4, #43	@ 0x2b
 800adec:	bf04      	itt	eq
 800adee:	782c      	ldrbeq	r4, [r5, #0]
 800adf0:	1c95      	addeq	r5, r2, #2
 800adf2:	e7ec      	b.n	800adce <_strtol_l.isra.0+0x3a>
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d1f6      	bne.n	800ade6 <_strtol_l.isra.0+0x52>
 800adf8:	2c30      	cmp	r4, #48	@ 0x30
 800adfa:	bf14      	ite	ne
 800adfc:	230a      	movne	r3, #10
 800adfe:	2308      	moveq	r3, #8
 800ae00:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ae04:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ae08:	2200      	movs	r2, #0
 800ae0a:	fbbc f9f3 	udiv	r9, ip, r3
 800ae0e:	4610      	mov	r0, r2
 800ae10:	fb03 ca19 	mls	sl, r3, r9, ip
 800ae14:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ae18:	2f09      	cmp	r7, #9
 800ae1a:	d80f      	bhi.n	800ae3c <_strtol_l.isra.0+0xa8>
 800ae1c:	463c      	mov	r4, r7
 800ae1e:	42a3      	cmp	r3, r4
 800ae20:	dd1b      	ble.n	800ae5a <_strtol_l.isra.0+0xc6>
 800ae22:	1c57      	adds	r7, r2, #1
 800ae24:	d007      	beq.n	800ae36 <_strtol_l.isra.0+0xa2>
 800ae26:	4581      	cmp	r9, r0
 800ae28:	d314      	bcc.n	800ae54 <_strtol_l.isra.0+0xc0>
 800ae2a:	d101      	bne.n	800ae30 <_strtol_l.isra.0+0x9c>
 800ae2c:	45a2      	cmp	sl, r4
 800ae2e:	db11      	blt.n	800ae54 <_strtol_l.isra.0+0xc0>
 800ae30:	fb00 4003 	mla	r0, r0, r3, r4
 800ae34:	2201      	movs	r2, #1
 800ae36:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ae3a:	e7eb      	b.n	800ae14 <_strtol_l.isra.0+0x80>
 800ae3c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ae40:	2f19      	cmp	r7, #25
 800ae42:	d801      	bhi.n	800ae48 <_strtol_l.isra.0+0xb4>
 800ae44:	3c37      	subs	r4, #55	@ 0x37
 800ae46:	e7ea      	b.n	800ae1e <_strtol_l.isra.0+0x8a>
 800ae48:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ae4c:	2f19      	cmp	r7, #25
 800ae4e:	d804      	bhi.n	800ae5a <_strtol_l.isra.0+0xc6>
 800ae50:	3c57      	subs	r4, #87	@ 0x57
 800ae52:	e7e4      	b.n	800ae1e <_strtol_l.isra.0+0x8a>
 800ae54:	f04f 32ff 	mov.w	r2, #4294967295
 800ae58:	e7ed      	b.n	800ae36 <_strtol_l.isra.0+0xa2>
 800ae5a:	1c53      	adds	r3, r2, #1
 800ae5c:	d108      	bne.n	800ae70 <_strtol_l.isra.0+0xdc>
 800ae5e:	2322      	movs	r3, #34	@ 0x22
 800ae60:	f8ce 3000 	str.w	r3, [lr]
 800ae64:	4660      	mov	r0, ip
 800ae66:	f1b8 0f00 	cmp.w	r8, #0
 800ae6a:	d0a0      	beq.n	800adae <_strtol_l.isra.0+0x1a>
 800ae6c:	1e69      	subs	r1, r5, #1
 800ae6e:	e006      	b.n	800ae7e <_strtol_l.isra.0+0xea>
 800ae70:	b106      	cbz	r6, 800ae74 <_strtol_l.isra.0+0xe0>
 800ae72:	4240      	negs	r0, r0
 800ae74:	f1b8 0f00 	cmp.w	r8, #0
 800ae78:	d099      	beq.n	800adae <_strtol_l.isra.0+0x1a>
 800ae7a:	2a00      	cmp	r2, #0
 800ae7c:	d1f6      	bne.n	800ae6c <_strtol_l.isra.0+0xd8>
 800ae7e:	f8c8 1000 	str.w	r1, [r8]
 800ae82:	e794      	b.n	800adae <_strtol_l.isra.0+0x1a>
 800ae84:	0800c4f9 	.word	0x0800c4f9

0800ae88 <_strtol_r>:
 800ae88:	f7ff bf84 	b.w	800ad94 <_strtol_l.isra.0>

0800ae8c <__ssputs_r>:
 800ae8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae90:	688e      	ldr	r6, [r1, #8]
 800ae92:	461f      	mov	r7, r3
 800ae94:	42be      	cmp	r6, r7
 800ae96:	680b      	ldr	r3, [r1, #0]
 800ae98:	4682      	mov	sl, r0
 800ae9a:	460c      	mov	r4, r1
 800ae9c:	4690      	mov	r8, r2
 800ae9e:	d82d      	bhi.n	800aefc <__ssputs_r+0x70>
 800aea0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aea4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aea8:	d026      	beq.n	800aef8 <__ssputs_r+0x6c>
 800aeaa:	6965      	ldr	r5, [r4, #20]
 800aeac:	6909      	ldr	r1, [r1, #16]
 800aeae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aeb2:	eba3 0901 	sub.w	r9, r3, r1
 800aeb6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aeba:	1c7b      	adds	r3, r7, #1
 800aebc:	444b      	add	r3, r9
 800aebe:	106d      	asrs	r5, r5, #1
 800aec0:	429d      	cmp	r5, r3
 800aec2:	bf38      	it	cc
 800aec4:	461d      	movcc	r5, r3
 800aec6:	0553      	lsls	r3, r2, #21
 800aec8:	d527      	bpl.n	800af1a <__ssputs_r+0x8e>
 800aeca:	4629      	mov	r1, r5
 800aecc:	f7fe fc24 	bl	8009718 <_malloc_r>
 800aed0:	4606      	mov	r6, r0
 800aed2:	b360      	cbz	r0, 800af2e <__ssputs_r+0xa2>
 800aed4:	6921      	ldr	r1, [r4, #16]
 800aed6:	464a      	mov	r2, r9
 800aed8:	f000 fbde 	bl	800b698 <memcpy>
 800aedc:	89a3      	ldrh	r3, [r4, #12]
 800aede:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aee2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aee6:	81a3      	strh	r3, [r4, #12]
 800aee8:	6126      	str	r6, [r4, #16]
 800aeea:	6165      	str	r5, [r4, #20]
 800aeec:	444e      	add	r6, r9
 800aeee:	eba5 0509 	sub.w	r5, r5, r9
 800aef2:	6026      	str	r6, [r4, #0]
 800aef4:	60a5      	str	r5, [r4, #8]
 800aef6:	463e      	mov	r6, r7
 800aef8:	42be      	cmp	r6, r7
 800aefa:	d900      	bls.n	800aefe <__ssputs_r+0x72>
 800aefc:	463e      	mov	r6, r7
 800aefe:	6820      	ldr	r0, [r4, #0]
 800af00:	4632      	mov	r2, r6
 800af02:	4641      	mov	r1, r8
 800af04:	f000 fb6a 	bl	800b5dc <memmove>
 800af08:	68a3      	ldr	r3, [r4, #8]
 800af0a:	1b9b      	subs	r3, r3, r6
 800af0c:	60a3      	str	r3, [r4, #8]
 800af0e:	6823      	ldr	r3, [r4, #0]
 800af10:	4433      	add	r3, r6
 800af12:	6023      	str	r3, [r4, #0]
 800af14:	2000      	movs	r0, #0
 800af16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af1a:	462a      	mov	r2, r5
 800af1c:	f000 ff51 	bl	800bdc2 <_realloc_r>
 800af20:	4606      	mov	r6, r0
 800af22:	2800      	cmp	r0, #0
 800af24:	d1e0      	bne.n	800aee8 <__ssputs_r+0x5c>
 800af26:	6921      	ldr	r1, [r4, #16]
 800af28:	4650      	mov	r0, sl
 800af2a:	f7fe fb81 	bl	8009630 <_free_r>
 800af2e:	230c      	movs	r3, #12
 800af30:	f8ca 3000 	str.w	r3, [sl]
 800af34:	89a3      	ldrh	r3, [r4, #12]
 800af36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af3a:	81a3      	strh	r3, [r4, #12]
 800af3c:	f04f 30ff 	mov.w	r0, #4294967295
 800af40:	e7e9      	b.n	800af16 <__ssputs_r+0x8a>
	...

0800af44 <_svfiprintf_r>:
 800af44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af48:	4698      	mov	r8, r3
 800af4a:	898b      	ldrh	r3, [r1, #12]
 800af4c:	061b      	lsls	r3, r3, #24
 800af4e:	b09d      	sub	sp, #116	@ 0x74
 800af50:	4607      	mov	r7, r0
 800af52:	460d      	mov	r5, r1
 800af54:	4614      	mov	r4, r2
 800af56:	d510      	bpl.n	800af7a <_svfiprintf_r+0x36>
 800af58:	690b      	ldr	r3, [r1, #16]
 800af5a:	b973      	cbnz	r3, 800af7a <_svfiprintf_r+0x36>
 800af5c:	2140      	movs	r1, #64	@ 0x40
 800af5e:	f7fe fbdb 	bl	8009718 <_malloc_r>
 800af62:	6028      	str	r0, [r5, #0]
 800af64:	6128      	str	r0, [r5, #16]
 800af66:	b930      	cbnz	r0, 800af76 <_svfiprintf_r+0x32>
 800af68:	230c      	movs	r3, #12
 800af6a:	603b      	str	r3, [r7, #0]
 800af6c:	f04f 30ff 	mov.w	r0, #4294967295
 800af70:	b01d      	add	sp, #116	@ 0x74
 800af72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af76:	2340      	movs	r3, #64	@ 0x40
 800af78:	616b      	str	r3, [r5, #20]
 800af7a:	2300      	movs	r3, #0
 800af7c:	9309      	str	r3, [sp, #36]	@ 0x24
 800af7e:	2320      	movs	r3, #32
 800af80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800af84:	f8cd 800c 	str.w	r8, [sp, #12]
 800af88:	2330      	movs	r3, #48	@ 0x30
 800af8a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b128 <_svfiprintf_r+0x1e4>
 800af8e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800af92:	f04f 0901 	mov.w	r9, #1
 800af96:	4623      	mov	r3, r4
 800af98:	469a      	mov	sl, r3
 800af9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af9e:	b10a      	cbz	r2, 800afa4 <_svfiprintf_r+0x60>
 800afa0:	2a25      	cmp	r2, #37	@ 0x25
 800afa2:	d1f9      	bne.n	800af98 <_svfiprintf_r+0x54>
 800afa4:	ebba 0b04 	subs.w	fp, sl, r4
 800afa8:	d00b      	beq.n	800afc2 <_svfiprintf_r+0x7e>
 800afaa:	465b      	mov	r3, fp
 800afac:	4622      	mov	r2, r4
 800afae:	4629      	mov	r1, r5
 800afb0:	4638      	mov	r0, r7
 800afb2:	f7ff ff6b 	bl	800ae8c <__ssputs_r>
 800afb6:	3001      	adds	r0, #1
 800afb8:	f000 80a7 	beq.w	800b10a <_svfiprintf_r+0x1c6>
 800afbc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800afbe:	445a      	add	r2, fp
 800afc0:	9209      	str	r2, [sp, #36]	@ 0x24
 800afc2:	f89a 3000 	ldrb.w	r3, [sl]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	f000 809f 	beq.w	800b10a <_svfiprintf_r+0x1c6>
 800afcc:	2300      	movs	r3, #0
 800afce:	f04f 32ff 	mov.w	r2, #4294967295
 800afd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afd6:	f10a 0a01 	add.w	sl, sl, #1
 800afda:	9304      	str	r3, [sp, #16]
 800afdc:	9307      	str	r3, [sp, #28]
 800afde:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800afe2:	931a      	str	r3, [sp, #104]	@ 0x68
 800afe4:	4654      	mov	r4, sl
 800afe6:	2205      	movs	r2, #5
 800afe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afec:	484e      	ldr	r0, [pc, #312]	@ (800b128 <_svfiprintf_r+0x1e4>)
 800afee:	f7f5 f90f 	bl	8000210 <memchr>
 800aff2:	9a04      	ldr	r2, [sp, #16]
 800aff4:	b9d8      	cbnz	r0, 800b02e <_svfiprintf_r+0xea>
 800aff6:	06d0      	lsls	r0, r2, #27
 800aff8:	bf44      	itt	mi
 800affa:	2320      	movmi	r3, #32
 800affc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b000:	0711      	lsls	r1, r2, #28
 800b002:	bf44      	itt	mi
 800b004:	232b      	movmi	r3, #43	@ 0x2b
 800b006:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b00a:	f89a 3000 	ldrb.w	r3, [sl]
 800b00e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b010:	d015      	beq.n	800b03e <_svfiprintf_r+0xfa>
 800b012:	9a07      	ldr	r2, [sp, #28]
 800b014:	4654      	mov	r4, sl
 800b016:	2000      	movs	r0, #0
 800b018:	f04f 0c0a 	mov.w	ip, #10
 800b01c:	4621      	mov	r1, r4
 800b01e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b022:	3b30      	subs	r3, #48	@ 0x30
 800b024:	2b09      	cmp	r3, #9
 800b026:	d94b      	bls.n	800b0c0 <_svfiprintf_r+0x17c>
 800b028:	b1b0      	cbz	r0, 800b058 <_svfiprintf_r+0x114>
 800b02a:	9207      	str	r2, [sp, #28]
 800b02c:	e014      	b.n	800b058 <_svfiprintf_r+0x114>
 800b02e:	eba0 0308 	sub.w	r3, r0, r8
 800b032:	fa09 f303 	lsl.w	r3, r9, r3
 800b036:	4313      	orrs	r3, r2
 800b038:	9304      	str	r3, [sp, #16]
 800b03a:	46a2      	mov	sl, r4
 800b03c:	e7d2      	b.n	800afe4 <_svfiprintf_r+0xa0>
 800b03e:	9b03      	ldr	r3, [sp, #12]
 800b040:	1d19      	adds	r1, r3, #4
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	9103      	str	r1, [sp, #12]
 800b046:	2b00      	cmp	r3, #0
 800b048:	bfbb      	ittet	lt
 800b04a:	425b      	neglt	r3, r3
 800b04c:	f042 0202 	orrlt.w	r2, r2, #2
 800b050:	9307      	strge	r3, [sp, #28]
 800b052:	9307      	strlt	r3, [sp, #28]
 800b054:	bfb8      	it	lt
 800b056:	9204      	strlt	r2, [sp, #16]
 800b058:	7823      	ldrb	r3, [r4, #0]
 800b05a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b05c:	d10a      	bne.n	800b074 <_svfiprintf_r+0x130>
 800b05e:	7863      	ldrb	r3, [r4, #1]
 800b060:	2b2a      	cmp	r3, #42	@ 0x2a
 800b062:	d132      	bne.n	800b0ca <_svfiprintf_r+0x186>
 800b064:	9b03      	ldr	r3, [sp, #12]
 800b066:	1d1a      	adds	r2, r3, #4
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	9203      	str	r2, [sp, #12]
 800b06c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b070:	3402      	adds	r4, #2
 800b072:	9305      	str	r3, [sp, #20]
 800b074:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b138 <_svfiprintf_r+0x1f4>
 800b078:	7821      	ldrb	r1, [r4, #0]
 800b07a:	2203      	movs	r2, #3
 800b07c:	4650      	mov	r0, sl
 800b07e:	f7f5 f8c7 	bl	8000210 <memchr>
 800b082:	b138      	cbz	r0, 800b094 <_svfiprintf_r+0x150>
 800b084:	9b04      	ldr	r3, [sp, #16]
 800b086:	eba0 000a 	sub.w	r0, r0, sl
 800b08a:	2240      	movs	r2, #64	@ 0x40
 800b08c:	4082      	lsls	r2, r0
 800b08e:	4313      	orrs	r3, r2
 800b090:	3401      	adds	r4, #1
 800b092:	9304      	str	r3, [sp, #16]
 800b094:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b098:	4824      	ldr	r0, [pc, #144]	@ (800b12c <_svfiprintf_r+0x1e8>)
 800b09a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b09e:	2206      	movs	r2, #6
 800b0a0:	f7f5 f8b6 	bl	8000210 <memchr>
 800b0a4:	2800      	cmp	r0, #0
 800b0a6:	d036      	beq.n	800b116 <_svfiprintf_r+0x1d2>
 800b0a8:	4b21      	ldr	r3, [pc, #132]	@ (800b130 <_svfiprintf_r+0x1ec>)
 800b0aa:	bb1b      	cbnz	r3, 800b0f4 <_svfiprintf_r+0x1b0>
 800b0ac:	9b03      	ldr	r3, [sp, #12]
 800b0ae:	3307      	adds	r3, #7
 800b0b0:	f023 0307 	bic.w	r3, r3, #7
 800b0b4:	3308      	adds	r3, #8
 800b0b6:	9303      	str	r3, [sp, #12]
 800b0b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0ba:	4433      	add	r3, r6
 800b0bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0be:	e76a      	b.n	800af96 <_svfiprintf_r+0x52>
 800b0c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0c4:	460c      	mov	r4, r1
 800b0c6:	2001      	movs	r0, #1
 800b0c8:	e7a8      	b.n	800b01c <_svfiprintf_r+0xd8>
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	3401      	adds	r4, #1
 800b0ce:	9305      	str	r3, [sp, #20]
 800b0d0:	4619      	mov	r1, r3
 800b0d2:	f04f 0c0a 	mov.w	ip, #10
 800b0d6:	4620      	mov	r0, r4
 800b0d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0dc:	3a30      	subs	r2, #48	@ 0x30
 800b0de:	2a09      	cmp	r2, #9
 800b0e0:	d903      	bls.n	800b0ea <_svfiprintf_r+0x1a6>
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d0c6      	beq.n	800b074 <_svfiprintf_r+0x130>
 800b0e6:	9105      	str	r1, [sp, #20]
 800b0e8:	e7c4      	b.n	800b074 <_svfiprintf_r+0x130>
 800b0ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0ee:	4604      	mov	r4, r0
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	e7f0      	b.n	800b0d6 <_svfiprintf_r+0x192>
 800b0f4:	ab03      	add	r3, sp, #12
 800b0f6:	9300      	str	r3, [sp, #0]
 800b0f8:	462a      	mov	r2, r5
 800b0fa:	4b0e      	ldr	r3, [pc, #56]	@ (800b134 <_svfiprintf_r+0x1f0>)
 800b0fc:	a904      	add	r1, sp, #16
 800b0fe:	4638      	mov	r0, r7
 800b100:	f7fc fbc8 	bl	8007894 <_printf_float>
 800b104:	1c42      	adds	r2, r0, #1
 800b106:	4606      	mov	r6, r0
 800b108:	d1d6      	bne.n	800b0b8 <_svfiprintf_r+0x174>
 800b10a:	89ab      	ldrh	r3, [r5, #12]
 800b10c:	065b      	lsls	r3, r3, #25
 800b10e:	f53f af2d 	bmi.w	800af6c <_svfiprintf_r+0x28>
 800b112:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b114:	e72c      	b.n	800af70 <_svfiprintf_r+0x2c>
 800b116:	ab03      	add	r3, sp, #12
 800b118:	9300      	str	r3, [sp, #0]
 800b11a:	462a      	mov	r2, r5
 800b11c:	4b05      	ldr	r3, [pc, #20]	@ (800b134 <_svfiprintf_r+0x1f0>)
 800b11e:	a904      	add	r1, sp, #16
 800b120:	4638      	mov	r0, r7
 800b122:	f7fc fe4f 	bl	8007dc4 <_printf_i>
 800b126:	e7ed      	b.n	800b104 <_svfiprintf_r+0x1c0>
 800b128:	0800c2f1 	.word	0x0800c2f1
 800b12c:	0800c2fb 	.word	0x0800c2fb
 800b130:	08007895 	.word	0x08007895
 800b134:	0800ae8d 	.word	0x0800ae8d
 800b138:	0800c2f7 	.word	0x0800c2f7

0800b13c <__sfputc_r>:
 800b13c:	6893      	ldr	r3, [r2, #8]
 800b13e:	3b01      	subs	r3, #1
 800b140:	2b00      	cmp	r3, #0
 800b142:	b410      	push	{r4}
 800b144:	6093      	str	r3, [r2, #8]
 800b146:	da08      	bge.n	800b15a <__sfputc_r+0x1e>
 800b148:	6994      	ldr	r4, [r2, #24]
 800b14a:	42a3      	cmp	r3, r4
 800b14c:	db01      	blt.n	800b152 <__sfputc_r+0x16>
 800b14e:	290a      	cmp	r1, #10
 800b150:	d103      	bne.n	800b15a <__sfputc_r+0x1e>
 800b152:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b156:	f7fd baf8 	b.w	800874a <__swbuf_r>
 800b15a:	6813      	ldr	r3, [r2, #0]
 800b15c:	1c58      	adds	r0, r3, #1
 800b15e:	6010      	str	r0, [r2, #0]
 800b160:	7019      	strb	r1, [r3, #0]
 800b162:	4608      	mov	r0, r1
 800b164:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b168:	4770      	bx	lr

0800b16a <__sfputs_r>:
 800b16a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b16c:	4606      	mov	r6, r0
 800b16e:	460f      	mov	r7, r1
 800b170:	4614      	mov	r4, r2
 800b172:	18d5      	adds	r5, r2, r3
 800b174:	42ac      	cmp	r4, r5
 800b176:	d101      	bne.n	800b17c <__sfputs_r+0x12>
 800b178:	2000      	movs	r0, #0
 800b17a:	e007      	b.n	800b18c <__sfputs_r+0x22>
 800b17c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b180:	463a      	mov	r2, r7
 800b182:	4630      	mov	r0, r6
 800b184:	f7ff ffda 	bl	800b13c <__sfputc_r>
 800b188:	1c43      	adds	r3, r0, #1
 800b18a:	d1f3      	bne.n	800b174 <__sfputs_r+0xa>
 800b18c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b190 <_vfiprintf_r>:
 800b190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b194:	460d      	mov	r5, r1
 800b196:	b09d      	sub	sp, #116	@ 0x74
 800b198:	4614      	mov	r4, r2
 800b19a:	4698      	mov	r8, r3
 800b19c:	4606      	mov	r6, r0
 800b19e:	b118      	cbz	r0, 800b1a8 <_vfiprintf_r+0x18>
 800b1a0:	6a03      	ldr	r3, [r0, #32]
 800b1a2:	b90b      	cbnz	r3, 800b1a8 <_vfiprintf_r+0x18>
 800b1a4:	f7fd f9c6 	bl	8008534 <__sinit>
 800b1a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b1aa:	07d9      	lsls	r1, r3, #31
 800b1ac:	d405      	bmi.n	800b1ba <_vfiprintf_r+0x2a>
 800b1ae:	89ab      	ldrh	r3, [r5, #12]
 800b1b0:	059a      	lsls	r2, r3, #22
 800b1b2:	d402      	bmi.n	800b1ba <_vfiprintf_r+0x2a>
 800b1b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b1b6:	f7fd fbda 	bl	800896e <__retarget_lock_acquire_recursive>
 800b1ba:	89ab      	ldrh	r3, [r5, #12]
 800b1bc:	071b      	lsls	r3, r3, #28
 800b1be:	d501      	bpl.n	800b1c4 <_vfiprintf_r+0x34>
 800b1c0:	692b      	ldr	r3, [r5, #16]
 800b1c2:	b99b      	cbnz	r3, 800b1ec <_vfiprintf_r+0x5c>
 800b1c4:	4629      	mov	r1, r5
 800b1c6:	4630      	mov	r0, r6
 800b1c8:	f7fd fafe 	bl	80087c8 <__swsetup_r>
 800b1cc:	b170      	cbz	r0, 800b1ec <_vfiprintf_r+0x5c>
 800b1ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b1d0:	07dc      	lsls	r4, r3, #31
 800b1d2:	d504      	bpl.n	800b1de <_vfiprintf_r+0x4e>
 800b1d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1d8:	b01d      	add	sp, #116	@ 0x74
 800b1da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1de:	89ab      	ldrh	r3, [r5, #12]
 800b1e0:	0598      	lsls	r0, r3, #22
 800b1e2:	d4f7      	bmi.n	800b1d4 <_vfiprintf_r+0x44>
 800b1e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b1e6:	f7fd fbc3 	bl	8008970 <__retarget_lock_release_recursive>
 800b1ea:	e7f3      	b.n	800b1d4 <_vfiprintf_r+0x44>
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1f0:	2320      	movs	r3, #32
 800b1f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b1f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1fa:	2330      	movs	r3, #48	@ 0x30
 800b1fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b3ac <_vfiprintf_r+0x21c>
 800b200:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b204:	f04f 0901 	mov.w	r9, #1
 800b208:	4623      	mov	r3, r4
 800b20a:	469a      	mov	sl, r3
 800b20c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b210:	b10a      	cbz	r2, 800b216 <_vfiprintf_r+0x86>
 800b212:	2a25      	cmp	r2, #37	@ 0x25
 800b214:	d1f9      	bne.n	800b20a <_vfiprintf_r+0x7a>
 800b216:	ebba 0b04 	subs.w	fp, sl, r4
 800b21a:	d00b      	beq.n	800b234 <_vfiprintf_r+0xa4>
 800b21c:	465b      	mov	r3, fp
 800b21e:	4622      	mov	r2, r4
 800b220:	4629      	mov	r1, r5
 800b222:	4630      	mov	r0, r6
 800b224:	f7ff ffa1 	bl	800b16a <__sfputs_r>
 800b228:	3001      	adds	r0, #1
 800b22a:	f000 80a7 	beq.w	800b37c <_vfiprintf_r+0x1ec>
 800b22e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b230:	445a      	add	r2, fp
 800b232:	9209      	str	r2, [sp, #36]	@ 0x24
 800b234:	f89a 3000 	ldrb.w	r3, [sl]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	f000 809f 	beq.w	800b37c <_vfiprintf_r+0x1ec>
 800b23e:	2300      	movs	r3, #0
 800b240:	f04f 32ff 	mov.w	r2, #4294967295
 800b244:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b248:	f10a 0a01 	add.w	sl, sl, #1
 800b24c:	9304      	str	r3, [sp, #16]
 800b24e:	9307      	str	r3, [sp, #28]
 800b250:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b254:	931a      	str	r3, [sp, #104]	@ 0x68
 800b256:	4654      	mov	r4, sl
 800b258:	2205      	movs	r2, #5
 800b25a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b25e:	4853      	ldr	r0, [pc, #332]	@ (800b3ac <_vfiprintf_r+0x21c>)
 800b260:	f7f4 ffd6 	bl	8000210 <memchr>
 800b264:	9a04      	ldr	r2, [sp, #16]
 800b266:	b9d8      	cbnz	r0, 800b2a0 <_vfiprintf_r+0x110>
 800b268:	06d1      	lsls	r1, r2, #27
 800b26a:	bf44      	itt	mi
 800b26c:	2320      	movmi	r3, #32
 800b26e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b272:	0713      	lsls	r3, r2, #28
 800b274:	bf44      	itt	mi
 800b276:	232b      	movmi	r3, #43	@ 0x2b
 800b278:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b27c:	f89a 3000 	ldrb.w	r3, [sl]
 800b280:	2b2a      	cmp	r3, #42	@ 0x2a
 800b282:	d015      	beq.n	800b2b0 <_vfiprintf_r+0x120>
 800b284:	9a07      	ldr	r2, [sp, #28]
 800b286:	4654      	mov	r4, sl
 800b288:	2000      	movs	r0, #0
 800b28a:	f04f 0c0a 	mov.w	ip, #10
 800b28e:	4621      	mov	r1, r4
 800b290:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b294:	3b30      	subs	r3, #48	@ 0x30
 800b296:	2b09      	cmp	r3, #9
 800b298:	d94b      	bls.n	800b332 <_vfiprintf_r+0x1a2>
 800b29a:	b1b0      	cbz	r0, 800b2ca <_vfiprintf_r+0x13a>
 800b29c:	9207      	str	r2, [sp, #28]
 800b29e:	e014      	b.n	800b2ca <_vfiprintf_r+0x13a>
 800b2a0:	eba0 0308 	sub.w	r3, r0, r8
 800b2a4:	fa09 f303 	lsl.w	r3, r9, r3
 800b2a8:	4313      	orrs	r3, r2
 800b2aa:	9304      	str	r3, [sp, #16]
 800b2ac:	46a2      	mov	sl, r4
 800b2ae:	e7d2      	b.n	800b256 <_vfiprintf_r+0xc6>
 800b2b0:	9b03      	ldr	r3, [sp, #12]
 800b2b2:	1d19      	adds	r1, r3, #4
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	9103      	str	r1, [sp, #12]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	bfbb      	ittet	lt
 800b2bc:	425b      	neglt	r3, r3
 800b2be:	f042 0202 	orrlt.w	r2, r2, #2
 800b2c2:	9307      	strge	r3, [sp, #28]
 800b2c4:	9307      	strlt	r3, [sp, #28]
 800b2c6:	bfb8      	it	lt
 800b2c8:	9204      	strlt	r2, [sp, #16]
 800b2ca:	7823      	ldrb	r3, [r4, #0]
 800b2cc:	2b2e      	cmp	r3, #46	@ 0x2e
 800b2ce:	d10a      	bne.n	800b2e6 <_vfiprintf_r+0x156>
 800b2d0:	7863      	ldrb	r3, [r4, #1]
 800b2d2:	2b2a      	cmp	r3, #42	@ 0x2a
 800b2d4:	d132      	bne.n	800b33c <_vfiprintf_r+0x1ac>
 800b2d6:	9b03      	ldr	r3, [sp, #12]
 800b2d8:	1d1a      	adds	r2, r3, #4
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	9203      	str	r2, [sp, #12]
 800b2de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b2e2:	3402      	adds	r4, #2
 800b2e4:	9305      	str	r3, [sp, #20]
 800b2e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b3bc <_vfiprintf_r+0x22c>
 800b2ea:	7821      	ldrb	r1, [r4, #0]
 800b2ec:	2203      	movs	r2, #3
 800b2ee:	4650      	mov	r0, sl
 800b2f0:	f7f4 ff8e 	bl	8000210 <memchr>
 800b2f4:	b138      	cbz	r0, 800b306 <_vfiprintf_r+0x176>
 800b2f6:	9b04      	ldr	r3, [sp, #16]
 800b2f8:	eba0 000a 	sub.w	r0, r0, sl
 800b2fc:	2240      	movs	r2, #64	@ 0x40
 800b2fe:	4082      	lsls	r2, r0
 800b300:	4313      	orrs	r3, r2
 800b302:	3401      	adds	r4, #1
 800b304:	9304      	str	r3, [sp, #16]
 800b306:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b30a:	4829      	ldr	r0, [pc, #164]	@ (800b3b0 <_vfiprintf_r+0x220>)
 800b30c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b310:	2206      	movs	r2, #6
 800b312:	f7f4 ff7d 	bl	8000210 <memchr>
 800b316:	2800      	cmp	r0, #0
 800b318:	d03f      	beq.n	800b39a <_vfiprintf_r+0x20a>
 800b31a:	4b26      	ldr	r3, [pc, #152]	@ (800b3b4 <_vfiprintf_r+0x224>)
 800b31c:	bb1b      	cbnz	r3, 800b366 <_vfiprintf_r+0x1d6>
 800b31e:	9b03      	ldr	r3, [sp, #12]
 800b320:	3307      	adds	r3, #7
 800b322:	f023 0307 	bic.w	r3, r3, #7
 800b326:	3308      	adds	r3, #8
 800b328:	9303      	str	r3, [sp, #12]
 800b32a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b32c:	443b      	add	r3, r7
 800b32e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b330:	e76a      	b.n	800b208 <_vfiprintf_r+0x78>
 800b332:	fb0c 3202 	mla	r2, ip, r2, r3
 800b336:	460c      	mov	r4, r1
 800b338:	2001      	movs	r0, #1
 800b33a:	e7a8      	b.n	800b28e <_vfiprintf_r+0xfe>
 800b33c:	2300      	movs	r3, #0
 800b33e:	3401      	adds	r4, #1
 800b340:	9305      	str	r3, [sp, #20]
 800b342:	4619      	mov	r1, r3
 800b344:	f04f 0c0a 	mov.w	ip, #10
 800b348:	4620      	mov	r0, r4
 800b34a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b34e:	3a30      	subs	r2, #48	@ 0x30
 800b350:	2a09      	cmp	r2, #9
 800b352:	d903      	bls.n	800b35c <_vfiprintf_r+0x1cc>
 800b354:	2b00      	cmp	r3, #0
 800b356:	d0c6      	beq.n	800b2e6 <_vfiprintf_r+0x156>
 800b358:	9105      	str	r1, [sp, #20]
 800b35a:	e7c4      	b.n	800b2e6 <_vfiprintf_r+0x156>
 800b35c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b360:	4604      	mov	r4, r0
 800b362:	2301      	movs	r3, #1
 800b364:	e7f0      	b.n	800b348 <_vfiprintf_r+0x1b8>
 800b366:	ab03      	add	r3, sp, #12
 800b368:	9300      	str	r3, [sp, #0]
 800b36a:	462a      	mov	r2, r5
 800b36c:	4b12      	ldr	r3, [pc, #72]	@ (800b3b8 <_vfiprintf_r+0x228>)
 800b36e:	a904      	add	r1, sp, #16
 800b370:	4630      	mov	r0, r6
 800b372:	f7fc fa8f 	bl	8007894 <_printf_float>
 800b376:	4607      	mov	r7, r0
 800b378:	1c78      	adds	r0, r7, #1
 800b37a:	d1d6      	bne.n	800b32a <_vfiprintf_r+0x19a>
 800b37c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b37e:	07d9      	lsls	r1, r3, #31
 800b380:	d405      	bmi.n	800b38e <_vfiprintf_r+0x1fe>
 800b382:	89ab      	ldrh	r3, [r5, #12]
 800b384:	059a      	lsls	r2, r3, #22
 800b386:	d402      	bmi.n	800b38e <_vfiprintf_r+0x1fe>
 800b388:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b38a:	f7fd faf1 	bl	8008970 <__retarget_lock_release_recursive>
 800b38e:	89ab      	ldrh	r3, [r5, #12]
 800b390:	065b      	lsls	r3, r3, #25
 800b392:	f53f af1f 	bmi.w	800b1d4 <_vfiprintf_r+0x44>
 800b396:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b398:	e71e      	b.n	800b1d8 <_vfiprintf_r+0x48>
 800b39a:	ab03      	add	r3, sp, #12
 800b39c:	9300      	str	r3, [sp, #0]
 800b39e:	462a      	mov	r2, r5
 800b3a0:	4b05      	ldr	r3, [pc, #20]	@ (800b3b8 <_vfiprintf_r+0x228>)
 800b3a2:	a904      	add	r1, sp, #16
 800b3a4:	4630      	mov	r0, r6
 800b3a6:	f7fc fd0d 	bl	8007dc4 <_printf_i>
 800b3aa:	e7e4      	b.n	800b376 <_vfiprintf_r+0x1e6>
 800b3ac:	0800c2f1 	.word	0x0800c2f1
 800b3b0:	0800c2fb 	.word	0x0800c2fb
 800b3b4:	08007895 	.word	0x08007895
 800b3b8:	0800b16b 	.word	0x0800b16b
 800b3bc:	0800c2f7 	.word	0x0800c2f7

0800b3c0 <__sflush_r>:
 800b3c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b3c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3c8:	0716      	lsls	r6, r2, #28
 800b3ca:	4605      	mov	r5, r0
 800b3cc:	460c      	mov	r4, r1
 800b3ce:	d454      	bmi.n	800b47a <__sflush_r+0xba>
 800b3d0:	684b      	ldr	r3, [r1, #4]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	dc02      	bgt.n	800b3dc <__sflush_r+0x1c>
 800b3d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	dd48      	ble.n	800b46e <__sflush_r+0xae>
 800b3dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b3de:	2e00      	cmp	r6, #0
 800b3e0:	d045      	beq.n	800b46e <__sflush_r+0xae>
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b3e8:	682f      	ldr	r7, [r5, #0]
 800b3ea:	6a21      	ldr	r1, [r4, #32]
 800b3ec:	602b      	str	r3, [r5, #0]
 800b3ee:	d030      	beq.n	800b452 <__sflush_r+0x92>
 800b3f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b3f2:	89a3      	ldrh	r3, [r4, #12]
 800b3f4:	0759      	lsls	r1, r3, #29
 800b3f6:	d505      	bpl.n	800b404 <__sflush_r+0x44>
 800b3f8:	6863      	ldr	r3, [r4, #4]
 800b3fa:	1ad2      	subs	r2, r2, r3
 800b3fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b3fe:	b10b      	cbz	r3, 800b404 <__sflush_r+0x44>
 800b400:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b402:	1ad2      	subs	r2, r2, r3
 800b404:	2300      	movs	r3, #0
 800b406:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b408:	6a21      	ldr	r1, [r4, #32]
 800b40a:	4628      	mov	r0, r5
 800b40c:	47b0      	blx	r6
 800b40e:	1c43      	adds	r3, r0, #1
 800b410:	89a3      	ldrh	r3, [r4, #12]
 800b412:	d106      	bne.n	800b422 <__sflush_r+0x62>
 800b414:	6829      	ldr	r1, [r5, #0]
 800b416:	291d      	cmp	r1, #29
 800b418:	d82b      	bhi.n	800b472 <__sflush_r+0xb2>
 800b41a:	4a2a      	ldr	r2, [pc, #168]	@ (800b4c4 <__sflush_r+0x104>)
 800b41c:	40ca      	lsrs	r2, r1
 800b41e:	07d6      	lsls	r6, r2, #31
 800b420:	d527      	bpl.n	800b472 <__sflush_r+0xb2>
 800b422:	2200      	movs	r2, #0
 800b424:	6062      	str	r2, [r4, #4]
 800b426:	04d9      	lsls	r1, r3, #19
 800b428:	6922      	ldr	r2, [r4, #16]
 800b42a:	6022      	str	r2, [r4, #0]
 800b42c:	d504      	bpl.n	800b438 <__sflush_r+0x78>
 800b42e:	1c42      	adds	r2, r0, #1
 800b430:	d101      	bne.n	800b436 <__sflush_r+0x76>
 800b432:	682b      	ldr	r3, [r5, #0]
 800b434:	b903      	cbnz	r3, 800b438 <__sflush_r+0x78>
 800b436:	6560      	str	r0, [r4, #84]	@ 0x54
 800b438:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b43a:	602f      	str	r7, [r5, #0]
 800b43c:	b1b9      	cbz	r1, 800b46e <__sflush_r+0xae>
 800b43e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b442:	4299      	cmp	r1, r3
 800b444:	d002      	beq.n	800b44c <__sflush_r+0x8c>
 800b446:	4628      	mov	r0, r5
 800b448:	f7fe f8f2 	bl	8009630 <_free_r>
 800b44c:	2300      	movs	r3, #0
 800b44e:	6363      	str	r3, [r4, #52]	@ 0x34
 800b450:	e00d      	b.n	800b46e <__sflush_r+0xae>
 800b452:	2301      	movs	r3, #1
 800b454:	4628      	mov	r0, r5
 800b456:	47b0      	blx	r6
 800b458:	4602      	mov	r2, r0
 800b45a:	1c50      	adds	r0, r2, #1
 800b45c:	d1c9      	bne.n	800b3f2 <__sflush_r+0x32>
 800b45e:	682b      	ldr	r3, [r5, #0]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d0c6      	beq.n	800b3f2 <__sflush_r+0x32>
 800b464:	2b1d      	cmp	r3, #29
 800b466:	d001      	beq.n	800b46c <__sflush_r+0xac>
 800b468:	2b16      	cmp	r3, #22
 800b46a:	d11e      	bne.n	800b4aa <__sflush_r+0xea>
 800b46c:	602f      	str	r7, [r5, #0]
 800b46e:	2000      	movs	r0, #0
 800b470:	e022      	b.n	800b4b8 <__sflush_r+0xf8>
 800b472:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b476:	b21b      	sxth	r3, r3
 800b478:	e01b      	b.n	800b4b2 <__sflush_r+0xf2>
 800b47a:	690f      	ldr	r7, [r1, #16]
 800b47c:	2f00      	cmp	r7, #0
 800b47e:	d0f6      	beq.n	800b46e <__sflush_r+0xae>
 800b480:	0793      	lsls	r3, r2, #30
 800b482:	680e      	ldr	r6, [r1, #0]
 800b484:	bf08      	it	eq
 800b486:	694b      	ldreq	r3, [r1, #20]
 800b488:	600f      	str	r7, [r1, #0]
 800b48a:	bf18      	it	ne
 800b48c:	2300      	movne	r3, #0
 800b48e:	eba6 0807 	sub.w	r8, r6, r7
 800b492:	608b      	str	r3, [r1, #8]
 800b494:	f1b8 0f00 	cmp.w	r8, #0
 800b498:	dde9      	ble.n	800b46e <__sflush_r+0xae>
 800b49a:	6a21      	ldr	r1, [r4, #32]
 800b49c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b49e:	4643      	mov	r3, r8
 800b4a0:	463a      	mov	r2, r7
 800b4a2:	4628      	mov	r0, r5
 800b4a4:	47b0      	blx	r6
 800b4a6:	2800      	cmp	r0, #0
 800b4a8:	dc08      	bgt.n	800b4bc <__sflush_r+0xfc>
 800b4aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b4b2:	81a3      	strh	r3, [r4, #12]
 800b4b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b4b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4bc:	4407      	add	r7, r0
 800b4be:	eba8 0800 	sub.w	r8, r8, r0
 800b4c2:	e7e7      	b.n	800b494 <__sflush_r+0xd4>
 800b4c4:	20400001 	.word	0x20400001

0800b4c8 <_fflush_r>:
 800b4c8:	b538      	push	{r3, r4, r5, lr}
 800b4ca:	690b      	ldr	r3, [r1, #16]
 800b4cc:	4605      	mov	r5, r0
 800b4ce:	460c      	mov	r4, r1
 800b4d0:	b913      	cbnz	r3, 800b4d8 <_fflush_r+0x10>
 800b4d2:	2500      	movs	r5, #0
 800b4d4:	4628      	mov	r0, r5
 800b4d6:	bd38      	pop	{r3, r4, r5, pc}
 800b4d8:	b118      	cbz	r0, 800b4e2 <_fflush_r+0x1a>
 800b4da:	6a03      	ldr	r3, [r0, #32]
 800b4dc:	b90b      	cbnz	r3, 800b4e2 <_fflush_r+0x1a>
 800b4de:	f7fd f829 	bl	8008534 <__sinit>
 800b4e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d0f3      	beq.n	800b4d2 <_fflush_r+0xa>
 800b4ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b4ec:	07d0      	lsls	r0, r2, #31
 800b4ee:	d404      	bmi.n	800b4fa <_fflush_r+0x32>
 800b4f0:	0599      	lsls	r1, r3, #22
 800b4f2:	d402      	bmi.n	800b4fa <_fflush_r+0x32>
 800b4f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b4f6:	f7fd fa3a 	bl	800896e <__retarget_lock_acquire_recursive>
 800b4fa:	4628      	mov	r0, r5
 800b4fc:	4621      	mov	r1, r4
 800b4fe:	f7ff ff5f 	bl	800b3c0 <__sflush_r>
 800b502:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b504:	07da      	lsls	r2, r3, #31
 800b506:	4605      	mov	r5, r0
 800b508:	d4e4      	bmi.n	800b4d4 <_fflush_r+0xc>
 800b50a:	89a3      	ldrh	r3, [r4, #12]
 800b50c:	059b      	lsls	r3, r3, #22
 800b50e:	d4e1      	bmi.n	800b4d4 <_fflush_r+0xc>
 800b510:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b512:	f7fd fa2d 	bl	8008970 <__retarget_lock_release_recursive>
 800b516:	e7dd      	b.n	800b4d4 <_fflush_r+0xc>

0800b518 <__swhatbuf_r>:
 800b518:	b570      	push	{r4, r5, r6, lr}
 800b51a:	460c      	mov	r4, r1
 800b51c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b520:	2900      	cmp	r1, #0
 800b522:	b096      	sub	sp, #88	@ 0x58
 800b524:	4615      	mov	r5, r2
 800b526:	461e      	mov	r6, r3
 800b528:	da0d      	bge.n	800b546 <__swhatbuf_r+0x2e>
 800b52a:	89a3      	ldrh	r3, [r4, #12]
 800b52c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b530:	f04f 0100 	mov.w	r1, #0
 800b534:	bf14      	ite	ne
 800b536:	2340      	movne	r3, #64	@ 0x40
 800b538:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b53c:	2000      	movs	r0, #0
 800b53e:	6031      	str	r1, [r6, #0]
 800b540:	602b      	str	r3, [r5, #0]
 800b542:	b016      	add	sp, #88	@ 0x58
 800b544:	bd70      	pop	{r4, r5, r6, pc}
 800b546:	466a      	mov	r2, sp
 800b548:	f000 f874 	bl	800b634 <_fstat_r>
 800b54c:	2800      	cmp	r0, #0
 800b54e:	dbec      	blt.n	800b52a <__swhatbuf_r+0x12>
 800b550:	9901      	ldr	r1, [sp, #4]
 800b552:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b556:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b55a:	4259      	negs	r1, r3
 800b55c:	4159      	adcs	r1, r3
 800b55e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b562:	e7eb      	b.n	800b53c <__swhatbuf_r+0x24>

0800b564 <__smakebuf_r>:
 800b564:	898b      	ldrh	r3, [r1, #12]
 800b566:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b568:	079d      	lsls	r5, r3, #30
 800b56a:	4606      	mov	r6, r0
 800b56c:	460c      	mov	r4, r1
 800b56e:	d507      	bpl.n	800b580 <__smakebuf_r+0x1c>
 800b570:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b574:	6023      	str	r3, [r4, #0]
 800b576:	6123      	str	r3, [r4, #16]
 800b578:	2301      	movs	r3, #1
 800b57a:	6163      	str	r3, [r4, #20]
 800b57c:	b003      	add	sp, #12
 800b57e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b580:	ab01      	add	r3, sp, #4
 800b582:	466a      	mov	r2, sp
 800b584:	f7ff ffc8 	bl	800b518 <__swhatbuf_r>
 800b588:	9f00      	ldr	r7, [sp, #0]
 800b58a:	4605      	mov	r5, r0
 800b58c:	4639      	mov	r1, r7
 800b58e:	4630      	mov	r0, r6
 800b590:	f7fe f8c2 	bl	8009718 <_malloc_r>
 800b594:	b948      	cbnz	r0, 800b5aa <__smakebuf_r+0x46>
 800b596:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b59a:	059a      	lsls	r2, r3, #22
 800b59c:	d4ee      	bmi.n	800b57c <__smakebuf_r+0x18>
 800b59e:	f023 0303 	bic.w	r3, r3, #3
 800b5a2:	f043 0302 	orr.w	r3, r3, #2
 800b5a6:	81a3      	strh	r3, [r4, #12]
 800b5a8:	e7e2      	b.n	800b570 <__smakebuf_r+0xc>
 800b5aa:	89a3      	ldrh	r3, [r4, #12]
 800b5ac:	6020      	str	r0, [r4, #0]
 800b5ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b5b2:	81a3      	strh	r3, [r4, #12]
 800b5b4:	9b01      	ldr	r3, [sp, #4]
 800b5b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b5ba:	b15b      	cbz	r3, 800b5d4 <__smakebuf_r+0x70>
 800b5bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5c0:	4630      	mov	r0, r6
 800b5c2:	f000 f849 	bl	800b658 <_isatty_r>
 800b5c6:	b128      	cbz	r0, 800b5d4 <__smakebuf_r+0x70>
 800b5c8:	89a3      	ldrh	r3, [r4, #12]
 800b5ca:	f023 0303 	bic.w	r3, r3, #3
 800b5ce:	f043 0301 	orr.w	r3, r3, #1
 800b5d2:	81a3      	strh	r3, [r4, #12]
 800b5d4:	89a3      	ldrh	r3, [r4, #12]
 800b5d6:	431d      	orrs	r5, r3
 800b5d8:	81a5      	strh	r5, [r4, #12]
 800b5da:	e7cf      	b.n	800b57c <__smakebuf_r+0x18>

0800b5dc <memmove>:
 800b5dc:	4288      	cmp	r0, r1
 800b5de:	b510      	push	{r4, lr}
 800b5e0:	eb01 0402 	add.w	r4, r1, r2
 800b5e4:	d902      	bls.n	800b5ec <memmove+0x10>
 800b5e6:	4284      	cmp	r4, r0
 800b5e8:	4623      	mov	r3, r4
 800b5ea:	d807      	bhi.n	800b5fc <memmove+0x20>
 800b5ec:	1e43      	subs	r3, r0, #1
 800b5ee:	42a1      	cmp	r1, r4
 800b5f0:	d008      	beq.n	800b604 <memmove+0x28>
 800b5f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b5f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b5fa:	e7f8      	b.n	800b5ee <memmove+0x12>
 800b5fc:	4402      	add	r2, r0
 800b5fe:	4601      	mov	r1, r0
 800b600:	428a      	cmp	r2, r1
 800b602:	d100      	bne.n	800b606 <memmove+0x2a>
 800b604:	bd10      	pop	{r4, pc}
 800b606:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b60a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b60e:	e7f7      	b.n	800b600 <memmove+0x24>

0800b610 <strncmp>:
 800b610:	b510      	push	{r4, lr}
 800b612:	b16a      	cbz	r2, 800b630 <strncmp+0x20>
 800b614:	3901      	subs	r1, #1
 800b616:	1884      	adds	r4, r0, r2
 800b618:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b61c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b620:	429a      	cmp	r2, r3
 800b622:	d103      	bne.n	800b62c <strncmp+0x1c>
 800b624:	42a0      	cmp	r0, r4
 800b626:	d001      	beq.n	800b62c <strncmp+0x1c>
 800b628:	2a00      	cmp	r2, #0
 800b62a:	d1f5      	bne.n	800b618 <strncmp+0x8>
 800b62c:	1ad0      	subs	r0, r2, r3
 800b62e:	bd10      	pop	{r4, pc}
 800b630:	4610      	mov	r0, r2
 800b632:	e7fc      	b.n	800b62e <strncmp+0x1e>

0800b634 <_fstat_r>:
 800b634:	b538      	push	{r3, r4, r5, lr}
 800b636:	4d07      	ldr	r5, [pc, #28]	@ (800b654 <_fstat_r+0x20>)
 800b638:	2300      	movs	r3, #0
 800b63a:	4604      	mov	r4, r0
 800b63c:	4608      	mov	r0, r1
 800b63e:	4611      	mov	r1, r2
 800b640:	602b      	str	r3, [r5, #0]
 800b642:	f7f7 f918 	bl	8002876 <_fstat>
 800b646:	1c43      	adds	r3, r0, #1
 800b648:	d102      	bne.n	800b650 <_fstat_r+0x1c>
 800b64a:	682b      	ldr	r3, [r5, #0]
 800b64c:	b103      	cbz	r3, 800b650 <_fstat_r+0x1c>
 800b64e:	6023      	str	r3, [r4, #0]
 800b650:	bd38      	pop	{r3, r4, r5, pc}
 800b652:	bf00      	nop
 800b654:	20000620 	.word	0x20000620

0800b658 <_isatty_r>:
 800b658:	b538      	push	{r3, r4, r5, lr}
 800b65a:	4d06      	ldr	r5, [pc, #24]	@ (800b674 <_isatty_r+0x1c>)
 800b65c:	2300      	movs	r3, #0
 800b65e:	4604      	mov	r4, r0
 800b660:	4608      	mov	r0, r1
 800b662:	602b      	str	r3, [r5, #0]
 800b664:	f7f7 f917 	bl	8002896 <_isatty>
 800b668:	1c43      	adds	r3, r0, #1
 800b66a:	d102      	bne.n	800b672 <_isatty_r+0x1a>
 800b66c:	682b      	ldr	r3, [r5, #0]
 800b66e:	b103      	cbz	r3, 800b672 <_isatty_r+0x1a>
 800b670:	6023      	str	r3, [r4, #0]
 800b672:	bd38      	pop	{r3, r4, r5, pc}
 800b674:	20000620 	.word	0x20000620

0800b678 <_sbrk_r>:
 800b678:	b538      	push	{r3, r4, r5, lr}
 800b67a:	4d06      	ldr	r5, [pc, #24]	@ (800b694 <_sbrk_r+0x1c>)
 800b67c:	2300      	movs	r3, #0
 800b67e:	4604      	mov	r4, r0
 800b680:	4608      	mov	r0, r1
 800b682:	602b      	str	r3, [r5, #0]
 800b684:	f7f7 f920 	bl	80028c8 <_sbrk>
 800b688:	1c43      	adds	r3, r0, #1
 800b68a:	d102      	bne.n	800b692 <_sbrk_r+0x1a>
 800b68c:	682b      	ldr	r3, [r5, #0]
 800b68e:	b103      	cbz	r3, 800b692 <_sbrk_r+0x1a>
 800b690:	6023      	str	r3, [r4, #0]
 800b692:	bd38      	pop	{r3, r4, r5, pc}
 800b694:	20000620 	.word	0x20000620

0800b698 <memcpy>:
 800b698:	440a      	add	r2, r1
 800b69a:	4291      	cmp	r1, r2
 800b69c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b6a0:	d100      	bne.n	800b6a4 <memcpy+0xc>
 800b6a2:	4770      	bx	lr
 800b6a4:	b510      	push	{r4, lr}
 800b6a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b6ae:	4291      	cmp	r1, r2
 800b6b0:	d1f9      	bne.n	800b6a6 <memcpy+0xe>
 800b6b2:	bd10      	pop	{r4, pc}
 800b6b4:	0000      	movs	r0, r0
	...

0800b6b8 <nan>:
 800b6b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b6c0 <nan+0x8>
 800b6bc:	4770      	bx	lr
 800b6be:	bf00      	nop
 800b6c0:	00000000 	.word	0x00000000
 800b6c4:	7ff80000 	.word	0x7ff80000

0800b6c8 <__assert_func>:
 800b6c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b6ca:	4614      	mov	r4, r2
 800b6cc:	461a      	mov	r2, r3
 800b6ce:	4b09      	ldr	r3, [pc, #36]	@ (800b6f4 <__assert_func+0x2c>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	4605      	mov	r5, r0
 800b6d4:	68d8      	ldr	r0, [r3, #12]
 800b6d6:	b14c      	cbz	r4, 800b6ec <__assert_func+0x24>
 800b6d8:	4b07      	ldr	r3, [pc, #28]	@ (800b6f8 <__assert_func+0x30>)
 800b6da:	9100      	str	r1, [sp, #0]
 800b6dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b6e0:	4906      	ldr	r1, [pc, #24]	@ (800b6fc <__assert_func+0x34>)
 800b6e2:	462b      	mov	r3, r5
 800b6e4:	f000 fba8 	bl	800be38 <fiprintf>
 800b6e8:	f000 fbb8 	bl	800be5c <abort>
 800b6ec:	4b04      	ldr	r3, [pc, #16]	@ (800b700 <__assert_func+0x38>)
 800b6ee:	461c      	mov	r4, r3
 800b6f0:	e7f3      	b.n	800b6da <__assert_func+0x12>
 800b6f2:	bf00      	nop
 800b6f4:	20000030 	.word	0x20000030
 800b6f8:	0800c30a 	.word	0x0800c30a
 800b6fc:	0800c317 	.word	0x0800c317
 800b700:	0800c345 	.word	0x0800c345

0800b704 <_calloc_r>:
 800b704:	b570      	push	{r4, r5, r6, lr}
 800b706:	fba1 5402 	umull	r5, r4, r1, r2
 800b70a:	b934      	cbnz	r4, 800b71a <_calloc_r+0x16>
 800b70c:	4629      	mov	r1, r5
 800b70e:	f7fe f803 	bl	8009718 <_malloc_r>
 800b712:	4606      	mov	r6, r0
 800b714:	b928      	cbnz	r0, 800b722 <_calloc_r+0x1e>
 800b716:	4630      	mov	r0, r6
 800b718:	bd70      	pop	{r4, r5, r6, pc}
 800b71a:	220c      	movs	r2, #12
 800b71c:	6002      	str	r2, [r0, #0]
 800b71e:	2600      	movs	r6, #0
 800b720:	e7f9      	b.n	800b716 <_calloc_r+0x12>
 800b722:	462a      	mov	r2, r5
 800b724:	4621      	mov	r1, r4
 800b726:	f7fd f8a5 	bl	8008874 <memset>
 800b72a:	e7f4      	b.n	800b716 <_calloc_r+0x12>

0800b72c <rshift>:
 800b72c:	6903      	ldr	r3, [r0, #16]
 800b72e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b732:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b736:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b73a:	f100 0414 	add.w	r4, r0, #20
 800b73e:	dd45      	ble.n	800b7cc <rshift+0xa0>
 800b740:	f011 011f 	ands.w	r1, r1, #31
 800b744:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b748:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b74c:	d10c      	bne.n	800b768 <rshift+0x3c>
 800b74e:	f100 0710 	add.w	r7, r0, #16
 800b752:	4629      	mov	r1, r5
 800b754:	42b1      	cmp	r1, r6
 800b756:	d334      	bcc.n	800b7c2 <rshift+0x96>
 800b758:	1a9b      	subs	r3, r3, r2
 800b75a:	009b      	lsls	r3, r3, #2
 800b75c:	1eea      	subs	r2, r5, #3
 800b75e:	4296      	cmp	r6, r2
 800b760:	bf38      	it	cc
 800b762:	2300      	movcc	r3, #0
 800b764:	4423      	add	r3, r4
 800b766:	e015      	b.n	800b794 <rshift+0x68>
 800b768:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b76c:	f1c1 0820 	rsb	r8, r1, #32
 800b770:	40cf      	lsrs	r7, r1
 800b772:	f105 0e04 	add.w	lr, r5, #4
 800b776:	46a1      	mov	r9, r4
 800b778:	4576      	cmp	r6, lr
 800b77a:	46f4      	mov	ip, lr
 800b77c:	d815      	bhi.n	800b7aa <rshift+0x7e>
 800b77e:	1a9a      	subs	r2, r3, r2
 800b780:	0092      	lsls	r2, r2, #2
 800b782:	3a04      	subs	r2, #4
 800b784:	3501      	adds	r5, #1
 800b786:	42ae      	cmp	r6, r5
 800b788:	bf38      	it	cc
 800b78a:	2200      	movcc	r2, #0
 800b78c:	18a3      	adds	r3, r4, r2
 800b78e:	50a7      	str	r7, [r4, r2]
 800b790:	b107      	cbz	r7, 800b794 <rshift+0x68>
 800b792:	3304      	adds	r3, #4
 800b794:	1b1a      	subs	r2, r3, r4
 800b796:	42a3      	cmp	r3, r4
 800b798:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b79c:	bf08      	it	eq
 800b79e:	2300      	moveq	r3, #0
 800b7a0:	6102      	str	r2, [r0, #16]
 800b7a2:	bf08      	it	eq
 800b7a4:	6143      	streq	r3, [r0, #20]
 800b7a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b7aa:	f8dc c000 	ldr.w	ip, [ip]
 800b7ae:	fa0c fc08 	lsl.w	ip, ip, r8
 800b7b2:	ea4c 0707 	orr.w	r7, ip, r7
 800b7b6:	f849 7b04 	str.w	r7, [r9], #4
 800b7ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b7be:	40cf      	lsrs	r7, r1
 800b7c0:	e7da      	b.n	800b778 <rshift+0x4c>
 800b7c2:	f851 cb04 	ldr.w	ip, [r1], #4
 800b7c6:	f847 cf04 	str.w	ip, [r7, #4]!
 800b7ca:	e7c3      	b.n	800b754 <rshift+0x28>
 800b7cc:	4623      	mov	r3, r4
 800b7ce:	e7e1      	b.n	800b794 <rshift+0x68>

0800b7d0 <__hexdig_fun>:
 800b7d0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b7d4:	2b09      	cmp	r3, #9
 800b7d6:	d802      	bhi.n	800b7de <__hexdig_fun+0xe>
 800b7d8:	3820      	subs	r0, #32
 800b7da:	b2c0      	uxtb	r0, r0
 800b7dc:	4770      	bx	lr
 800b7de:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b7e2:	2b05      	cmp	r3, #5
 800b7e4:	d801      	bhi.n	800b7ea <__hexdig_fun+0x1a>
 800b7e6:	3847      	subs	r0, #71	@ 0x47
 800b7e8:	e7f7      	b.n	800b7da <__hexdig_fun+0xa>
 800b7ea:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b7ee:	2b05      	cmp	r3, #5
 800b7f0:	d801      	bhi.n	800b7f6 <__hexdig_fun+0x26>
 800b7f2:	3827      	subs	r0, #39	@ 0x27
 800b7f4:	e7f1      	b.n	800b7da <__hexdig_fun+0xa>
 800b7f6:	2000      	movs	r0, #0
 800b7f8:	4770      	bx	lr
	...

0800b7fc <__gethex>:
 800b7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b800:	b085      	sub	sp, #20
 800b802:	468a      	mov	sl, r1
 800b804:	9302      	str	r3, [sp, #8]
 800b806:	680b      	ldr	r3, [r1, #0]
 800b808:	9001      	str	r0, [sp, #4]
 800b80a:	4690      	mov	r8, r2
 800b80c:	1c9c      	adds	r4, r3, #2
 800b80e:	46a1      	mov	r9, r4
 800b810:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b814:	2830      	cmp	r0, #48	@ 0x30
 800b816:	d0fa      	beq.n	800b80e <__gethex+0x12>
 800b818:	eba9 0303 	sub.w	r3, r9, r3
 800b81c:	f1a3 0b02 	sub.w	fp, r3, #2
 800b820:	f7ff ffd6 	bl	800b7d0 <__hexdig_fun>
 800b824:	4605      	mov	r5, r0
 800b826:	2800      	cmp	r0, #0
 800b828:	d168      	bne.n	800b8fc <__gethex+0x100>
 800b82a:	49a0      	ldr	r1, [pc, #640]	@ (800baac <__gethex+0x2b0>)
 800b82c:	2201      	movs	r2, #1
 800b82e:	4648      	mov	r0, r9
 800b830:	f7ff feee 	bl	800b610 <strncmp>
 800b834:	4607      	mov	r7, r0
 800b836:	2800      	cmp	r0, #0
 800b838:	d167      	bne.n	800b90a <__gethex+0x10e>
 800b83a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b83e:	4626      	mov	r6, r4
 800b840:	f7ff ffc6 	bl	800b7d0 <__hexdig_fun>
 800b844:	2800      	cmp	r0, #0
 800b846:	d062      	beq.n	800b90e <__gethex+0x112>
 800b848:	4623      	mov	r3, r4
 800b84a:	7818      	ldrb	r0, [r3, #0]
 800b84c:	2830      	cmp	r0, #48	@ 0x30
 800b84e:	4699      	mov	r9, r3
 800b850:	f103 0301 	add.w	r3, r3, #1
 800b854:	d0f9      	beq.n	800b84a <__gethex+0x4e>
 800b856:	f7ff ffbb 	bl	800b7d0 <__hexdig_fun>
 800b85a:	fab0 f580 	clz	r5, r0
 800b85e:	096d      	lsrs	r5, r5, #5
 800b860:	f04f 0b01 	mov.w	fp, #1
 800b864:	464a      	mov	r2, r9
 800b866:	4616      	mov	r6, r2
 800b868:	3201      	adds	r2, #1
 800b86a:	7830      	ldrb	r0, [r6, #0]
 800b86c:	f7ff ffb0 	bl	800b7d0 <__hexdig_fun>
 800b870:	2800      	cmp	r0, #0
 800b872:	d1f8      	bne.n	800b866 <__gethex+0x6a>
 800b874:	498d      	ldr	r1, [pc, #564]	@ (800baac <__gethex+0x2b0>)
 800b876:	2201      	movs	r2, #1
 800b878:	4630      	mov	r0, r6
 800b87a:	f7ff fec9 	bl	800b610 <strncmp>
 800b87e:	2800      	cmp	r0, #0
 800b880:	d13f      	bne.n	800b902 <__gethex+0x106>
 800b882:	b944      	cbnz	r4, 800b896 <__gethex+0x9a>
 800b884:	1c74      	adds	r4, r6, #1
 800b886:	4622      	mov	r2, r4
 800b888:	4616      	mov	r6, r2
 800b88a:	3201      	adds	r2, #1
 800b88c:	7830      	ldrb	r0, [r6, #0]
 800b88e:	f7ff ff9f 	bl	800b7d0 <__hexdig_fun>
 800b892:	2800      	cmp	r0, #0
 800b894:	d1f8      	bne.n	800b888 <__gethex+0x8c>
 800b896:	1ba4      	subs	r4, r4, r6
 800b898:	00a7      	lsls	r7, r4, #2
 800b89a:	7833      	ldrb	r3, [r6, #0]
 800b89c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b8a0:	2b50      	cmp	r3, #80	@ 0x50
 800b8a2:	d13e      	bne.n	800b922 <__gethex+0x126>
 800b8a4:	7873      	ldrb	r3, [r6, #1]
 800b8a6:	2b2b      	cmp	r3, #43	@ 0x2b
 800b8a8:	d033      	beq.n	800b912 <__gethex+0x116>
 800b8aa:	2b2d      	cmp	r3, #45	@ 0x2d
 800b8ac:	d034      	beq.n	800b918 <__gethex+0x11c>
 800b8ae:	1c71      	adds	r1, r6, #1
 800b8b0:	2400      	movs	r4, #0
 800b8b2:	7808      	ldrb	r0, [r1, #0]
 800b8b4:	f7ff ff8c 	bl	800b7d0 <__hexdig_fun>
 800b8b8:	1e43      	subs	r3, r0, #1
 800b8ba:	b2db      	uxtb	r3, r3
 800b8bc:	2b18      	cmp	r3, #24
 800b8be:	d830      	bhi.n	800b922 <__gethex+0x126>
 800b8c0:	f1a0 0210 	sub.w	r2, r0, #16
 800b8c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b8c8:	f7ff ff82 	bl	800b7d0 <__hexdig_fun>
 800b8cc:	f100 3cff 	add.w	ip, r0, #4294967295
 800b8d0:	fa5f fc8c 	uxtb.w	ip, ip
 800b8d4:	f1bc 0f18 	cmp.w	ip, #24
 800b8d8:	f04f 030a 	mov.w	r3, #10
 800b8dc:	d91e      	bls.n	800b91c <__gethex+0x120>
 800b8de:	b104      	cbz	r4, 800b8e2 <__gethex+0xe6>
 800b8e0:	4252      	negs	r2, r2
 800b8e2:	4417      	add	r7, r2
 800b8e4:	f8ca 1000 	str.w	r1, [sl]
 800b8e8:	b1ed      	cbz	r5, 800b926 <__gethex+0x12a>
 800b8ea:	f1bb 0f00 	cmp.w	fp, #0
 800b8ee:	bf0c      	ite	eq
 800b8f0:	2506      	moveq	r5, #6
 800b8f2:	2500      	movne	r5, #0
 800b8f4:	4628      	mov	r0, r5
 800b8f6:	b005      	add	sp, #20
 800b8f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8fc:	2500      	movs	r5, #0
 800b8fe:	462c      	mov	r4, r5
 800b900:	e7b0      	b.n	800b864 <__gethex+0x68>
 800b902:	2c00      	cmp	r4, #0
 800b904:	d1c7      	bne.n	800b896 <__gethex+0x9a>
 800b906:	4627      	mov	r7, r4
 800b908:	e7c7      	b.n	800b89a <__gethex+0x9e>
 800b90a:	464e      	mov	r6, r9
 800b90c:	462f      	mov	r7, r5
 800b90e:	2501      	movs	r5, #1
 800b910:	e7c3      	b.n	800b89a <__gethex+0x9e>
 800b912:	2400      	movs	r4, #0
 800b914:	1cb1      	adds	r1, r6, #2
 800b916:	e7cc      	b.n	800b8b2 <__gethex+0xb6>
 800b918:	2401      	movs	r4, #1
 800b91a:	e7fb      	b.n	800b914 <__gethex+0x118>
 800b91c:	fb03 0002 	mla	r0, r3, r2, r0
 800b920:	e7ce      	b.n	800b8c0 <__gethex+0xc4>
 800b922:	4631      	mov	r1, r6
 800b924:	e7de      	b.n	800b8e4 <__gethex+0xe8>
 800b926:	eba6 0309 	sub.w	r3, r6, r9
 800b92a:	3b01      	subs	r3, #1
 800b92c:	4629      	mov	r1, r5
 800b92e:	2b07      	cmp	r3, #7
 800b930:	dc0a      	bgt.n	800b948 <__gethex+0x14c>
 800b932:	9801      	ldr	r0, [sp, #4]
 800b934:	f7fd ff7c 	bl	8009830 <_Balloc>
 800b938:	4604      	mov	r4, r0
 800b93a:	b940      	cbnz	r0, 800b94e <__gethex+0x152>
 800b93c:	4b5c      	ldr	r3, [pc, #368]	@ (800bab0 <__gethex+0x2b4>)
 800b93e:	4602      	mov	r2, r0
 800b940:	21e4      	movs	r1, #228	@ 0xe4
 800b942:	485c      	ldr	r0, [pc, #368]	@ (800bab4 <__gethex+0x2b8>)
 800b944:	f7ff fec0 	bl	800b6c8 <__assert_func>
 800b948:	3101      	adds	r1, #1
 800b94a:	105b      	asrs	r3, r3, #1
 800b94c:	e7ef      	b.n	800b92e <__gethex+0x132>
 800b94e:	f100 0a14 	add.w	sl, r0, #20
 800b952:	2300      	movs	r3, #0
 800b954:	4655      	mov	r5, sl
 800b956:	469b      	mov	fp, r3
 800b958:	45b1      	cmp	r9, r6
 800b95a:	d337      	bcc.n	800b9cc <__gethex+0x1d0>
 800b95c:	f845 bb04 	str.w	fp, [r5], #4
 800b960:	eba5 050a 	sub.w	r5, r5, sl
 800b964:	10ad      	asrs	r5, r5, #2
 800b966:	6125      	str	r5, [r4, #16]
 800b968:	4658      	mov	r0, fp
 800b96a:	f7fe f853 	bl	8009a14 <__hi0bits>
 800b96e:	016d      	lsls	r5, r5, #5
 800b970:	f8d8 6000 	ldr.w	r6, [r8]
 800b974:	1a2d      	subs	r5, r5, r0
 800b976:	42b5      	cmp	r5, r6
 800b978:	dd54      	ble.n	800ba24 <__gethex+0x228>
 800b97a:	1bad      	subs	r5, r5, r6
 800b97c:	4629      	mov	r1, r5
 800b97e:	4620      	mov	r0, r4
 800b980:	f7fe fbdf 	bl	800a142 <__any_on>
 800b984:	4681      	mov	r9, r0
 800b986:	b178      	cbz	r0, 800b9a8 <__gethex+0x1ac>
 800b988:	1e6b      	subs	r3, r5, #1
 800b98a:	1159      	asrs	r1, r3, #5
 800b98c:	f003 021f 	and.w	r2, r3, #31
 800b990:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b994:	f04f 0901 	mov.w	r9, #1
 800b998:	fa09 f202 	lsl.w	r2, r9, r2
 800b99c:	420a      	tst	r2, r1
 800b99e:	d003      	beq.n	800b9a8 <__gethex+0x1ac>
 800b9a0:	454b      	cmp	r3, r9
 800b9a2:	dc36      	bgt.n	800ba12 <__gethex+0x216>
 800b9a4:	f04f 0902 	mov.w	r9, #2
 800b9a8:	4629      	mov	r1, r5
 800b9aa:	4620      	mov	r0, r4
 800b9ac:	f7ff febe 	bl	800b72c <rshift>
 800b9b0:	442f      	add	r7, r5
 800b9b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b9b6:	42bb      	cmp	r3, r7
 800b9b8:	da42      	bge.n	800ba40 <__gethex+0x244>
 800b9ba:	9801      	ldr	r0, [sp, #4]
 800b9bc:	4621      	mov	r1, r4
 800b9be:	f7fd ff77 	bl	80098b0 <_Bfree>
 800b9c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	6013      	str	r3, [r2, #0]
 800b9c8:	25a3      	movs	r5, #163	@ 0xa3
 800b9ca:	e793      	b.n	800b8f4 <__gethex+0xf8>
 800b9cc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b9d0:	2a2e      	cmp	r2, #46	@ 0x2e
 800b9d2:	d012      	beq.n	800b9fa <__gethex+0x1fe>
 800b9d4:	2b20      	cmp	r3, #32
 800b9d6:	d104      	bne.n	800b9e2 <__gethex+0x1e6>
 800b9d8:	f845 bb04 	str.w	fp, [r5], #4
 800b9dc:	f04f 0b00 	mov.w	fp, #0
 800b9e0:	465b      	mov	r3, fp
 800b9e2:	7830      	ldrb	r0, [r6, #0]
 800b9e4:	9303      	str	r3, [sp, #12]
 800b9e6:	f7ff fef3 	bl	800b7d0 <__hexdig_fun>
 800b9ea:	9b03      	ldr	r3, [sp, #12]
 800b9ec:	f000 000f 	and.w	r0, r0, #15
 800b9f0:	4098      	lsls	r0, r3
 800b9f2:	ea4b 0b00 	orr.w	fp, fp, r0
 800b9f6:	3304      	adds	r3, #4
 800b9f8:	e7ae      	b.n	800b958 <__gethex+0x15c>
 800b9fa:	45b1      	cmp	r9, r6
 800b9fc:	d8ea      	bhi.n	800b9d4 <__gethex+0x1d8>
 800b9fe:	492b      	ldr	r1, [pc, #172]	@ (800baac <__gethex+0x2b0>)
 800ba00:	9303      	str	r3, [sp, #12]
 800ba02:	2201      	movs	r2, #1
 800ba04:	4630      	mov	r0, r6
 800ba06:	f7ff fe03 	bl	800b610 <strncmp>
 800ba0a:	9b03      	ldr	r3, [sp, #12]
 800ba0c:	2800      	cmp	r0, #0
 800ba0e:	d1e1      	bne.n	800b9d4 <__gethex+0x1d8>
 800ba10:	e7a2      	b.n	800b958 <__gethex+0x15c>
 800ba12:	1ea9      	subs	r1, r5, #2
 800ba14:	4620      	mov	r0, r4
 800ba16:	f7fe fb94 	bl	800a142 <__any_on>
 800ba1a:	2800      	cmp	r0, #0
 800ba1c:	d0c2      	beq.n	800b9a4 <__gethex+0x1a8>
 800ba1e:	f04f 0903 	mov.w	r9, #3
 800ba22:	e7c1      	b.n	800b9a8 <__gethex+0x1ac>
 800ba24:	da09      	bge.n	800ba3a <__gethex+0x23e>
 800ba26:	1b75      	subs	r5, r6, r5
 800ba28:	4621      	mov	r1, r4
 800ba2a:	9801      	ldr	r0, [sp, #4]
 800ba2c:	462a      	mov	r2, r5
 800ba2e:	f7fe f94f 	bl	8009cd0 <__lshift>
 800ba32:	1b7f      	subs	r7, r7, r5
 800ba34:	4604      	mov	r4, r0
 800ba36:	f100 0a14 	add.w	sl, r0, #20
 800ba3a:	f04f 0900 	mov.w	r9, #0
 800ba3e:	e7b8      	b.n	800b9b2 <__gethex+0x1b6>
 800ba40:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ba44:	42bd      	cmp	r5, r7
 800ba46:	dd6f      	ble.n	800bb28 <__gethex+0x32c>
 800ba48:	1bed      	subs	r5, r5, r7
 800ba4a:	42ae      	cmp	r6, r5
 800ba4c:	dc34      	bgt.n	800bab8 <__gethex+0x2bc>
 800ba4e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ba52:	2b02      	cmp	r3, #2
 800ba54:	d022      	beq.n	800ba9c <__gethex+0x2a0>
 800ba56:	2b03      	cmp	r3, #3
 800ba58:	d024      	beq.n	800baa4 <__gethex+0x2a8>
 800ba5a:	2b01      	cmp	r3, #1
 800ba5c:	d115      	bne.n	800ba8a <__gethex+0x28e>
 800ba5e:	42ae      	cmp	r6, r5
 800ba60:	d113      	bne.n	800ba8a <__gethex+0x28e>
 800ba62:	2e01      	cmp	r6, #1
 800ba64:	d10b      	bne.n	800ba7e <__gethex+0x282>
 800ba66:	9a02      	ldr	r2, [sp, #8]
 800ba68:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ba6c:	6013      	str	r3, [r2, #0]
 800ba6e:	2301      	movs	r3, #1
 800ba70:	6123      	str	r3, [r4, #16]
 800ba72:	f8ca 3000 	str.w	r3, [sl]
 800ba76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba78:	2562      	movs	r5, #98	@ 0x62
 800ba7a:	601c      	str	r4, [r3, #0]
 800ba7c:	e73a      	b.n	800b8f4 <__gethex+0xf8>
 800ba7e:	1e71      	subs	r1, r6, #1
 800ba80:	4620      	mov	r0, r4
 800ba82:	f7fe fb5e 	bl	800a142 <__any_on>
 800ba86:	2800      	cmp	r0, #0
 800ba88:	d1ed      	bne.n	800ba66 <__gethex+0x26a>
 800ba8a:	9801      	ldr	r0, [sp, #4]
 800ba8c:	4621      	mov	r1, r4
 800ba8e:	f7fd ff0f 	bl	80098b0 <_Bfree>
 800ba92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ba94:	2300      	movs	r3, #0
 800ba96:	6013      	str	r3, [r2, #0]
 800ba98:	2550      	movs	r5, #80	@ 0x50
 800ba9a:	e72b      	b.n	800b8f4 <__gethex+0xf8>
 800ba9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d1f3      	bne.n	800ba8a <__gethex+0x28e>
 800baa2:	e7e0      	b.n	800ba66 <__gethex+0x26a>
 800baa4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d1dd      	bne.n	800ba66 <__gethex+0x26a>
 800baaa:	e7ee      	b.n	800ba8a <__gethex+0x28e>
 800baac:	0800c2ef 	.word	0x0800c2ef
 800bab0:	0800c285 	.word	0x0800c285
 800bab4:	0800c346 	.word	0x0800c346
 800bab8:	1e6f      	subs	r7, r5, #1
 800baba:	f1b9 0f00 	cmp.w	r9, #0
 800babe:	d130      	bne.n	800bb22 <__gethex+0x326>
 800bac0:	b127      	cbz	r7, 800bacc <__gethex+0x2d0>
 800bac2:	4639      	mov	r1, r7
 800bac4:	4620      	mov	r0, r4
 800bac6:	f7fe fb3c 	bl	800a142 <__any_on>
 800baca:	4681      	mov	r9, r0
 800bacc:	117a      	asrs	r2, r7, #5
 800bace:	2301      	movs	r3, #1
 800bad0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bad4:	f007 071f 	and.w	r7, r7, #31
 800bad8:	40bb      	lsls	r3, r7
 800bada:	4213      	tst	r3, r2
 800badc:	4629      	mov	r1, r5
 800bade:	4620      	mov	r0, r4
 800bae0:	bf18      	it	ne
 800bae2:	f049 0902 	orrne.w	r9, r9, #2
 800bae6:	f7ff fe21 	bl	800b72c <rshift>
 800baea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800baee:	1b76      	subs	r6, r6, r5
 800baf0:	2502      	movs	r5, #2
 800baf2:	f1b9 0f00 	cmp.w	r9, #0
 800baf6:	d047      	beq.n	800bb88 <__gethex+0x38c>
 800baf8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bafc:	2b02      	cmp	r3, #2
 800bafe:	d015      	beq.n	800bb2c <__gethex+0x330>
 800bb00:	2b03      	cmp	r3, #3
 800bb02:	d017      	beq.n	800bb34 <__gethex+0x338>
 800bb04:	2b01      	cmp	r3, #1
 800bb06:	d109      	bne.n	800bb1c <__gethex+0x320>
 800bb08:	f019 0f02 	tst.w	r9, #2
 800bb0c:	d006      	beq.n	800bb1c <__gethex+0x320>
 800bb0e:	f8da 3000 	ldr.w	r3, [sl]
 800bb12:	ea49 0903 	orr.w	r9, r9, r3
 800bb16:	f019 0f01 	tst.w	r9, #1
 800bb1a:	d10e      	bne.n	800bb3a <__gethex+0x33e>
 800bb1c:	f045 0510 	orr.w	r5, r5, #16
 800bb20:	e032      	b.n	800bb88 <__gethex+0x38c>
 800bb22:	f04f 0901 	mov.w	r9, #1
 800bb26:	e7d1      	b.n	800bacc <__gethex+0x2d0>
 800bb28:	2501      	movs	r5, #1
 800bb2a:	e7e2      	b.n	800baf2 <__gethex+0x2f6>
 800bb2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb2e:	f1c3 0301 	rsb	r3, r3, #1
 800bb32:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bb34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d0f0      	beq.n	800bb1c <__gethex+0x320>
 800bb3a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bb3e:	f104 0314 	add.w	r3, r4, #20
 800bb42:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bb46:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bb4a:	f04f 0c00 	mov.w	ip, #0
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb54:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bb58:	d01b      	beq.n	800bb92 <__gethex+0x396>
 800bb5a:	3201      	adds	r2, #1
 800bb5c:	6002      	str	r2, [r0, #0]
 800bb5e:	2d02      	cmp	r5, #2
 800bb60:	f104 0314 	add.w	r3, r4, #20
 800bb64:	d13c      	bne.n	800bbe0 <__gethex+0x3e4>
 800bb66:	f8d8 2000 	ldr.w	r2, [r8]
 800bb6a:	3a01      	subs	r2, #1
 800bb6c:	42b2      	cmp	r2, r6
 800bb6e:	d109      	bne.n	800bb84 <__gethex+0x388>
 800bb70:	1171      	asrs	r1, r6, #5
 800bb72:	2201      	movs	r2, #1
 800bb74:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bb78:	f006 061f 	and.w	r6, r6, #31
 800bb7c:	fa02 f606 	lsl.w	r6, r2, r6
 800bb80:	421e      	tst	r6, r3
 800bb82:	d13a      	bne.n	800bbfa <__gethex+0x3fe>
 800bb84:	f045 0520 	orr.w	r5, r5, #32
 800bb88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb8a:	601c      	str	r4, [r3, #0]
 800bb8c:	9b02      	ldr	r3, [sp, #8]
 800bb8e:	601f      	str	r7, [r3, #0]
 800bb90:	e6b0      	b.n	800b8f4 <__gethex+0xf8>
 800bb92:	4299      	cmp	r1, r3
 800bb94:	f843 cc04 	str.w	ip, [r3, #-4]
 800bb98:	d8d9      	bhi.n	800bb4e <__gethex+0x352>
 800bb9a:	68a3      	ldr	r3, [r4, #8]
 800bb9c:	459b      	cmp	fp, r3
 800bb9e:	db17      	blt.n	800bbd0 <__gethex+0x3d4>
 800bba0:	6861      	ldr	r1, [r4, #4]
 800bba2:	9801      	ldr	r0, [sp, #4]
 800bba4:	3101      	adds	r1, #1
 800bba6:	f7fd fe43 	bl	8009830 <_Balloc>
 800bbaa:	4681      	mov	r9, r0
 800bbac:	b918      	cbnz	r0, 800bbb6 <__gethex+0x3ba>
 800bbae:	4b1a      	ldr	r3, [pc, #104]	@ (800bc18 <__gethex+0x41c>)
 800bbb0:	4602      	mov	r2, r0
 800bbb2:	2184      	movs	r1, #132	@ 0x84
 800bbb4:	e6c5      	b.n	800b942 <__gethex+0x146>
 800bbb6:	6922      	ldr	r2, [r4, #16]
 800bbb8:	3202      	adds	r2, #2
 800bbba:	f104 010c 	add.w	r1, r4, #12
 800bbbe:	0092      	lsls	r2, r2, #2
 800bbc0:	300c      	adds	r0, #12
 800bbc2:	f7ff fd69 	bl	800b698 <memcpy>
 800bbc6:	4621      	mov	r1, r4
 800bbc8:	9801      	ldr	r0, [sp, #4]
 800bbca:	f7fd fe71 	bl	80098b0 <_Bfree>
 800bbce:	464c      	mov	r4, r9
 800bbd0:	6923      	ldr	r3, [r4, #16]
 800bbd2:	1c5a      	adds	r2, r3, #1
 800bbd4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bbd8:	6122      	str	r2, [r4, #16]
 800bbda:	2201      	movs	r2, #1
 800bbdc:	615a      	str	r2, [r3, #20]
 800bbde:	e7be      	b.n	800bb5e <__gethex+0x362>
 800bbe0:	6922      	ldr	r2, [r4, #16]
 800bbe2:	455a      	cmp	r2, fp
 800bbe4:	dd0b      	ble.n	800bbfe <__gethex+0x402>
 800bbe6:	2101      	movs	r1, #1
 800bbe8:	4620      	mov	r0, r4
 800bbea:	f7ff fd9f 	bl	800b72c <rshift>
 800bbee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bbf2:	3701      	adds	r7, #1
 800bbf4:	42bb      	cmp	r3, r7
 800bbf6:	f6ff aee0 	blt.w	800b9ba <__gethex+0x1be>
 800bbfa:	2501      	movs	r5, #1
 800bbfc:	e7c2      	b.n	800bb84 <__gethex+0x388>
 800bbfe:	f016 061f 	ands.w	r6, r6, #31
 800bc02:	d0fa      	beq.n	800bbfa <__gethex+0x3fe>
 800bc04:	4453      	add	r3, sl
 800bc06:	f1c6 0620 	rsb	r6, r6, #32
 800bc0a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bc0e:	f7fd ff01 	bl	8009a14 <__hi0bits>
 800bc12:	42b0      	cmp	r0, r6
 800bc14:	dbe7      	blt.n	800bbe6 <__gethex+0x3ea>
 800bc16:	e7f0      	b.n	800bbfa <__gethex+0x3fe>
 800bc18:	0800c285 	.word	0x0800c285

0800bc1c <L_shift>:
 800bc1c:	f1c2 0208 	rsb	r2, r2, #8
 800bc20:	0092      	lsls	r2, r2, #2
 800bc22:	b570      	push	{r4, r5, r6, lr}
 800bc24:	f1c2 0620 	rsb	r6, r2, #32
 800bc28:	6843      	ldr	r3, [r0, #4]
 800bc2a:	6804      	ldr	r4, [r0, #0]
 800bc2c:	fa03 f506 	lsl.w	r5, r3, r6
 800bc30:	432c      	orrs	r4, r5
 800bc32:	40d3      	lsrs	r3, r2
 800bc34:	6004      	str	r4, [r0, #0]
 800bc36:	f840 3f04 	str.w	r3, [r0, #4]!
 800bc3a:	4288      	cmp	r0, r1
 800bc3c:	d3f4      	bcc.n	800bc28 <L_shift+0xc>
 800bc3e:	bd70      	pop	{r4, r5, r6, pc}

0800bc40 <__match>:
 800bc40:	b530      	push	{r4, r5, lr}
 800bc42:	6803      	ldr	r3, [r0, #0]
 800bc44:	3301      	adds	r3, #1
 800bc46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc4a:	b914      	cbnz	r4, 800bc52 <__match+0x12>
 800bc4c:	6003      	str	r3, [r0, #0]
 800bc4e:	2001      	movs	r0, #1
 800bc50:	bd30      	pop	{r4, r5, pc}
 800bc52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc56:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800bc5a:	2d19      	cmp	r5, #25
 800bc5c:	bf98      	it	ls
 800bc5e:	3220      	addls	r2, #32
 800bc60:	42a2      	cmp	r2, r4
 800bc62:	d0f0      	beq.n	800bc46 <__match+0x6>
 800bc64:	2000      	movs	r0, #0
 800bc66:	e7f3      	b.n	800bc50 <__match+0x10>

0800bc68 <__hexnan>:
 800bc68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc6c:	680b      	ldr	r3, [r1, #0]
 800bc6e:	6801      	ldr	r1, [r0, #0]
 800bc70:	115e      	asrs	r6, r3, #5
 800bc72:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bc76:	f013 031f 	ands.w	r3, r3, #31
 800bc7a:	b087      	sub	sp, #28
 800bc7c:	bf18      	it	ne
 800bc7e:	3604      	addne	r6, #4
 800bc80:	2500      	movs	r5, #0
 800bc82:	1f37      	subs	r7, r6, #4
 800bc84:	4682      	mov	sl, r0
 800bc86:	4690      	mov	r8, r2
 800bc88:	9301      	str	r3, [sp, #4]
 800bc8a:	f846 5c04 	str.w	r5, [r6, #-4]
 800bc8e:	46b9      	mov	r9, r7
 800bc90:	463c      	mov	r4, r7
 800bc92:	9502      	str	r5, [sp, #8]
 800bc94:	46ab      	mov	fp, r5
 800bc96:	784a      	ldrb	r2, [r1, #1]
 800bc98:	1c4b      	adds	r3, r1, #1
 800bc9a:	9303      	str	r3, [sp, #12]
 800bc9c:	b342      	cbz	r2, 800bcf0 <__hexnan+0x88>
 800bc9e:	4610      	mov	r0, r2
 800bca0:	9105      	str	r1, [sp, #20]
 800bca2:	9204      	str	r2, [sp, #16]
 800bca4:	f7ff fd94 	bl	800b7d0 <__hexdig_fun>
 800bca8:	2800      	cmp	r0, #0
 800bcaa:	d151      	bne.n	800bd50 <__hexnan+0xe8>
 800bcac:	9a04      	ldr	r2, [sp, #16]
 800bcae:	9905      	ldr	r1, [sp, #20]
 800bcb0:	2a20      	cmp	r2, #32
 800bcb2:	d818      	bhi.n	800bce6 <__hexnan+0x7e>
 800bcb4:	9b02      	ldr	r3, [sp, #8]
 800bcb6:	459b      	cmp	fp, r3
 800bcb8:	dd13      	ble.n	800bce2 <__hexnan+0x7a>
 800bcba:	454c      	cmp	r4, r9
 800bcbc:	d206      	bcs.n	800bccc <__hexnan+0x64>
 800bcbe:	2d07      	cmp	r5, #7
 800bcc0:	dc04      	bgt.n	800bccc <__hexnan+0x64>
 800bcc2:	462a      	mov	r2, r5
 800bcc4:	4649      	mov	r1, r9
 800bcc6:	4620      	mov	r0, r4
 800bcc8:	f7ff ffa8 	bl	800bc1c <L_shift>
 800bccc:	4544      	cmp	r4, r8
 800bcce:	d952      	bls.n	800bd76 <__hexnan+0x10e>
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	f1a4 0904 	sub.w	r9, r4, #4
 800bcd6:	f844 3c04 	str.w	r3, [r4, #-4]
 800bcda:	f8cd b008 	str.w	fp, [sp, #8]
 800bcde:	464c      	mov	r4, r9
 800bce0:	461d      	mov	r5, r3
 800bce2:	9903      	ldr	r1, [sp, #12]
 800bce4:	e7d7      	b.n	800bc96 <__hexnan+0x2e>
 800bce6:	2a29      	cmp	r2, #41	@ 0x29
 800bce8:	d157      	bne.n	800bd9a <__hexnan+0x132>
 800bcea:	3102      	adds	r1, #2
 800bcec:	f8ca 1000 	str.w	r1, [sl]
 800bcf0:	f1bb 0f00 	cmp.w	fp, #0
 800bcf4:	d051      	beq.n	800bd9a <__hexnan+0x132>
 800bcf6:	454c      	cmp	r4, r9
 800bcf8:	d206      	bcs.n	800bd08 <__hexnan+0xa0>
 800bcfa:	2d07      	cmp	r5, #7
 800bcfc:	dc04      	bgt.n	800bd08 <__hexnan+0xa0>
 800bcfe:	462a      	mov	r2, r5
 800bd00:	4649      	mov	r1, r9
 800bd02:	4620      	mov	r0, r4
 800bd04:	f7ff ff8a 	bl	800bc1c <L_shift>
 800bd08:	4544      	cmp	r4, r8
 800bd0a:	d936      	bls.n	800bd7a <__hexnan+0x112>
 800bd0c:	f1a8 0204 	sub.w	r2, r8, #4
 800bd10:	4623      	mov	r3, r4
 800bd12:	f853 1b04 	ldr.w	r1, [r3], #4
 800bd16:	f842 1f04 	str.w	r1, [r2, #4]!
 800bd1a:	429f      	cmp	r7, r3
 800bd1c:	d2f9      	bcs.n	800bd12 <__hexnan+0xaa>
 800bd1e:	1b3b      	subs	r3, r7, r4
 800bd20:	f023 0303 	bic.w	r3, r3, #3
 800bd24:	3304      	adds	r3, #4
 800bd26:	3401      	adds	r4, #1
 800bd28:	3e03      	subs	r6, #3
 800bd2a:	42b4      	cmp	r4, r6
 800bd2c:	bf88      	it	hi
 800bd2e:	2304      	movhi	r3, #4
 800bd30:	4443      	add	r3, r8
 800bd32:	2200      	movs	r2, #0
 800bd34:	f843 2b04 	str.w	r2, [r3], #4
 800bd38:	429f      	cmp	r7, r3
 800bd3a:	d2fb      	bcs.n	800bd34 <__hexnan+0xcc>
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	b91b      	cbnz	r3, 800bd48 <__hexnan+0xe0>
 800bd40:	4547      	cmp	r7, r8
 800bd42:	d128      	bne.n	800bd96 <__hexnan+0x12e>
 800bd44:	2301      	movs	r3, #1
 800bd46:	603b      	str	r3, [r7, #0]
 800bd48:	2005      	movs	r0, #5
 800bd4a:	b007      	add	sp, #28
 800bd4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd50:	3501      	adds	r5, #1
 800bd52:	2d08      	cmp	r5, #8
 800bd54:	f10b 0b01 	add.w	fp, fp, #1
 800bd58:	dd06      	ble.n	800bd68 <__hexnan+0x100>
 800bd5a:	4544      	cmp	r4, r8
 800bd5c:	d9c1      	bls.n	800bce2 <__hexnan+0x7a>
 800bd5e:	2300      	movs	r3, #0
 800bd60:	f844 3c04 	str.w	r3, [r4, #-4]
 800bd64:	2501      	movs	r5, #1
 800bd66:	3c04      	subs	r4, #4
 800bd68:	6822      	ldr	r2, [r4, #0]
 800bd6a:	f000 000f 	and.w	r0, r0, #15
 800bd6e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bd72:	6020      	str	r0, [r4, #0]
 800bd74:	e7b5      	b.n	800bce2 <__hexnan+0x7a>
 800bd76:	2508      	movs	r5, #8
 800bd78:	e7b3      	b.n	800bce2 <__hexnan+0x7a>
 800bd7a:	9b01      	ldr	r3, [sp, #4]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d0dd      	beq.n	800bd3c <__hexnan+0xd4>
 800bd80:	f1c3 0320 	rsb	r3, r3, #32
 800bd84:	f04f 32ff 	mov.w	r2, #4294967295
 800bd88:	40da      	lsrs	r2, r3
 800bd8a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800bd8e:	4013      	ands	r3, r2
 800bd90:	f846 3c04 	str.w	r3, [r6, #-4]
 800bd94:	e7d2      	b.n	800bd3c <__hexnan+0xd4>
 800bd96:	3f04      	subs	r7, #4
 800bd98:	e7d0      	b.n	800bd3c <__hexnan+0xd4>
 800bd9a:	2004      	movs	r0, #4
 800bd9c:	e7d5      	b.n	800bd4a <__hexnan+0xe2>

0800bd9e <__ascii_mbtowc>:
 800bd9e:	b082      	sub	sp, #8
 800bda0:	b901      	cbnz	r1, 800bda4 <__ascii_mbtowc+0x6>
 800bda2:	a901      	add	r1, sp, #4
 800bda4:	b142      	cbz	r2, 800bdb8 <__ascii_mbtowc+0x1a>
 800bda6:	b14b      	cbz	r3, 800bdbc <__ascii_mbtowc+0x1e>
 800bda8:	7813      	ldrb	r3, [r2, #0]
 800bdaa:	600b      	str	r3, [r1, #0]
 800bdac:	7812      	ldrb	r2, [r2, #0]
 800bdae:	1e10      	subs	r0, r2, #0
 800bdb0:	bf18      	it	ne
 800bdb2:	2001      	movne	r0, #1
 800bdb4:	b002      	add	sp, #8
 800bdb6:	4770      	bx	lr
 800bdb8:	4610      	mov	r0, r2
 800bdba:	e7fb      	b.n	800bdb4 <__ascii_mbtowc+0x16>
 800bdbc:	f06f 0001 	mvn.w	r0, #1
 800bdc0:	e7f8      	b.n	800bdb4 <__ascii_mbtowc+0x16>

0800bdc2 <_realloc_r>:
 800bdc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdc6:	4607      	mov	r7, r0
 800bdc8:	4614      	mov	r4, r2
 800bdca:	460d      	mov	r5, r1
 800bdcc:	b921      	cbnz	r1, 800bdd8 <_realloc_r+0x16>
 800bdce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bdd2:	4611      	mov	r1, r2
 800bdd4:	f7fd bca0 	b.w	8009718 <_malloc_r>
 800bdd8:	b92a      	cbnz	r2, 800bde6 <_realloc_r+0x24>
 800bdda:	f7fd fc29 	bl	8009630 <_free_r>
 800bdde:	4625      	mov	r5, r4
 800bde0:	4628      	mov	r0, r5
 800bde2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bde6:	f000 f840 	bl	800be6a <_malloc_usable_size_r>
 800bdea:	4284      	cmp	r4, r0
 800bdec:	4606      	mov	r6, r0
 800bdee:	d802      	bhi.n	800bdf6 <_realloc_r+0x34>
 800bdf0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bdf4:	d8f4      	bhi.n	800bde0 <_realloc_r+0x1e>
 800bdf6:	4621      	mov	r1, r4
 800bdf8:	4638      	mov	r0, r7
 800bdfa:	f7fd fc8d 	bl	8009718 <_malloc_r>
 800bdfe:	4680      	mov	r8, r0
 800be00:	b908      	cbnz	r0, 800be06 <_realloc_r+0x44>
 800be02:	4645      	mov	r5, r8
 800be04:	e7ec      	b.n	800bde0 <_realloc_r+0x1e>
 800be06:	42b4      	cmp	r4, r6
 800be08:	4622      	mov	r2, r4
 800be0a:	4629      	mov	r1, r5
 800be0c:	bf28      	it	cs
 800be0e:	4632      	movcs	r2, r6
 800be10:	f7ff fc42 	bl	800b698 <memcpy>
 800be14:	4629      	mov	r1, r5
 800be16:	4638      	mov	r0, r7
 800be18:	f7fd fc0a 	bl	8009630 <_free_r>
 800be1c:	e7f1      	b.n	800be02 <_realloc_r+0x40>

0800be1e <__ascii_wctomb>:
 800be1e:	4603      	mov	r3, r0
 800be20:	4608      	mov	r0, r1
 800be22:	b141      	cbz	r1, 800be36 <__ascii_wctomb+0x18>
 800be24:	2aff      	cmp	r2, #255	@ 0xff
 800be26:	d904      	bls.n	800be32 <__ascii_wctomb+0x14>
 800be28:	228a      	movs	r2, #138	@ 0x8a
 800be2a:	601a      	str	r2, [r3, #0]
 800be2c:	f04f 30ff 	mov.w	r0, #4294967295
 800be30:	4770      	bx	lr
 800be32:	700a      	strb	r2, [r1, #0]
 800be34:	2001      	movs	r0, #1
 800be36:	4770      	bx	lr

0800be38 <fiprintf>:
 800be38:	b40e      	push	{r1, r2, r3}
 800be3a:	b503      	push	{r0, r1, lr}
 800be3c:	4601      	mov	r1, r0
 800be3e:	ab03      	add	r3, sp, #12
 800be40:	4805      	ldr	r0, [pc, #20]	@ (800be58 <fiprintf+0x20>)
 800be42:	f853 2b04 	ldr.w	r2, [r3], #4
 800be46:	6800      	ldr	r0, [r0, #0]
 800be48:	9301      	str	r3, [sp, #4]
 800be4a:	f7ff f9a1 	bl	800b190 <_vfiprintf_r>
 800be4e:	b002      	add	sp, #8
 800be50:	f85d eb04 	ldr.w	lr, [sp], #4
 800be54:	b003      	add	sp, #12
 800be56:	4770      	bx	lr
 800be58:	20000030 	.word	0x20000030

0800be5c <abort>:
 800be5c:	b508      	push	{r3, lr}
 800be5e:	2006      	movs	r0, #6
 800be60:	f000 f834 	bl	800becc <raise>
 800be64:	2001      	movs	r0, #1
 800be66:	f7f6 fcb6 	bl	80027d6 <_exit>

0800be6a <_malloc_usable_size_r>:
 800be6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be6e:	1f18      	subs	r0, r3, #4
 800be70:	2b00      	cmp	r3, #0
 800be72:	bfbc      	itt	lt
 800be74:	580b      	ldrlt	r3, [r1, r0]
 800be76:	18c0      	addlt	r0, r0, r3
 800be78:	4770      	bx	lr

0800be7a <_raise_r>:
 800be7a:	291f      	cmp	r1, #31
 800be7c:	b538      	push	{r3, r4, r5, lr}
 800be7e:	4605      	mov	r5, r0
 800be80:	460c      	mov	r4, r1
 800be82:	d904      	bls.n	800be8e <_raise_r+0x14>
 800be84:	2316      	movs	r3, #22
 800be86:	6003      	str	r3, [r0, #0]
 800be88:	f04f 30ff 	mov.w	r0, #4294967295
 800be8c:	bd38      	pop	{r3, r4, r5, pc}
 800be8e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800be90:	b112      	cbz	r2, 800be98 <_raise_r+0x1e>
 800be92:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be96:	b94b      	cbnz	r3, 800beac <_raise_r+0x32>
 800be98:	4628      	mov	r0, r5
 800be9a:	f000 f831 	bl	800bf00 <_getpid_r>
 800be9e:	4622      	mov	r2, r4
 800bea0:	4601      	mov	r1, r0
 800bea2:	4628      	mov	r0, r5
 800bea4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bea8:	f000 b818 	b.w	800bedc <_kill_r>
 800beac:	2b01      	cmp	r3, #1
 800beae:	d00a      	beq.n	800bec6 <_raise_r+0x4c>
 800beb0:	1c59      	adds	r1, r3, #1
 800beb2:	d103      	bne.n	800bebc <_raise_r+0x42>
 800beb4:	2316      	movs	r3, #22
 800beb6:	6003      	str	r3, [r0, #0]
 800beb8:	2001      	movs	r0, #1
 800beba:	e7e7      	b.n	800be8c <_raise_r+0x12>
 800bebc:	2100      	movs	r1, #0
 800bebe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bec2:	4620      	mov	r0, r4
 800bec4:	4798      	blx	r3
 800bec6:	2000      	movs	r0, #0
 800bec8:	e7e0      	b.n	800be8c <_raise_r+0x12>
	...

0800becc <raise>:
 800becc:	4b02      	ldr	r3, [pc, #8]	@ (800bed8 <raise+0xc>)
 800bece:	4601      	mov	r1, r0
 800bed0:	6818      	ldr	r0, [r3, #0]
 800bed2:	f7ff bfd2 	b.w	800be7a <_raise_r>
 800bed6:	bf00      	nop
 800bed8:	20000030 	.word	0x20000030

0800bedc <_kill_r>:
 800bedc:	b538      	push	{r3, r4, r5, lr}
 800bede:	4d07      	ldr	r5, [pc, #28]	@ (800befc <_kill_r+0x20>)
 800bee0:	2300      	movs	r3, #0
 800bee2:	4604      	mov	r4, r0
 800bee4:	4608      	mov	r0, r1
 800bee6:	4611      	mov	r1, r2
 800bee8:	602b      	str	r3, [r5, #0]
 800beea:	f7f6 fc64 	bl	80027b6 <_kill>
 800beee:	1c43      	adds	r3, r0, #1
 800bef0:	d102      	bne.n	800bef8 <_kill_r+0x1c>
 800bef2:	682b      	ldr	r3, [r5, #0]
 800bef4:	b103      	cbz	r3, 800bef8 <_kill_r+0x1c>
 800bef6:	6023      	str	r3, [r4, #0]
 800bef8:	bd38      	pop	{r3, r4, r5, pc}
 800befa:	bf00      	nop
 800befc:	20000620 	.word	0x20000620

0800bf00 <_getpid_r>:
 800bf00:	f7f6 bc51 	b.w	80027a6 <_getpid>

0800bf04 <_init>:
 800bf04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf06:	bf00      	nop
 800bf08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf0a:	bc08      	pop	{r3}
 800bf0c:	469e      	mov	lr, r3
 800bf0e:	4770      	bx	lr

0800bf10 <_fini>:
 800bf10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf12:	bf00      	nop
 800bf14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf16:	bc08      	pop	{r3}
 800bf18:	469e      	mov	lr, r3
 800bf1a:	4770      	bx	lr

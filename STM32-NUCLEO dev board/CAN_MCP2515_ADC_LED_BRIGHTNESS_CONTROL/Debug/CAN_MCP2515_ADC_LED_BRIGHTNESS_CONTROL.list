
CAN_MCP2515_ADC_LED_BRIGHTNESS_CONTROL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000584c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08005a1c  08005a1c  00006a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b3c  08005b3c  00007084  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005b3c  08005b3c  00006b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b44  08005b44  00007084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b44  08005b44  00006b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b48  08005b48  00006b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08005b4c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  20000084  08005bd0  00007084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b8  08005bd0  000073b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001082b  00000000  00000000  000070b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000241a  00000000  00000000  000178df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe8  00000000  00000000  00019d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c72  00000000  00000000  0001ace8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023e3b  00000000  00000000  0001b95a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000130c2  00000000  00000000  0003f795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dfa77  00000000  00000000  00052857  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001322ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004874  00000000  00000000  00132314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ce  00000000  00000000  00136b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000084 	.word	0x20000084
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005a04 	.word	0x08005a04

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000088 	.word	0x20000088
 800020c:	08005a04 	.word	0x08005a04

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <UART_Print>:
/* USER CODE BEGIN PFP */

// uart transmission function.

// Debug print function
void UART_Print(const char *str) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f7ff fe0b 	bl	8000210 <strlen>
 80005fa:	4603      	mov	r3, r0
 80005fc:	b29a      	uxth	r2, r3
 80005fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000602:	6879      	ldr	r1, [r7, #4]
 8000604:	4803      	ldr	r0, [pc, #12]	@ (8000614 <UART_Print+0x28>)
 8000606:	f004 f9a1 	bl	800494c <HAL_UART_Transmit>
}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	200001e0 	.word	0x200001e0

08000618 <Read_ADC_Value>:
    return ch;
}

/* USER CODE BEGIN PFP */
uint32_t Read_ADC_Value(ADC_HandleTypeDef *hadc)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
    HAL_ADC_Start(hadc);
 8000620:	6878      	ldr	r0, [r7, #4]
 8000622:	f000 fffb 	bl	800161c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8000626:	f04f 31ff 	mov.w	r1, #4294967295
 800062a:	6878      	ldr	r0, [r7, #4]
 800062c:	f001 f8fb 	bl	8001826 <HAL_ADC_PollForConversion>
    uint32_t adc_value = HAL_ADC_GetValue(hadc);
 8000630:	6878      	ldr	r0, [r7, #4]
 8000632:	f001 f983 	bl	800193c <HAL_ADC_GetValue>
 8000636:	60f8      	str	r0, [r7, #12]
    HAL_ADC_Stop(hadc);
 8000638:	6878      	ldr	r0, [r7, #4]
 800063a:	f001 f8c1 	bl	80017c0 <HAL_ADC_Stop>
    return adc_value;
 800063e:	68fb      	ldr	r3, [r7, #12]
}
 8000640:	4618      	mov	r0, r3
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <Update_PWM_Brightness>:

void Update_PWM_Brightness(TIM_HandleTypeDef *htim, uint32_t channel, uint32_t adc_value)
{
 8000648:	b480      	push	{r7}
 800064a:	b087      	sub	sp, #28
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
    uint32_t pwm_pulse_value = adc_value / 4; // Scale 0–4095 to 0–1023 for PWM
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	089b      	lsrs	r3, r3, #2
 8000658:	617b      	str	r3, [r7, #20]
    __HAL_TIM_SET_COMPARE(htim, channel, pwm_pulse_value);
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d104      	bne.n	800066a <Update_PWM_Brightness+0x22>
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	697a      	ldr	r2, [r7, #20]
 8000666:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000668:	e013      	b.n	8000692 <Update_PWM_Brightness+0x4a>
    __HAL_TIM_SET_COMPARE(htim, channel, pwm_pulse_value);
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	2b04      	cmp	r3, #4
 800066e:	d104      	bne.n	800067a <Update_PWM_Brightness+0x32>
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000678:	e00b      	b.n	8000692 <Update_PWM_Brightness+0x4a>
    __HAL_TIM_SET_COMPARE(htim, channel, pwm_pulse_value);
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	2b08      	cmp	r3, #8
 800067e:	d104      	bne.n	800068a <Update_PWM_Brightness+0x42>
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000688:	e003      	b.n	8000692 <Update_PWM_Brightness+0x4a>
    __HAL_TIM_SET_COMPARE(htim, channel, pwm_pulse_value);
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	681a      	ldr	r2, [r3, #0]
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000692:	bf00      	nop
 8000694:	371c      	adds	r7, #28
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
	...

080006a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b088      	sub	sp, #32
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a6:	f000 fedf 	bl	8001468 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006aa:	f000 f89f 	bl	80007ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ae:	f000 fa99 	bl	8000be4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006b2:	f000 fa6d 	bl	8000b90 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80006b6:	f000 f90b 	bl	80008d0 <MX_ADC1_Init>
  MX_SPI1_Init();
 80006ba:	f000 f95b 	bl	8000974 <MX_SPI1_Init>
  MX_SPI3_Init();
 80006be:	f000 f98f 	bl	80009e0 <MX_SPI3_Init>
  MX_TIM1_Init();
 80006c2:	f000 f9c3 	bl	8000a4c <MX_TIM1_Init>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80006c6:	2108      	movs	r1, #8
 80006c8:	483a      	ldr	r0, [pc, #232]	@ (80007b4 <main+0x114>)
 80006ca:	f003 fab9 	bl	8003c40 <HAL_TIM_PWM_Start>

  /* USER CODE BEGIN 2 */
  UART_Print("Initializing MCP2515 Transmitter (SPI3)...\r\n");
 80006ce:	483a      	ldr	r0, [pc, #232]	@ (80007b8 <main+0x118>)
 80006d0:	f7ff ff8c 	bl	80005ec <UART_Print>
  MCP2515_Init(&hcan_tx, 500000); // 500 kbps
 80006d4:	4939      	ldr	r1, [pc, #228]	@ (80007bc <main+0x11c>)
 80006d6:	483a      	ldr	r0, [pc, #232]	@ (80007c0 <main+0x120>)
 80006d8:	f000 fbc4 	bl	8000e64 <MCP2515_Init>
  UART_Print("Initializing MCP2515 Receiver (SPI1)...\r\n");
 80006dc:	4839      	ldr	r0, [pc, #228]	@ (80007c4 <main+0x124>)
 80006de:	f7ff ff85 	bl	80005ec <UART_Print>
  MCP2515_Init(&hcan_rx, 500000); // 500 kbps
 80006e2:	4936      	ldr	r1, [pc, #216]	@ (80007bc <main+0x11c>)
 80006e4:	4838      	ldr	r0, [pc, #224]	@ (80007c8 <main+0x128>)
 80006e6:	f000 fbbd 	bl	8000e64 <MCP2515_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  //initializing MCP2515 Transmission
	  uint32_t adc_value = Read_ADC_Value(&hadc1);
 80006ea:	4838      	ldr	r0, [pc, #224]	@ (80007cc <main+0x12c>)
 80006ec:	f7ff ff94 	bl	8000618 <Read_ADC_Value>
 80006f0:	61b8      	str	r0, [r7, #24]

	  // Prepare CAN message with ADC value
	  tx_msg.data[0] = (adc_value >> 8) & 0xFF; // High byte
 80006f2:	69bb      	ldr	r3, [r7, #24]
 80006f4:	0a1b      	lsrs	r3, r3, #8
 80006f6:	b2da      	uxtb	r2, r3
 80006f8:	4b35      	ldr	r3, [pc, #212]	@ (80007d0 <main+0x130>)
 80006fa:	715a      	strb	r2, [r3, #5]
	  tx_msg.data[1] = adc_value & 0xFF;        // Low byte
 80006fc:	69bb      	ldr	r3, [r7, #24]
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	4b33      	ldr	r3, [pc, #204]	@ (80007d0 <main+0x130>)
 8000702:	719a      	strb	r2, [r3, #6]
	  tx_msg.data[2] = 0x00;                    // Unused
 8000704:	4b32      	ldr	r3, [pc, #200]	@ (80007d0 <main+0x130>)
 8000706:	2200      	movs	r2, #0
 8000708:	71da      	strb	r2, [r3, #7]
	  tx_msg.data[3] = 0x00;                    // Unused
 800070a:	4b31      	ldr	r3, [pc, #196]	@ (80007d0 <main+0x130>)
 800070c:	2200      	movs	r2, #0
 800070e:	721a      	strb	r2, [r3, #8]

	  UART_Print("Sending CAN message...\r\n");
 8000710:	4830      	ldr	r0, [pc, #192]	@ (80007d4 <main+0x134>)
 8000712:	f7ff ff6b 	bl	80005ec <UART_Print>
	  MCP2515_Transmit(&hcan_tx, &tx_msg);
 8000716:	492e      	ldr	r1, [pc, #184]	@ (80007d0 <main+0x130>)
 8000718:	4829      	ldr	r0, [pc, #164]	@ (80007c0 <main+0x120>)
 800071a:	f000 fbe1 	bl	8000ee0 <MCP2515_Transmit>
	  HAL_Delay(100);
 800071e:	2064      	movs	r0, #100	@ 0x64
 8000720:	f000 ff14 	bl	800154c <HAL_Delay>

	  // Check for received message
	  CAN_Message rx_msg = {0};
 8000724:	463b      	mov	r3, r7
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
	  if (MCP2515_Receive(&hcan_rx, &rx_msg))
 8000730:	463b      	mov	r3, r7
 8000732:	4619      	mov	r1, r3
 8000734:	4824      	ldr	r0, [pc, #144]	@ (80007c8 <main+0x128>)
 8000736:	f000 fc14 	bl	8000f62 <MCP2515_Receive>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d02c      	beq.n	800079a <main+0xfa>
	  {
		  uint32_t received_adc = (rx_msg.data[0] << 8) | rx_msg.data[1];
 8000740:	797b      	ldrb	r3, [r7, #5]
 8000742:	021b      	lsls	r3, r3, #8
 8000744:	79ba      	ldrb	r2, [r7, #6]
 8000746:	4313      	orrs	r3, r2
 8000748:	617b      	str	r3, [r7, #20]
		  Update_PWM_Brightness(&htim1, TIM_CHANNEL_3, received_adc);
 800074a:	697a      	ldr	r2, [r7, #20]
 800074c:	2108      	movs	r1, #8
 800074e:	4819      	ldr	r0, [pc, #100]	@ (80007b4 <main+0x114>)
 8000750:	f7ff ff7a 	bl	8000648 <Update_PWM_Brightness>
		  sprintf(buf, "Received CAN ID: 0x%03lX, DLC: %d, Data: ", rx_msg.id, rx_msg.dlc);
 8000754:	683a      	ldr	r2, [r7, #0]
 8000756:	793b      	ldrb	r3, [r7, #4]
 8000758:	491f      	ldr	r1, [pc, #124]	@ (80007d8 <main+0x138>)
 800075a:	4820      	ldr	r0, [pc, #128]	@ (80007dc <main+0x13c>)
 800075c:	f004 fcb2 	bl	80050c4 <siprintf>
		  UART_Print(buf);
 8000760:	481e      	ldr	r0, [pc, #120]	@ (80007dc <main+0x13c>)
 8000762:	f7ff ff43 	bl	80005ec <UART_Print>

		  for (uint8_t i = 0; i < rx_msg.dlc; i++)
 8000766:	2300      	movs	r3, #0
 8000768:	77fb      	strb	r3, [r7, #31]
 800076a:	e00f      	b.n	800078c <main+0xec>
		  {
			  sprintf(buf, "%02X ", rx_msg.data[i]);
 800076c:	7ffb      	ldrb	r3, [r7, #31]
 800076e:	3320      	adds	r3, #32
 8000770:	443b      	add	r3, r7
 8000772:	f813 3c1b 	ldrb.w	r3, [r3, #-27]
 8000776:	461a      	mov	r2, r3
 8000778:	4919      	ldr	r1, [pc, #100]	@ (80007e0 <main+0x140>)
 800077a:	4818      	ldr	r0, [pc, #96]	@ (80007dc <main+0x13c>)
 800077c:	f004 fca2 	bl	80050c4 <siprintf>
			  UART_Print(buf);
 8000780:	4816      	ldr	r0, [pc, #88]	@ (80007dc <main+0x13c>)
 8000782:	f7ff ff33 	bl	80005ec <UART_Print>
		  for (uint8_t i = 0; i < rx_msg.dlc; i++)
 8000786:	7ffb      	ldrb	r3, [r7, #31]
 8000788:	3301      	adds	r3, #1
 800078a:	77fb      	strb	r3, [r7, #31]
 800078c:	793b      	ldrb	r3, [r7, #4]
 800078e:	7ffa      	ldrb	r2, [r7, #31]
 8000790:	429a      	cmp	r2, r3
 8000792:	d3eb      	bcc.n	800076c <main+0xcc>
		  }
		  UART_Print("\r\n");
 8000794:	4813      	ldr	r0, [pc, #76]	@ (80007e4 <main+0x144>)
 8000796:	f7ff ff29 	bl	80005ec <UART_Print>
	  }
	  // Print ADC and PWM values for debugging
	  uint32_t pwm_pulse_value = adc_value / 4;
 800079a:	69bb      	ldr	r3, [r7, #24]
 800079c:	089b      	lsrs	r3, r3, #2
 800079e:	613b      	str	r3, [r7, #16]
	  sprintf(buf, "ADC Value: %lu, PWM value: %lu\r\n", adc_value, pwm_pulse_value);
 80007a0:	693b      	ldr	r3, [r7, #16]
 80007a2:	69ba      	ldr	r2, [r7, #24]
 80007a4:	4910      	ldr	r1, [pc, #64]	@ (80007e8 <main+0x148>)
 80007a6:	480d      	ldr	r0, [pc, #52]	@ (80007dc <main+0x13c>)
 80007a8:	f004 fc8c 	bl	80050c4 <siprintf>
	  UART_Print(buf);
 80007ac:	480b      	ldr	r0, [pc, #44]	@ (80007dc <main+0x13c>)
 80007ae:	f7ff ff1d 	bl	80005ec <UART_Print>
  {
 80007b2:	e79a      	b.n	80006ea <main+0x4a>
 80007b4:	20000198 	.word	0x20000198
 80007b8:	08005a1c 	.word	0x08005a1c
 80007bc:	0007a120 	.word	0x0007a120
 80007c0:	20000000 	.word	0x20000000
 80007c4:	08005a4c 	.word	0x08005a4c
 80007c8:	2000000c 	.word	0x2000000c
 80007cc:	200000a0 	.word	0x200000a0
 80007d0:	20000018 	.word	0x20000018
 80007d4:	08005a78 	.word	0x08005a78
 80007d8:	08005a94 	.word	0x08005a94
 80007dc:	20000228 	.word	0x20000228
 80007e0:	08005ac0 	.word	0x08005ac0
 80007e4:	08005ac8 	.word	0x08005ac8
 80007e8:	08005acc 	.word	0x08005acc

080007ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b094      	sub	sp, #80	@ 0x50
 80007f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f2:	f107 031c 	add.w	r3, r7, #28
 80007f6:	2234      	movs	r2, #52	@ 0x34
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f004 fc84 	bl	8005108 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000800:	f107 0308 	add.w	r3, r7, #8
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
 800080e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000810:	2300      	movs	r3, #0
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	4b2c      	ldr	r3, [pc, #176]	@ (80008c8 <SystemClock_Config+0xdc>)
 8000816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000818:	4a2b      	ldr	r2, [pc, #172]	@ (80008c8 <SystemClock_Config+0xdc>)
 800081a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800081e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000820:	4b29      	ldr	r3, [pc, #164]	@ (80008c8 <SystemClock_Config+0xdc>)
 8000822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000824:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800082c:	2300      	movs	r3, #0
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	4b26      	ldr	r3, [pc, #152]	@ (80008cc <SystemClock_Config+0xe0>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a25      	ldr	r2, [pc, #148]	@ (80008cc <SystemClock_Config+0xe0>)
 8000836:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800083a:	6013      	str	r3, [r2, #0]
 800083c:	4b23      	ldr	r3, [pc, #140]	@ (80008cc <SystemClock_Config+0xe0>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000844:	603b      	str	r3, [r7, #0]
 8000846:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000848:	2301      	movs	r3, #1
 800084a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800084c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000850:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000852:	2302      	movs	r3, #2
 8000854:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000856:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800085a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800085c:	2304      	movs	r3, #4
 800085e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000860:	23b4      	movs	r3, #180	@ 0xb4
 8000862:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000864:	2302      	movs	r3, #2
 8000866:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000868:	2302      	movs	r3, #2
 800086a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800086c:	2302      	movs	r3, #2
 800086e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000870:	f107 031c 	add.w	r3, r7, #28
 8000874:	4618      	mov	r0, r3
 8000876:	f002 f8cb 	bl	8002a10 <HAL_RCC_OscConfig>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000880:	f000 fa42 	bl	8000d08 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000884:	f001 fd2a 	bl	80022dc <HAL_PWREx_EnableOverDrive>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800088e:	f000 fa3b 	bl	8000d08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000892:	230f      	movs	r3, #15
 8000894:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000896:	2302      	movs	r3, #2
 8000898:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089a:	2300      	movs	r3, #0
 800089c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800089e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008a8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008aa:	f107 0308 	add.w	r3, r7, #8
 80008ae:	2105      	movs	r1, #5
 80008b0:	4618      	mov	r0, r3
 80008b2:	f001 fd63 	bl	800237c <HAL_RCC_ClockConfig>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80008bc:	f000 fa24 	bl	8000d08 <Error_Handler>
  }
}
 80008c0:	bf00      	nop
 80008c2:	3750      	adds	r7, #80	@ 0x50
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40007000 	.word	0x40007000

080008d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008d6:	463b      	mov	r3, r7
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008e2:	4b21      	ldr	r3, [pc, #132]	@ (8000968 <MX_ADC1_Init+0x98>)
 80008e4:	4a21      	ldr	r2, [pc, #132]	@ (800096c <MX_ADC1_Init+0x9c>)
 80008e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000968 <MX_ADC1_Init+0x98>)
 80008ea:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80008ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008f0:	4b1d      	ldr	r3, [pc, #116]	@ (8000968 <MX_ADC1_Init+0x98>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80008f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000968 <MX_ADC1_Init+0x98>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000968 <MX_ADC1_Init+0x98>)
 80008fe:	2200      	movs	r2, #0
 8000900:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000902:	4b19      	ldr	r3, [pc, #100]	@ (8000968 <MX_ADC1_Init+0x98>)
 8000904:	2200      	movs	r2, #0
 8000906:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800090a:	4b17      	ldr	r3, [pc, #92]	@ (8000968 <MX_ADC1_Init+0x98>)
 800090c:	2200      	movs	r2, #0
 800090e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000910:	4b15      	ldr	r3, [pc, #84]	@ (8000968 <MX_ADC1_Init+0x98>)
 8000912:	4a17      	ldr	r2, [pc, #92]	@ (8000970 <MX_ADC1_Init+0xa0>)
 8000914:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000916:	4b14      	ldr	r3, [pc, #80]	@ (8000968 <MX_ADC1_Init+0x98>)
 8000918:	2200      	movs	r2, #0
 800091a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800091c:	4b12      	ldr	r3, [pc, #72]	@ (8000968 <MX_ADC1_Init+0x98>)
 800091e:	2201      	movs	r2, #1
 8000920:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000922:	4b11      	ldr	r3, [pc, #68]	@ (8000968 <MX_ADC1_Init+0x98>)
 8000924:	2200      	movs	r2, #0
 8000926:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800092a:	4b0f      	ldr	r3, [pc, #60]	@ (8000968 <MX_ADC1_Init+0x98>)
 800092c:	2201      	movs	r2, #1
 800092e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000930:	480d      	ldr	r0, [pc, #52]	@ (8000968 <MX_ADC1_Init+0x98>)
 8000932:	f000 fe2f 	bl	8001594 <HAL_ADC_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800093c:	f000 f9e4 	bl	8000d08 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000940:	2300      	movs	r3, #0
 8000942:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000944:	2301      	movs	r3, #1
 8000946:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000948:	2300      	movs	r3, #0
 800094a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800094c:	463b      	mov	r3, r7
 800094e:	4619      	mov	r1, r3
 8000950:	4805      	ldr	r0, [pc, #20]	@ (8000968 <MX_ADC1_Init+0x98>)
 8000952:	f001 f801 	bl	8001958 <HAL_ADC_ConfigChannel>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800095c:	f000 f9d4 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000960:	bf00      	nop
 8000962:	3710      	adds	r7, #16
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	200000a0 	.word	0x200000a0
 800096c:	40012000 	.word	0x40012000
 8000970:	0f000001 	.word	0x0f000001

08000974 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000978:	4b17      	ldr	r3, [pc, #92]	@ (80009d8 <MX_SPI1_Init+0x64>)
 800097a:	4a18      	ldr	r2, [pc, #96]	@ (80009dc <MX_SPI1_Init+0x68>)
 800097c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800097e:	4b16      	ldr	r3, [pc, #88]	@ (80009d8 <MX_SPI1_Init+0x64>)
 8000980:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000984:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000986:	4b14      	ldr	r3, [pc, #80]	@ (80009d8 <MX_SPI1_Init+0x64>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800098c:	4b12      	ldr	r3, [pc, #72]	@ (80009d8 <MX_SPI1_Init+0x64>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000992:	4b11      	ldr	r3, [pc, #68]	@ (80009d8 <MX_SPI1_Init+0x64>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000998:	4b0f      	ldr	r3, [pc, #60]	@ (80009d8 <MX_SPI1_Init+0x64>)
 800099a:	2200      	movs	r2, #0
 800099c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800099e:	4b0e      	ldr	r3, [pc, #56]	@ (80009d8 <MX_SPI1_Init+0x64>)
 80009a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80009a6:	4b0c      	ldr	r3, [pc, #48]	@ (80009d8 <MX_SPI1_Init+0x64>)
 80009a8:	2218      	movs	r2, #24
 80009aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009ac:	4b0a      	ldr	r3, [pc, #40]	@ (80009d8 <MX_SPI1_Init+0x64>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009b2:	4b09      	ldr	r3, [pc, #36]	@ (80009d8 <MX_SPI1_Init+0x64>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009b8:	4b07      	ldr	r3, [pc, #28]	@ (80009d8 <MX_SPI1_Init+0x64>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009be:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <MX_SPI1_Init+0x64>)
 80009c0:	220a      	movs	r2, #10
 80009c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009c4:	4804      	ldr	r0, [pc, #16]	@ (80009d8 <MX_SPI1_Init+0x64>)
 80009c6:	f002 fac1 	bl	8002f4c <HAL_SPI_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009d0:	f000 f99a 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	200000e8 	.word	0x200000e8
 80009dc:	40013000 	.word	0x40013000

080009e0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80009e4:	4b17      	ldr	r3, [pc, #92]	@ (8000a44 <MX_SPI3_Init+0x64>)
 80009e6:	4a18      	ldr	r2, [pc, #96]	@ (8000a48 <MX_SPI3_Init+0x68>)
 80009e8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80009ea:	4b16      	ldr	r3, [pc, #88]	@ (8000a44 <MX_SPI3_Init+0x64>)
 80009ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009f0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80009f2:	4b14      	ldr	r3, [pc, #80]	@ (8000a44 <MX_SPI3_Init+0x64>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80009f8:	4b12      	ldr	r3, [pc, #72]	@ (8000a44 <MX_SPI3_Init+0x64>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009fe:	4b11      	ldr	r3, [pc, #68]	@ (8000a44 <MX_SPI3_Init+0x64>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	@ (8000a44 <MX_SPI3_Init+0x64>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a44 <MX_SPI3_Init+0x64>)
 8000a0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a10:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000a12:	4b0c      	ldr	r3, [pc, #48]	@ (8000a44 <MX_SPI3_Init+0x64>)
 8000a14:	2210      	movs	r2, #16
 8000a16:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a18:	4b0a      	ldr	r3, [pc, #40]	@ (8000a44 <MX_SPI3_Init+0x64>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a1e:	4b09      	ldr	r3, [pc, #36]	@ (8000a44 <MX_SPI3_Init+0x64>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a24:	4b07      	ldr	r3, [pc, #28]	@ (8000a44 <MX_SPI3_Init+0x64>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000a2a:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <MX_SPI3_Init+0x64>)
 8000a2c:	220a      	movs	r2, #10
 8000a2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a30:	4804      	ldr	r0, [pc, #16]	@ (8000a44 <MX_SPI3_Init+0x64>)
 8000a32:	f002 fa8b 	bl	8002f4c <HAL_SPI_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000a3c:	f000 f964 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20000140 	.word	0x20000140
 8000a48:	40003c00 	.word	0x40003c00

08000a4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b096      	sub	sp, #88	@ 0x58
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a52:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a60:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
 8000a78:	611a      	str	r2, [r3, #16]
 8000a7a:	615a      	str	r2, [r3, #20]
 8000a7c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	2220      	movs	r2, #32
 8000a82:	2100      	movs	r1, #0
 8000a84:	4618      	mov	r0, r3
 8000a86:	f004 fb3f 	bl	8005108 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a8a:	4b3f      	ldr	r3, [pc, #252]	@ (8000b88 <MX_TIM1_Init+0x13c>)
 8000a8c:	4a3f      	ldr	r2, [pc, #252]	@ (8000b8c <MX_TIM1_Init+0x140>)
 8000a8e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 179;
 8000a90:	4b3d      	ldr	r3, [pc, #244]	@ (8000b88 <MX_TIM1_Init+0x13c>)
 8000a92:	22b3      	movs	r2, #179	@ 0xb3
 8000a94:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a96:	4b3c      	ldr	r3, [pc, #240]	@ (8000b88 <MX_TIM1_Init+0x13c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000a9c:	4b3a      	ldr	r3, [pc, #232]	@ (8000b88 <MX_TIM1_Init+0x13c>)
 8000a9e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000aa2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa4:	4b38      	ldr	r3, [pc, #224]	@ (8000b88 <MX_TIM1_Init+0x13c>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000aaa:	4b37      	ldr	r3, [pc, #220]	@ (8000b88 <MX_TIM1_Init+0x13c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab0:	4b35      	ldr	r3, [pc, #212]	@ (8000b88 <MX_TIM1_Init+0x13c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ab6:	4834      	ldr	r0, [pc, #208]	@ (8000b88 <MX_TIM1_Init+0x13c>)
 8000ab8:	f003 f81a 	bl	8003af0 <HAL_TIM_Base_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000ac2:	f000 f921 	bl	8000d08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ac6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aca:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000acc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	482d      	ldr	r0, [pc, #180]	@ (8000b88 <MX_TIM1_Init+0x13c>)
 8000ad4:	f003 fa3e 	bl	8003f54 <HAL_TIM_ConfigClockSource>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000ade:	f000 f913 	bl	8000d08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ae2:	4829      	ldr	r0, [pc, #164]	@ (8000b88 <MX_TIM1_Init+0x13c>)
 8000ae4:	f003 f853 	bl	8003b8e <HAL_TIM_PWM_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000aee:	f000 f90b 	bl	8000d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af2:	2300      	movs	r3, #0
 8000af4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af6:	2300      	movs	r3, #0
 8000af8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000afa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000afe:	4619      	mov	r1, r3
 8000b00:	4821      	ldr	r0, [pc, #132]	@ (8000b88 <MX_TIM1_Init+0x13c>)
 8000b02:	f003 fe05 	bl	8004710 <HAL_TIMEx_MasterConfigSynchronization>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000b0c:	f000 f8fc 	bl	8000d08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b10:	2360      	movs	r3, #96	@ 0x60
 8000b12:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 1000;
 8000b14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b18:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b22:	2300      	movs	r3, #0
 8000b24:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b26:	2300      	movs	r3, #0
 8000b28:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b32:	2208      	movs	r2, #8
 8000b34:	4619      	mov	r1, r3
 8000b36:	4814      	ldr	r0, [pc, #80]	@ (8000b88 <MX_TIM1_Init+0x13c>)
 8000b38:	f003 f94a 	bl	8003dd0 <HAL_TIM_PWM_ConfigChannel>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000b42:	f000 f8e1 	bl	8000d08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b46:	2300      	movs	r3, #0
 8000b48:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b56:	2300      	movs	r3, #0
 8000b58:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b5a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b5e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b60:	2300      	movs	r3, #0
 8000b62:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b64:	1d3b      	adds	r3, r7, #4
 8000b66:	4619      	mov	r1, r3
 8000b68:	4807      	ldr	r0, [pc, #28]	@ (8000b88 <MX_TIM1_Init+0x13c>)
 8000b6a:	f003 fe4d 	bl	8004808 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000b74:	f000 f8c8 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b78:	4803      	ldr	r0, [pc, #12]	@ (8000b88 <MX_TIM1_Init+0x13c>)
 8000b7a:	f000 fb51 	bl	8001220 <HAL_TIM_MspPostInit>

}
 8000b7e:	bf00      	nop
 8000b80:	3758      	adds	r7, #88	@ 0x58
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000198 	.word	0x20000198
 8000b8c:	40010000 	.word	0x40010000

08000b90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b94:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000b96:	4a12      	ldr	r2, [pc, #72]	@ (8000be0 <MX_USART2_UART_Init+0x50>)
 8000b98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b9a:	4b10      	ldr	r3, [pc, #64]	@ (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000b9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ba0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bae:	4b0b      	ldr	r3, [pc, #44]	@ (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bb4:	4b09      	ldr	r3, [pc, #36]	@ (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bba:	4b08      	ldr	r3, [pc, #32]	@ (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bc6:	4805      	ldr	r0, [pc, #20]	@ (8000bdc <MX_USART2_UART_Init+0x4c>)
 8000bc8:	f003 fe70 	bl	80048ac <HAL_UART_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bd2:	f000 f899 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200001e0 	.word	0x200001e0
 8000be0:	40004400 	.word	0x40004400

08000be4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	@ 0x28
 8000be8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	60da      	str	r2, [r3, #12]
 8000bf8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	4b3e      	ldr	r3, [pc, #248]	@ (8000cf8 <MX_GPIO_Init+0x114>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	4a3d      	ldr	r2, [pc, #244]	@ (8000cf8 <MX_GPIO_Init+0x114>)
 8000c04:	f043 0304 	orr.w	r3, r3, #4
 8000c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0a:	4b3b      	ldr	r3, [pc, #236]	@ (8000cf8 <MX_GPIO_Init+0x114>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	f003 0304 	and.w	r3, r3, #4
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	4b37      	ldr	r3, [pc, #220]	@ (8000cf8 <MX_GPIO_Init+0x114>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	4a36      	ldr	r2, [pc, #216]	@ (8000cf8 <MX_GPIO_Init+0x114>)
 8000c20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c26:	4b34      	ldr	r3, [pc, #208]	@ (8000cf8 <MX_GPIO_Init+0x114>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	60bb      	str	r3, [r7, #8]
 8000c36:	4b30      	ldr	r3, [pc, #192]	@ (8000cf8 <MX_GPIO_Init+0x114>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	4a2f      	ldr	r2, [pc, #188]	@ (8000cf8 <MX_GPIO_Init+0x114>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c42:	4b2d      	ldr	r3, [pc, #180]	@ (8000cf8 <MX_GPIO_Init+0x114>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	60bb      	str	r3, [r7, #8]
 8000c4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	4b29      	ldr	r3, [pc, #164]	@ (8000cf8 <MX_GPIO_Init+0x114>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c56:	4a28      	ldr	r2, [pc, #160]	@ (8000cf8 <MX_GPIO_Init+0x114>)
 8000c58:	f043 0308 	orr.w	r3, r3, #8
 8000c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5e:	4b26      	ldr	r3, [pc, #152]	@ (8000cf8 <MX_GPIO_Init+0x114>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c62:	f003 0308 	and.w	r3, r3, #8
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	603b      	str	r3, [r7, #0]
 8000c6e:	4b22      	ldr	r3, [pc, #136]	@ (8000cf8 <MX_GPIO_Init+0x114>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	4a21      	ldr	r2, [pc, #132]	@ (8000cf8 <MX_GPIO_Init+0x114>)
 8000c74:	f043 0302 	orr.w	r3, r3, #2
 8000c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf8 <MX_GPIO_Init+0x114>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	f003 0302 	and.w	r3, r3, #2
 8000c82:	603b      	str	r3, [r7, #0]
 8000c84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCP2515_CS_TX_GPIO_Port, MCP2515_CS_TX_Pin, GPIO_PIN_SET);
 8000c86:	2201      	movs	r2, #1
 8000c88:	2104      	movs	r1, #4
 8000c8a:	481c      	ldr	r0, [pc, #112]	@ (8000cfc <MX_GPIO_Init+0x118>)
 8000c8c:	f001 fb0c 	bl	80022a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCP2515_CS_RX_GPIO_Port, MCP2515_CS_RX_Pin, GPIO_PIN_SET);
 8000c90:	2201      	movs	r2, #1
 8000c92:	2140      	movs	r1, #64	@ 0x40
 8000c94:	481a      	ldr	r0, [pc, #104]	@ (8000d00 <MX_GPIO_Init+0x11c>)
 8000c96:	f001 fb07 	bl	80022a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c9a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ca0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000ca4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4814      	ldr	r0, [pc, #80]	@ (8000d04 <MX_GPIO_Init+0x120>)
 8000cb2:	f001 f965 	bl	8001f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCP2515_CS_TX_Pin */
  GPIO_InitStruct.Pin = MCP2515_CS_TX_Pin;
 8000cb6:	2304      	movs	r3, #4
 8000cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MCP2515_CS_TX_GPIO_Port, &GPIO_InitStruct);
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4619      	mov	r1, r3
 8000ccc:	480b      	ldr	r0, [pc, #44]	@ (8000cfc <MX_GPIO_Init+0x118>)
 8000cce:	f001 f957 	bl	8001f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCP2515_CS_RX_Pin */
  GPIO_InitStruct.Pin = MCP2515_CS_RX_Pin;
 8000cd2:	2340      	movs	r3, #64	@ 0x40
 8000cd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MCP2515_CS_RX_GPIO_Port, &GPIO_InitStruct);
 8000ce2:	f107 0314 	add.w	r3, r7, #20
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4805      	ldr	r0, [pc, #20]	@ (8000d00 <MX_GPIO_Init+0x11c>)
 8000cea:	f001 f949 	bl	8001f80 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000cee:	bf00      	nop
 8000cf0:	3728      	adds	r7, #40	@ 0x28
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40020c00 	.word	0x40020c00
 8000d00:	40020400 	.word	0x40020400
 8000d04:	40020800 	.word	0x40020800

08000d08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d0c:	b672      	cpsid	i
}
 8000d0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d10:	bf00      	nop
 8000d12:	e7fd      	b.n	8000d10 <Error_Handler+0x8>

08000d14 <MCP2515_Select>:
#include "mcp2515.h"
#include <string.h>

// Helper function to control CS pin
static void MCP2515_Select(MCP2515_Handle *hcan) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(hcan->cs_port, hcan->cs_pin, GPIO_PIN_RESET);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6858      	ldr	r0, [r3, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	891b      	ldrh	r3, [r3, #8]
 8000d24:	2200      	movs	r2, #0
 8000d26:	4619      	mov	r1, r3
 8000d28:	f001 fabe 	bl	80022a8 <HAL_GPIO_WritePin>
}
 8000d2c:	bf00      	nop
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <MCP2515_Deselect>:

static void MCP2515_Deselect(MCP2515_Handle *hcan) {
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(hcan->cs_port, hcan->cs_pin, GPIO_PIN_SET);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6858      	ldr	r0, [r3, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	891b      	ldrh	r3, [r3, #8]
 8000d44:	2201      	movs	r2, #1
 8000d46:	4619      	mov	r1, r3
 8000d48:	f001 faae 	bl	80022a8 <HAL_GPIO_WritePin>
}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <MCP2515_WriteReg>:

// Write to MCP2515 register
void MCP2515_WriteReg(MCP2515_Handle *hcan, uint8_t reg, uint8_t value) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	70fb      	strb	r3, [r7, #3]
 8000d60:	4613      	mov	r3, r2
 8000d62:	70bb      	strb	r3, [r7, #2]
    uint8_t tx_buf[3] = {MCP2515_WRITE, reg, value};
 8000d64:	2302      	movs	r3, #2
 8000d66:	733b      	strb	r3, [r7, #12]
 8000d68:	78fb      	ldrb	r3, [r7, #3]
 8000d6a:	737b      	strb	r3, [r7, #13]
 8000d6c:	78bb      	ldrb	r3, [r7, #2]
 8000d6e:	73bb      	strb	r3, [r7, #14]
    MCP2515_Select(hcan);
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f7ff ffcf 	bl	8000d14 <MCP2515_Select>
    HAL_SPI_Transmit(hcan->hspi, tx_buf, 3, HAL_MAX_DELAY);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6818      	ldr	r0, [r3, #0]
 8000d7a:	f107 010c 	add.w	r1, r7, #12
 8000d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d82:	2203      	movs	r2, #3
 8000d84:	f002 f96b 	bl	800305e <HAL_SPI_Transmit>
    MCP2515_Deselect(hcan);
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f7ff ffd3 	bl	8000d34 <MCP2515_Deselect>
}
 8000d8e:	bf00      	nop
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <MCP2515_ReadReg>:

// Read from MCP2515 register
uint8_t MCP2515_ReadReg(MCP2515_Handle *hcan, uint8_t reg) {
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b084      	sub	sp, #16
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
 8000d9e:	460b      	mov	r3, r1
 8000da0:	70fb      	strb	r3, [r7, #3]
    uint8_t tx_buf[2] = {MCP2515_READ, reg};
 8000da2:	2303      	movs	r3, #3
 8000da4:	733b      	strb	r3, [r7, #12]
 8000da6:	78fb      	ldrb	r3, [r7, #3]
 8000da8:	737b      	strb	r3, [r7, #13]
    uint8_t rx_buf = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	72fb      	strb	r3, [r7, #11]
    MCP2515_Select(hcan);
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f7ff ffb0 	bl	8000d14 <MCP2515_Select>
    HAL_SPI_Transmit(hcan->hspi, tx_buf, 2, HAL_MAX_DELAY);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6818      	ldr	r0, [r3, #0]
 8000db8:	f107 010c 	add.w	r1, r7, #12
 8000dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc0:	2202      	movs	r2, #2
 8000dc2:	f002 f94c 	bl	800305e <HAL_SPI_Transmit>
    HAL_SPI_Receive(hcan->hspi, &rx_buf, 1, HAL_MAX_DELAY);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6818      	ldr	r0, [r3, #0]
 8000dca:	f107 010b 	add.w	r1, r7, #11
 8000dce:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	f002 fa87 	bl	80032e6 <HAL_SPI_Receive>
    MCP2515_Deselect(hcan);
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f7ff ffab 	bl	8000d34 <MCP2515_Deselect>
    return rx_buf;
 8000dde:	7afb      	ldrb	r3, [r7, #11]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3710      	adds	r7, #16
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <MCP2515_Reset>:

// Reset MCP2515
static void MCP2515_Reset(MCP2515_Handle *hcan) {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
    uint8_t tx_buf = MCP2515_RESET;
 8000df0:	23c0      	movs	r3, #192	@ 0xc0
 8000df2:	73fb      	strb	r3, [r7, #15]
    MCP2515_Select(hcan);
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f7ff ff8d 	bl	8000d14 <MCP2515_Select>
    HAL_SPI_Transmit(hcan->hspi, &tx_buf, 1, HAL_MAX_DELAY);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6818      	ldr	r0, [r3, #0]
 8000dfe:	f107 010f 	add.w	r1, r7, #15
 8000e02:	f04f 33ff 	mov.w	r3, #4294967295
 8000e06:	2201      	movs	r2, #1
 8000e08:	f002 f929 	bl	800305e <HAL_SPI_Transmit>
    MCP2515_Deselect(hcan);
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f7ff ff91 	bl	8000d34 <MCP2515_Deselect>
    HAL_Delay(10); // Wait for reset
 8000e12:	200a      	movs	r0, #10
 8000e14:	f000 fb9a 	bl	800154c <HAL_Delay>
}
 8000e18:	bf00      	nop
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <MCP2515_SetMode>:

// Set MCP2515 mode
void MCP2515_SetMode(MCP2515_Handle *hcan, uint8_t mode) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	460b      	mov	r3, r1
 8000e2a:	70fb      	strb	r3, [r7, #3]
    MCP2515_WriteReg(hcan, MCP2515_CANCTRL, mode);
 8000e2c:	78fb      	ldrb	r3, [r7, #3]
 8000e2e:	461a      	mov	r2, r3
 8000e30:	210f      	movs	r1, #15
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f7ff ff8e 	bl	8000d54 <MCP2515_WriteReg>
    HAL_Delay(1);
 8000e38:	2001      	movs	r0, #1
 8000e3a:	f000 fb87 	bl	800154c <HAL_Delay>
    while ((MCP2515_ReadReg(hcan, MCP2515_CANSTAT) & 0xE0) != mode) {
 8000e3e:	e002      	b.n	8000e46 <MCP2515_SetMode+0x26>
        HAL_Delay(1); // Wait for mode change
 8000e40:	2001      	movs	r0, #1
 8000e42:	f000 fb83 	bl	800154c <HAL_Delay>
    while ((MCP2515_ReadReg(hcan, MCP2515_CANSTAT) & 0xE0) != mode) {
 8000e46:	210e      	movs	r1, #14
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f7ff ffa4 	bl	8000d96 <MCP2515_ReadReg>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	f003 02e0 	and.w	r2, r3, #224	@ 0xe0
 8000e54:	78fb      	ldrb	r3, [r7, #3]
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d1f2      	bne.n	8000e40 <MCP2515_SetMode+0x20>
    }
}
 8000e5a:	bf00      	nop
 8000e5c:	bf00      	nop
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <MCP2515_Init>:

// Initialize MCP2515
void MCP2515_Init(MCP2515_Handle *hcan, uint32_t bitrate) {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
    // Reset MCP2515
    MCP2515_Reset(hcan);
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f7ff ffba 	bl	8000de8 <MCP2515_Reset>

    // Enter configuration mode
    MCP2515_SetMode(hcan, MCP2515_MODE_CONFIG);
 8000e74:	2180      	movs	r1, #128	@ 0x80
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff ffd2 	bl	8000e20 <MCP2515_SetMode>

    // Configure bitrate (500 kbps @ 16 MHz MCP2515 clock)
    if (bitrate == 500000) {
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	4a17      	ldr	r2, [pc, #92]	@ (8000edc <MCP2515_Init+0x78>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d10e      	bne.n	8000ea2 <MCP2515_Init+0x3e>
        MCP2515_WriteReg(hcan, MCP2515_CNF1, 0x01); // SJW=1, BRP=1
 8000e84:	2201      	movs	r2, #1
 8000e86:	212a      	movs	r1, #42	@ 0x2a
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f7ff ff63 	bl	8000d54 <MCP2515_WriteReg>
        MCP2515_WriteReg(hcan, MCP2515_CNF2, 0xB1); // BTLMODE=1, PHSEG1=6, PRSEG=1
 8000e8e:	22b1      	movs	r2, #177	@ 0xb1
 8000e90:	2129      	movs	r1, #41	@ 0x29
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f7ff ff5e 	bl	8000d54 <MCP2515_WriteReg>
        MCP2515_WriteReg(hcan, MCP2515_CNF3, 0x05); // PHSEG2=6
 8000e98:	2205      	movs	r2, #5
 8000e9a:	2128      	movs	r1, #40	@ 0x28
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f7ff ff59 	bl	8000d54 <MCP2515_WriteReg>
    }

    // Configure RX buffer (receive all messages)
    MCP2515_WriteReg(hcan, MCP2515_RXB0CTRL, 0x60); // Receive all
 8000ea2:	2260      	movs	r2, #96	@ 0x60
 8000ea4:	2160      	movs	r1, #96	@ 0x60
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f7ff ff54 	bl	8000d54 <MCP2515_WriteReg>
    MCP2515_WriteReg(hcan, MCP2515_RXB0SIDH, 0x00); // Filter ID 0
 8000eac:	2200      	movs	r2, #0
 8000eae:	2161      	movs	r1, #97	@ 0x61
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f7ff ff4f 	bl	8000d54 <MCP2515_WriteReg>
    MCP2515_WriteReg(hcan, MCP2515_RXB0SIDL, 0x00);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2162      	movs	r1, #98	@ 0x62
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff ff4a 	bl	8000d54 <MCP2515_WriteReg>

    // Enable interrupts (optional, for polling we disable)
    MCP2515_WriteReg(hcan, MCP2515_CANINTE, 0x00); // No interrupts
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	212b      	movs	r1, #43	@ 0x2b
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f7ff ff45 	bl	8000d54 <MCP2515_WriteReg>

    // Enter normal mode
    MCP2515_SetMode(hcan, MCP2515_MODE_NORMAL);
 8000eca:	2100      	movs	r1, #0
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f7ff ffa7 	bl	8000e20 <MCP2515_SetMode>
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	0007a120 	.word	0x0007a120

08000ee0 <MCP2515_Transmit>:

// Transmit CAN message
void MCP2515_Transmit(MCP2515_Handle *hcan, CAN_Message *msg) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
    // Write message to TXB0
    MCP2515_WriteReg(hcan, MCP2515_TXB0SIDH, (msg->id >> 3));           // SIDH
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	08db      	lsrs	r3, r3, #3
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	2131      	movs	r1, #49	@ 0x31
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f7ff ff2c 	bl	8000d54 <MCP2515_WriteReg>
    MCP2515_WriteReg(hcan, MCP2515_TXB0SIDL, ((msg->id & 0x07) << 5));  // SIDL
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	015b      	lsls	r3, r3, #5
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	461a      	mov	r2, r3
 8000f08:	2132      	movs	r1, #50	@ 0x32
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff ff22 	bl	8000d54 <MCP2515_WriteReg>
    MCP2515_WriteReg(hcan, MCP2515_TXB0DLC, msg->dlc & 0x0F);           // DLC
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	791b      	ldrb	r3, [r3, #4]
 8000f14:	f003 030f 	and.w	r3, r3, #15
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	2135      	movs	r1, #53	@ 0x35
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f7ff ff18 	bl	8000d54 <MCP2515_WriteReg>
    for (uint8_t i = 0; i < msg->dlc; i++) {
 8000f24:	2300      	movs	r3, #0
 8000f26:	73fb      	strb	r3, [r7, #15]
 8000f28:	e00d      	b.n	8000f46 <MCP2515_Transmit+0x66>
        MCP2515_WriteReg(hcan, MCP2515_TXB0D0 + i, msg->data[i]);       // Data
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	3336      	adds	r3, #54	@ 0x36
 8000f2e:	b2d9      	uxtb	r1, r3
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
 8000f32:	683a      	ldr	r2, [r7, #0]
 8000f34:	4413      	add	r3, r2
 8000f36:	795b      	ldrb	r3, [r3, #5]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff ff0a 	bl	8000d54 <MCP2515_WriteReg>
    for (uint8_t i = 0; i < msg->dlc; i++) {
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
 8000f42:	3301      	adds	r3, #1
 8000f44:	73fb      	strb	r3, [r7, #15]
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	791b      	ldrb	r3, [r3, #4]
 8000f4a:	7bfa      	ldrb	r2, [r7, #15]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d3ec      	bcc.n	8000f2a <MCP2515_Transmit+0x4a>
    }

    // Request transmission
    MCP2515_WriteReg(hcan, MCP2515_TXB0CTRL, 0x08); // Set TXREQ
 8000f50:	2208      	movs	r2, #8
 8000f52:	2130      	movs	r1, #48	@ 0x30
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f7ff fefd 	bl	8000d54 <MCP2515_WriteReg>
}
 8000f5a:	bf00      	nop
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <MCP2515_Receive>:

// Receive CAN message (polling)
uint8_t MCP2515_Receive(MCP2515_Handle *hcan, CAN_Message *msg) {
 8000f62:	b590      	push	{r4, r7, lr}
 8000f64:	b085      	sub	sp, #20
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
 8000f6a:	6039      	str	r1, [r7, #0]
    // Check RXB0 status
    uint8_t status = MCP2515_ReadReg(hcan, MCP2515_CANINTF);
 8000f6c:	212c      	movs	r1, #44	@ 0x2c
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff ff11 	bl	8000d96 <MCP2515_ReadReg>
 8000f74:	4603      	mov	r3, r0
 8000f76:	73bb      	strb	r3, [r7, #14]
    if (!(status & MCP2515_INT_RX0IF)) {
 8000f78:	7bbb      	ldrb	r3, [r7, #14]
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d101      	bne.n	8000f86 <MCP2515_Receive+0x24>
        return 0; // No message
 8000f82:	2300      	movs	r3, #0
 8000f84:	e03c      	b.n	8001000 <MCP2515_Receive+0x9e>
    }

    // Read message
    msg->id = (MCP2515_ReadReg(hcan, MCP2515_RXB0SIDH) << 3) |
 8000f86:	2161      	movs	r1, #97	@ 0x61
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f7ff ff04 	bl	8000d96 <MCP2515_ReadReg>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	00dc      	lsls	r4, r3, #3
              (MCP2515_ReadReg(hcan, MCP2515_RXB0SIDL) >> 5);
 8000f92:	2162      	movs	r1, #98	@ 0x62
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f7ff fefe 	bl	8000d96 <MCP2515_ReadReg>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	095b      	lsrs	r3, r3, #5
 8000f9e:	b2db      	uxtb	r3, r3
    msg->id = (MCP2515_ReadReg(hcan, MCP2515_RXB0SIDH) << 3) |
 8000fa0:	4323      	orrs	r3, r4
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	601a      	str	r2, [r3, #0]
    msg->dlc = MCP2515_ReadReg(hcan, MCP2515_RXB0DLC) & 0x0F;
 8000fa8:	2165      	movs	r1, #101	@ 0x65
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff fef3 	bl	8000d96 <MCP2515_ReadReg>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	f003 030f 	and.w	r3, r3, #15
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	711a      	strb	r2, [r3, #4]
    for (uint8_t i = 0; i < msg->dlc; i++) {
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	73fb      	strb	r3, [r7, #15]
 8000fc0:	e00f      	b.n	8000fe2 <MCP2515_Receive+0x80>
        msg->data[i] = MCP2515_ReadReg(hcan, MCP2515_RXB0D0 + i);
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
 8000fc4:	3366      	adds	r3, #102	@ 0x66
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	7bfc      	ldrb	r4, [r7, #15]
 8000fca:	4619      	mov	r1, r3
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f7ff fee2 	bl	8000d96 <MCP2515_ReadReg>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	4423      	add	r3, r4
 8000fda:	715a      	strb	r2, [r3, #5]
    for (uint8_t i = 0; i < msg->dlc; i++) {
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	73fb      	strb	r3, [r7, #15]
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	791b      	ldrb	r3, [r3, #4]
 8000fe6:	7bfa      	ldrb	r2, [r7, #15]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d3ea      	bcc.n	8000fc2 <MCP2515_Receive+0x60>
    }

    // Clear RX interrupt flag
    MCP2515_WriteReg(hcan, MCP2515_CANINTF, status & ~MCP2515_INT_RX0IF);
 8000fec:	7bbb      	ldrb	r3, [r7, #14]
 8000fee:	f023 0301 	bic.w	r3, r3, #1
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	212c      	movs	r1, #44	@ 0x2c
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff feab 	bl	8000d54 <MCP2515_WriteReg>
    return 1; // Message received
 8000ffe:	2301      	movs	r3, #1
 8001000:	4618      	mov	r0, r3
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	bd90      	pop	{r4, r7, pc}

08001008 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	607b      	str	r3, [r7, #4]
 8001012:	4b10      	ldr	r3, [pc, #64]	@ (8001054 <HAL_MspInit+0x4c>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001016:	4a0f      	ldr	r2, [pc, #60]	@ (8001054 <HAL_MspInit+0x4c>)
 8001018:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800101c:	6453      	str	r3, [r2, #68]	@ 0x44
 800101e:	4b0d      	ldr	r3, [pc, #52]	@ (8001054 <HAL_MspInit+0x4c>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001022:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	603b      	str	r3, [r7, #0]
 800102e:	4b09      	ldr	r3, [pc, #36]	@ (8001054 <HAL_MspInit+0x4c>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001032:	4a08      	ldr	r2, [pc, #32]	@ (8001054 <HAL_MspInit+0x4c>)
 8001034:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001038:	6413      	str	r3, [r2, #64]	@ 0x40
 800103a:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <HAL_MspInit+0x4c>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001042:	603b      	str	r3, [r7, #0]
 8001044:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001046:	2007      	movs	r0, #7
 8001048:	f000 ff66 	bl	8001f18 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40023800 	.word	0x40023800

08001058 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08a      	sub	sp, #40	@ 0x28
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a17      	ldr	r2, [pc, #92]	@ (80010d4 <HAL_ADC_MspInit+0x7c>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d127      	bne.n	80010ca <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	613b      	str	r3, [r7, #16]
 800107e:	4b16      	ldr	r3, [pc, #88]	@ (80010d8 <HAL_ADC_MspInit+0x80>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001082:	4a15      	ldr	r2, [pc, #84]	@ (80010d8 <HAL_ADC_MspInit+0x80>)
 8001084:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001088:	6453      	str	r3, [r2, #68]	@ 0x44
 800108a:	4b13      	ldr	r3, [pc, #76]	@ (80010d8 <HAL_ADC_MspInit+0x80>)
 800108c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800108e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	4b0f      	ldr	r3, [pc, #60]	@ (80010d8 <HAL_ADC_MspInit+0x80>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	4a0e      	ldr	r2, [pc, #56]	@ (80010d8 <HAL_ADC_MspInit+0x80>)
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a6:	4b0c      	ldr	r3, [pc, #48]	@ (80010d8 <HAL_ADC_MspInit+0x80>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010b2:	2301      	movs	r3, #1
 80010b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010b6:	2303      	movs	r3, #3
 80010b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010be:	f107 0314 	add.w	r3, r7, #20
 80010c2:	4619      	mov	r1, r3
 80010c4:	4805      	ldr	r0, [pc, #20]	@ (80010dc <HAL_ADC_MspInit+0x84>)
 80010c6:	f000 ff5b 	bl	8001f80 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80010ca:	bf00      	nop
 80010cc:	3728      	adds	r7, #40	@ 0x28
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40012000 	.word	0x40012000
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40020000 	.word	0x40020000

080010e0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08c      	sub	sp, #48	@ 0x30
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	f107 031c 	add.w	r3, r7, #28
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a32      	ldr	r2, [pc, #200]	@ (80011c8 <HAL_SPI_MspInit+0xe8>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d12c      	bne.n	800115c <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	61bb      	str	r3, [r7, #24]
 8001106:	4b31      	ldr	r3, [pc, #196]	@ (80011cc <HAL_SPI_MspInit+0xec>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800110a:	4a30      	ldr	r2, [pc, #192]	@ (80011cc <HAL_SPI_MspInit+0xec>)
 800110c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001110:	6453      	str	r3, [r2, #68]	@ 0x44
 8001112:	4b2e      	ldr	r3, [pc, #184]	@ (80011cc <HAL_SPI_MspInit+0xec>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001116:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800111a:	61bb      	str	r3, [r7, #24]
 800111c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
 8001122:	4b2a      	ldr	r3, [pc, #168]	@ (80011cc <HAL_SPI_MspInit+0xec>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001126:	4a29      	ldr	r2, [pc, #164]	@ (80011cc <HAL_SPI_MspInit+0xec>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	6313      	str	r3, [r2, #48]	@ 0x30
 800112e:	4b27      	ldr	r3, [pc, #156]	@ (80011cc <HAL_SPI_MspInit+0xec>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	617b      	str	r3, [r7, #20]
 8001138:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800113a:	23e0      	movs	r3, #224	@ 0xe0
 800113c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113e:	2302      	movs	r3, #2
 8001140:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001146:	2303      	movs	r3, #3
 8001148:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800114a:	2305      	movs	r3, #5
 800114c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	4619      	mov	r1, r3
 8001154:	481e      	ldr	r0, [pc, #120]	@ (80011d0 <HAL_SPI_MspInit+0xf0>)
 8001156:	f000 ff13 	bl	8001f80 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 800115a:	e031      	b.n	80011c0 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI3)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a1c      	ldr	r2, [pc, #112]	@ (80011d4 <HAL_SPI_MspInit+0xf4>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d12c      	bne.n	80011c0 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	4b18      	ldr	r3, [pc, #96]	@ (80011cc <HAL_SPI_MspInit+0xec>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116e:	4a17      	ldr	r2, [pc, #92]	@ (80011cc <HAL_SPI_MspInit+0xec>)
 8001170:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001174:	6413      	str	r3, [r2, #64]	@ 0x40
 8001176:	4b15      	ldr	r3, [pc, #84]	@ (80011cc <HAL_SPI_MspInit+0xec>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	4b11      	ldr	r3, [pc, #68]	@ (80011cc <HAL_SPI_MspInit+0xec>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	4a10      	ldr	r2, [pc, #64]	@ (80011cc <HAL_SPI_MspInit+0xec>)
 800118c:	f043 0304 	orr.w	r3, r3, #4
 8001190:	6313      	str	r3, [r2, #48]	@ 0x30
 8001192:	4b0e      	ldr	r3, [pc, #56]	@ (80011cc <HAL_SPI_MspInit+0xec>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	f003 0304 	and.w	r3, r3, #4
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800119e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80011a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a4:	2302      	movs	r3, #2
 80011a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ac:	2303      	movs	r3, #3
 80011ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011b0:	2306      	movs	r3, #6
 80011b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011b4:	f107 031c 	add.w	r3, r7, #28
 80011b8:	4619      	mov	r1, r3
 80011ba:	4807      	ldr	r0, [pc, #28]	@ (80011d8 <HAL_SPI_MspInit+0xf8>)
 80011bc:	f000 fee0 	bl	8001f80 <HAL_GPIO_Init>
}
 80011c0:	bf00      	nop
 80011c2:	3730      	adds	r7, #48	@ 0x30
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40013000 	.word	0x40013000
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40020000 	.word	0x40020000
 80011d4:	40003c00 	.word	0x40003c00
 80011d8:	40020800 	.word	0x40020800

080011dc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001218 <HAL_TIM_Base_MspInit+0x3c>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d10d      	bne.n	800120a <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	4b0a      	ldr	r3, [pc, #40]	@ (800121c <HAL_TIM_Base_MspInit+0x40>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011f6:	4a09      	ldr	r2, [pc, #36]	@ (800121c <HAL_TIM_Base_MspInit+0x40>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80011fe:	4b07      	ldr	r3, [pc, #28]	@ (800121c <HAL_TIM_Base_MspInit+0x40>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800120a:	bf00      	nop
 800120c:	3714      	adds	r7, #20
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	40010000 	.word	0x40010000
 800121c:	40023800 	.word	0x40023800

08001220 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b088      	sub	sp, #32
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 030c 	add.w	r3, r7, #12
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a12      	ldr	r2, [pc, #72]	@ (8001288 <HAL_TIM_MspPostInit+0x68>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d11e      	bne.n	8001280 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	60bb      	str	r3, [r7, #8]
 8001246:	4b11      	ldr	r3, [pc, #68]	@ (800128c <HAL_TIM_MspPostInit+0x6c>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124a:	4a10      	ldr	r2, [pc, #64]	@ (800128c <HAL_TIM_MspPostInit+0x6c>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	6313      	str	r3, [r2, #48]	@ 0x30
 8001252:	4b0e      	ldr	r3, [pc, #56]	@ (800128c <HAL_TIM_MspPostInit+0x6c>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800125e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001262:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001264:	2302      	movs	r3, #2
 8001266:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126c:	2300      	movs	r3, #0
 800126e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001270:	2301      	movs	r3, #1
 8001272:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001274:	f107 030c 	add.w	r3, r7, #12
 8001278:	4619      	mov	r1, r3
 800127a:	4805      	ldr	r0, [pc, #20]	@ (8001290 <HAL_TIM_MspPostInit+0x70>)
 800127c:	f000 fe80 	bl	8001f80 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001280:	bf00      	nop
 8001282:	3720      	adds	r7, #32
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40010000 	.word	0x40010000
 800128c:	40023800 	.word	0x40023800
 8001290:	40020000 	.word	0x40020000

08001294 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08a      	sub	sp, #40	@ 0x28
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a19      	ldr	r2, [pc, #100]	@ (8001318 <HAL_UART_MspInit+0x84>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d12b      	bne.n	800130e <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	613b      	str	r3, [r7, #16]
 80012ba:	4b18      	ldr	r3, [pc, #96]	@ (800131c <HAL_UART_MspInit+0x88>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012be:	4a17      	ldr	r2, [pc, #92]	@ (800131c <HAL_UART_MspInit+0x88>)
 80012c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012c6:	4b15      	ldr	r3, [pc, #84]	@ (800131c <HAL_UART_MspInit+0x88>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ce:	613b      	str	r3, [r7, #16]
 80012d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	4b11      	ldr	r3, [pc, #68]	@ (800131c <HAL_UART_MspInit+0x88>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012da:	4a10      	ldr	r2, [pc, #64]	@ (800131c <HAL_UART_MspInit+0x88>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e2:	4b0e      	ldr	r3, [pc, #56]	@ (800131c <HAL_UART_MspInit+0x88>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012ee:	230c      	movs	r3, #12
 80012f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f2:	2302      	movs	r3, #2
 80012f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fa:	2303      	movs	r3, #3
 80012fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012fe:	2307      	movs	r3, #7
 8001300:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001302:	f107 0314 	add.w	r3, r7, #20
 8001306:	4619      	mov	r1, r3
 8001308:	4805      	ldr	r0, [pc, #20]	@ (8001320 <HAL_UART_MspInit+0x8c>)
 800130a:	f000 fe39 	bl	8001f80 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800130e:	bf00      	nop
 8001310:	3728      	adds	r7, #40	@ 0x28
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40004400 	.word	0x40004400
 800131c:	40023800 	.word	0x40023800
 8001320:	40020000 	.word	0x40020000

08001324 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001328:	bf00      	nop
 800132a:	e7fd      	b.n	8001328 <NMI_Handler+0x4>

0800132c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001330:	bf00      	nop
 8001332:	e7fd      	b.n	8001330 <HardFault_Handler+0x4>

08001334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001338:	bf00      	nop
 800133a:	e7fd      	b.n	8001338 <MemManage_Handler+0x4>

0800133c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001340:	bf00      	nop
 8001342:	e7fd      	b.n	8001340 <BusFault_Handler+0x4>

08001344 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001348:	bf00      	nop
 800134a:	e7fd      	b.n	8001348 <UsageFault_Handler+0x4>

0800134c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800137a:	f000 f8c7 	bl	800150c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800138c:	4a14      	ldr	r2, [pc, #80]	@ (80013e0 <_sbrk+0x5c>)
 800138e:	4b15      	ldr	r3, [pc, #84]	@ (80013e4 <_sbrk+0x60>)
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001398:	4b13      	ldr	r3, [pc, #76]	@ (80013e8 <_sbrk+0x64>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d102      	bne.n	80013a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013a0:	4b11      	ldr	r3, [pc, #68]	@ (80013e8 <_sbrk+0x64>)
 80013a2:	4a12      	ldr	r2, [pc, #72]	@ (80013ec <_sbrk+0x68>)
 80013a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013a6:	4b10      	ldr	r3, [pc, #64]	@ (80013e8 <_sbrk+0x64>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4413      	add	r3, r2
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d207      	bcs.n	80013c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013b4:	f003 feb0 	bl	8005118 <__errno>
 80013b8:	4603      	mov	r3, r0
 80013ba:	220c      	movs	r2, #12
 80013bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013be:	f04f 33ff 	mov.w	r3, #4294967295
 80013c2:	e009      	b.n	80013d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013c4:	4b08      	ldr	r3, [pc, #32]	@ (80013e8 <_sbrk+0x64>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ca:	4b07      	ldr	r3, [pc, #28]	@ (80013e8 <_sbrk+0x64>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4413      	add	r3, r2
 80013d2:	4a05      	ldr	r2, [pc, #20]	@ (80013e8 <_sbrk+0x64>)
 80013d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013d6:	68fb      	ldr	r3, [r7, #12]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3718      	adds	r7, #24
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20020000 	.word	0x20020000
 80013e4:	00000400 	.word	0x00000400
 80013e8:	20000268 	.word	0x20000268
 80013ec:	200003b8 	.word	0x200003b8

080013f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013f4:	4b06      	ldr	r3, [pc, #24]	@ (8001410 <SystemInit+0x20>)
 80013f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013fa:	4a05      	ldr	r2, [pc, #20]	@ (8001410 <SystemInit+0x20>)
 80013fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001400:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001414:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800144c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001418:	f7ff ffea 	bl	80013f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800141c:	480c      	ldr	r0, [pc, #48]	@ (8001450 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800141e:	490d      	ldr	r1, [pc, #52]	@ (8001454 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001420:	4a0d      	ldr	r2, [pc, #52]	@ (8001458 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001424:	e002      	b.n	800142c <LoopCopyDataInit>

08001426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800142a:	3304      	adds	r3, #4

0800142c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800142c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800142e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001430:	d3f9      	bcc.n	8001426 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001432:	4a0a      	ldr	r2, [pc, #40]	@ (800145c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001434:	4c0a      	ldr	r4, [pc, #40]	@ (8001460 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001438:	e001      	b.n	800143e <LoopFillZerobss>

0800143a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800143a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800143c:	3204      	adds	r2, #4

0800143e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800143e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001440:	d3fb      	bcc.n	800143a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001442:	f003 fe6f 	bl	8005124 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001446:	f7ff f92b 	bl	80006a0 <main>
  bx  lr    
 800144a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800144c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001454:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001458:	08005b4c 	.word	0x08005b4c
  ldr r2, =_sbss
 800145c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001460:	200003b8 	.word	0x200003b8

08001464 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001464:	e7fe      	b.n	8001464 <ADC_IRQHandler>
	...

08001468 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800146c:	4b0e      	ldr	r3, [pc, #56]	@ (80014a8 <HAL_Init+0x40>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a0d      	ldr	r2, [pc, #52]	@ (80014a8 <HAL_Init+0x40>)
 8001472:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001476:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001478:	4b0b      	ldr	r3, [pc, #44]	@ (80014a8 <HAL_Init+0x40>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a0a      	ldr	r2, [pc, #40]	@ (80014a8 <HAL_Init+0x40>)
 800147e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001482:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001484:	4b08      	ldr	r3, [pc, #32]	@ (80014a8 <HAL_Init+0x40>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a07      	ldr	r2, [pc, #28]	@ (80014a8 <HAL_Init+0x40>)
 800148a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800148e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001490:	2003      	movs	r0, #3
 8001492:	f000 fd41 	bl	8001f18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001496:	2000      	movs	r0, #0
 8001498:	f000 f808 	bl	80014ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800149c:	f7ff fdb4 	bl	8001008 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40023c00 	.word	0x40023c00

080014ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014b4:	4b12      	ldr	r3, [pc, #72]	@ (8001500 <HAL_InitTick+0x54>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	4b12      	ldr	r3, [pc, #72]	@ (8001504 <HAL_InitTick+0x58>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	4619      	mov	r1, r3
 80014be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ca:	4618      	mov	r0, r3
 80014cc:	f000 fd4b 	bl	8001f66 <HAL_SYSTICK_Config>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e00e      	b.n	80014f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2b0f      	cmp	r3, #15
 80014de:	d80a      	bhi.n	80014f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014e0:	2200      	movs	r2, #0
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	f04f 30ff 	mov.w	r0, #4294967295
 80014e8:	f000 fd21 	bl	8001f2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014ec:	4a06      	ldr	r2, [pc, #24]	@ (8001508 <HAL_InitTick+0x5c>)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014f2:	2300      	movs	r3, #0
 80014f4:	e000      	b.n	80014f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20000028 	.word	0x20000028
 8001504:	20000030 	.word	0x20000030
 8001508:	2000002c 	.word	0x2000002c

0800150c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001510:	4b06      	ldr	r3, [pc, #24]	@ (800152c <HAL_IncTick+0x20>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	461a      	mov	r2, r3
 8001516:	4b06      	ldr	r3, [pc, #24]	@ (8001530 <HAL_IncTick+0x24>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4413      	add	r3, r2
 800151c:	4a04      	ldr	r2, [pc, #16]	@ (8001530 <HAL_IncTick+0x24>)
 800151e:	6013      	str	r3, [r2, #0]
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	20000030 	.word	0x20000030
 8001530:	2000026c 	.word	0x2000026c

08001534 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  return uwTick;
 8001538:	4b03      	ldr	r3, [pc, #12]	@ (8001548 <HAL_GetTick+0x14>)
 800153a:	681b      	ldr	r3, [r3, #0]
}
 800153c:	4618      	mov	r0, r3
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	2000026c 	.word	0x2000026c

0800154c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001554:	f7ff ffee 	bl	8001534 <HAL_GetTick>
 8001558:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001564:	d005      	beq.n	8001572 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001566:	4b0a      	ldr	r3, [pc, #40]	@ (8001590 <HAL_Delay+0x44>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	461a      	mov	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4413      	add	r3, r2
 8001570:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001572:	bf00      	nop
 8001574:	f7ff ffde 	bl	8001534 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	429a      	cmp	r2, r3
 8001582:	d8f7      	bhi.n	8001574 <HAL_Delay+0x28>
  {
  }
}
 8001584:	bf00      	nop
 8001586:	bf00      	nop
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000030 	.word	0x20000030

08001594 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800159c:	2300      	movs	r3, #0
 800159e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e033      	b.n	8001612 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d109      	bne.n	80015c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff fd50 	bl	8001058 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ca:	f003 0310 	and.w	r3, r3, #16
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d118      	bne.n	8001604 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80015da:	f023 0302 	bic.w	r3, r3, #2
 80015de:	f043 0202 	orr.w	r2, r3, #2
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 fae8 	bl	8001bbc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f6:	f023 0303 	bic.w	r3, r3, #3
 80015fa:	f043 0201 	orr.w	r2, r3, #1
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	641a      	str	r2, [r3, #64]	@ 0x40
 8001602:	e001      	b.n	8001608 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001610:	7bfb      	ldrb	r3, [r7, #15]
}
 8001612:	4618      	mov	r0, r3
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001624:	2300      	movs	r3, #0
 8001626:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800162e:	2b01      	cmp	r3, #1
 8001630:	d101      	bne.n	8001636 <HAL_ADC_Start+0x1a>
 8001632:	2302      	movs	r3, #2
 8001634:	e0b2      	b.n	800179c <HAL_ADC_Start+0x180>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2201      	movs	r2, #1
 800163a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	2b01      	cmp	r3, #1
 800164a:	d018      	beq.n	800167e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	689a      	ldr	r2, [r3, #8]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f042 0201 	orr.w	r2, r2, #1
 800165a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800165c:	4b52      	ldr	r3, [pc, #328]	@ (80017a8 <HAL_ADC_Start+0x18c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a52      	ldr	r2, [pc, #328]	@ (80017ac <HAL_ADC_Start+0x190>)
 8001662:	fba2 2303 	umull	r2, r3, r2, r3
 8001666:	0c9a      	lsrs	r2, r3, #18
 8001668:	4613      	mov	r3, r2
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	4413      	add	r3, r2
 800166e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001670:	e002      	b.n	8001678 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	3b01      	subs	r3, #1
 8001676:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f9      	bne.n	8001672 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	2b01      	cmp	r3, #1
 800168a:	d17a      	bne.n	8001782 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001690:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001694:	f023 0301 	bic.w	r3, r3, #1
 8001698:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d007      	beq.n	80016be <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80016b6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80016ca:	d106      	bne.n	80016da <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016d0:	f023 0206 	bic.w	r2, r3, #6
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	645a      	str	r2, [r3, #68]	@ 0x44
 80016d8:	e002      	b.n	80016e0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016e8:	4b31      	ldr	r3, [pc, #196]	@ (80017b0 <HAL_ADC_Start+0x194>)
 80016ea:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80016f4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f003 031f 	and.w	r3, r3, #31
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d12a      	bne.n	8001758 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a2b      	ldr	r2, [pc, #172]	@ (80017b4 <HAL_ADC_Start+0x198>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d015      	beq.n	8001738 <HAL_ADC_Start+0x11c>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a29      	ldr	r2, [pc, #164]	@ (80017b8 <HAL_ADC_Start+0x19c>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d105      	bne.n	8001722 <HAL_ADC_Start+0x106>
 8001716:	4b26      	ldr	r3, [pc, #152]	@ (80017b0 <HAL_ADC_Start+0x194>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f003 031f 	and.w	r3, r3, #31
 800171e:	2b00      	cmp	r3, #0
 8001720:	d00a      	beq.n	8001738 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a25      	ldr	r2, [pc, #148]	@ (80017bc <HAL_ADC_Start+0x1a0>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d136      	bne.n	800179a <HAL_ADC_Start+0x17e>
 800172c:	4b20      	ldr	r3, [pc, #128]	@ (80017b0 <HAL_ADC_Start+0x194>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f003 0310 	and.w	r3, r3, #16
 8001734:	2b00      	cmp	r3, #0
 8001736:	d130      	bne.n	800179a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d129      	bne.n	800179a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001754:	609a      	str	r2, [r3, #8]
 8001756:	e020      	b.n	800179a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a15      	ldr	r2, [pc, #84]	@ (80017b4 <HAL_ADC_Start+0x198>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d11b      	bne.n	800179a <HAL_ADC_Start+0x17e>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d114      	bne.n	800179a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	689a      	ldr	r2, [r3, #8]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	e00b      	b.n	800179a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001786:	f043 0210 	orr.w	r2, r3, #16
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001792:	f043 0201 	orr.w	r2, r3, #1
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	20000028 	.word	0x20000028
 80017ac:	431bde83 	.word	0x431bde83
 80017b0:	40012300 	.word	0x40012300
 80017b4:	40012000 	.word	0x40012000
 80017b8:	40012100 	.word	0x40012100
 80017bc:	40012200 	.word	0x40012200

080017c0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d101      	bne.n	80017d6 <HAL_ADC_Stop+0x16>
 80017d2:	2302      	movs	r3, #2
 80017d4:	e021      	b.n	800181a <HAL_ADC_Stop+0x5a>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2201      	movs	r2, #1
 80017da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f022 0201 	bic.w	r2, r2, #1
 80017ec:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d109      	bne.n	8001810 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001800:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001804:	f023 0301 	bic.w	r3, r3, #1
 8001808:	f043 0201 	orr.w	r2, r3, #1
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b084      	sub	sp, #16
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001830:	2300      	movs	r3, #0
 8001832:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800183e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001842:	d113      	bne.n	800186c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800184e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001852:	d10b      	bne.n	800186c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001858:	f043 0220 	orr.w	r2, r3, #32
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e063      	b.n	8001934 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800186c:	f7ff fe62 	bl	8001534 <HAL_GetTick>
 8001870:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001872:	e021      	b.n	80018b8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800187a:	d01d      	beq.n	80018b8 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d007      	beq.n	8001892 <HAL_ADC_PollForConversion+0x6c>
 8001882:	f7ff fe57 	bl	8001534 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	429a      	cmp	r2, r3
 8001890:	d212      	bcs.n	80018b8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b02      	cmp	r3, #2
 800189e:	d00b      	beq.n	80018b8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a4:	f043 0204 	orr.w	r2, r3, #4
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e03d      	b.n	8001934 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d1d6      	bne.n	8001874 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f06f 0212 	mvn.w	r2, #18
 80018ce:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d123      	bne.n	8001932 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d11f      	bne.n	8001932 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f8:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d006      	beq.n	800190e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800190a:	2b00      	cmp	r3, #0
 800190c:	d111      	bne.n	8001932 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001912:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d105      	bne.n	8001932 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192a:	f043 0201 	orr.w	r2, r3, #1
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	3710      	adds	r7, #16
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800194a:	4618      	mov	r0, r3
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
	...

08001958 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001962:	2300      	movs	r3, #0
 8001964:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800196c:	2b01      	cmp	r3, #1
 800196e:	d101      	bne.n	8001974 <HAL_ADC_ConfigChannel+0x1c>
 8001970:	2302      	movs	r3, #2
 8001972:	e113      	b.n	8001b9c <HAL_ADC_ConfigChannel+0x244>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b09      	cmp	r3, #9
 8001982:	d925      	bls.n	80019d0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	68d9      	ldr	r1, [r3, #12]
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	b29b      	uxth	r3, r3
 8001990:	461a      	mov	r2, r3
 8001992:	4613      	mov	r3, r2
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	4413      	add	r3, r2
 8001998:	3b1e      	subs	r3, #30
 800199a:	2207      	movs	r2, #7
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	43da      	mvns	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	400a      	ands	r2, r1
 80019a8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	68d9      	ldr	r1, [r3, #12]
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	689a      	ldr	r2, [r3, #8]
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	4618      	mov	r0, r3
 80019bc:	4603      	mov	r3, r0
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	4403      	add	r3, r0
 80019c2:	3b1e      	subs	r3, #30
 80019c4:	409a      	lsls	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	430a      	orrs	r2, r1
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	e022      	b.n	8001a16 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	6919      	ldr	r1, [r3, #16]
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	b29b      	uxth	r3, r3
 80019dc:	461a      	mov	r2, r3
 80019de:	4613      	mov	r3, r2
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	4413      	add	r3, r2
 80019e4:	2207      	movs	r2, #7
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43da      	mvns	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	400a      	ands	r2, r1
 80019f2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6919      	ldr	r1, [r3, #16]
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	4618      	mov	r0, r3
 8001a06:	4603      	mov	r3, r0
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	4403      	add	r3, r0
 8001a0c:	409a      	lsls	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	430a      	orrs	r2, r1
 8001a14:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b06      	cmp	r3, #6
 8001a1c:	d824      	bhi.n	8001a68 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685a      	ldr	r2, [r3, #4]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	3b05      	subs	r3, #5
 8001a30:	221f      	movs	r2, #31
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43da      	mvns	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	400a      	ands	r2, r1
 8001a3e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	4613      	mov	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	4413      	add	r3, r2
 8001a58:	3b05      	subs	r3, #5
 8001a5a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	430a      	orrs	r2, r1
 8001a64:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a66:	e04c      	b.n	8001b02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	2b0c      	cmp	r3, #12
 8001a6e:	d824      	bhi.n	8001aba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	3b23      	subs	r3, #35	@ 0x23
 8001a82:	221f      	movs	r2, #31
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43da      	mvns	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	400a      	ands	r2, r1
 8001a90:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	3b23      	subs	r3, #35	@ 0x23
 8001aac:	fa00 f203 	lsl.w	r2, r0, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ab8:	e023      	b.n	8001b02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	4413      	add	r3, r2
 8001aca:	3b41      	subs	r3, #65	@ 0x41
 8001acc:	221f      	movs	r2, #31
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43da      	mvns	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	400a      	ands	r2, r1
 8001ada:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	4618      	mov	r0, r3
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685a      	ldr	r2, [r3, #4]
 8001aee:	4613      	mov	r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	4413      	add	r3, r2
 8001af4:	3b41      	subs	r3, #65	@ 0x41
 8001af6:	fa00 f203 	lsl.w	r2, r0, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	430a      	orrs	r2, r1
 8001b00:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b02:	4b29      	ldr	r3, [pc, #164]	@ (8001ba8 <HAL_ADC_ConfigChannel+0x250>)
 8001b04:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a28      	ldr	r2, [pc, #160]	@ (8001bac <HAL_ADC_ConfigChannel+0x254>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d10f      	bne.n	8001b30 <HAL_ADC_ConfigChannel+0x1d8>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2b12      	cmp	r3, #18
 8001b16:	d10b      	bne.n	8001b30 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a1d      	ldr	r2, [pc, #116]	@ (8001bac <HAL_ADC_ConfigChannel+0x254>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d12b      	bne.n	8001b92 <HAL_ADC_ConfigChannel+0x23a>
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a1c      	ldr	r2, [pc, #112]	@ (8001bb0 <HAL_ADC_ConfigChannel+0x258>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d003      	beq.n	8001b4c <HAL_ADC_ConfigChannel+0x1f4>
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2b11      	cmp	r3, #17
 8001b4a:	d122      	bne.n	8001b92 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a11      	ldr	r2, [pc, #68]	@ (8001bb0 <HAL_ADC_ConfigChannel+0x258>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d111      	bne.n	8001b92 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b6e:	4b11      	ldr	r3, [pc, #68]	@ (8001bb4 <HAL_ADC_ConfigChannel+0x25c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a11      	ldr	r2, [pc, #68]	@ (8001bb8 <HAL_ADC_ConfigChannel+0x260>)
 8001b74:	fba2 2303 	umull	r2, r3, r2, r3
 8001b78:	0c9a      	lsrs	r2, r3, #18
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4413      	add	r3, r2
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001b84:	e002      	b.n	8001b8c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1f9      	bne.n	8001b86 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	40012300 	.word	0x40012300
 8001bac:	40012000 	.word	0x40012000
 8001bb0:	10000012 	.word	0x10000012
 8001bb4:	20000028 	.word	0x20000028
 8001bb8:	431bde83 	.word	0x431bde83

08001bbc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bc4:	4b79      	ldr	r3, [pc, #484]	@ (8001dac <ADC_Init+0x1f0>)
 8001bc6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	685a      	ldr	r2, [r3, #4]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001bf0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6859      	ldr	r1, [r3, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	021a      	lsls	r2, r3, #8
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	430a      	orrs	r2, r1
 8001c04:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001c14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6859      	ldr	r1, [r3, #4]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	430a      	orrs	r2, r1
 8001c26:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	689a      	ldr	r2, [r3, #8]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6899      	ldr	r1, [r3, #8]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	68da      	ldr	r2, [r3, #12]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	430a      	orrs	r2, r1
 8001c48:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c4e:	4a58      	ldr	r2, [pc, #352]	@ (8001db0 <ADC_Init+0x1f4>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d022      	beq.n	8001c9a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	689a      	ldr	r2, [r3, #8]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c62:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6899      	ldr	r1, [r3, #8]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	430a      	orrs	r2, r1
 8001c74:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001c84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6899      	ldr	r1, [r3, #8]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	430a      	orrs	r2, r1
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	e00f      	b.n	8001cba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	689a      	ldr	r2, [r3, #8]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ca8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001cb8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	689a      	ldr	r2, [r3, #8]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 0202 	bic.w	r2, r2, #2
 8001cc8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6899      	ldr	r1, [r3, #8]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	7e1b      	ldrb	r3, [r3, #24]
 8001cd4:	005a      	lsls	r2, r3, #1
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d01b      	beq.n	8001d20 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001cf6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	685a      	ldr	r2, [r3, #4]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001d06:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6859      	ldr	r1, [r3, #4]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d12:	3b01      	subs	r3, #1
 8001d14:	035a      	lsls	r2, r3, #13
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	e007      	b.n	8001d30 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	685a      	ldr	r2, [r3, #4]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d2e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001d3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	051a      	lsls	r2, r3, #20
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	430a      	orrs	r2, r1
 8001d54:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001d64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6899      	ldr	r1, [r3, #8]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001d72:	025a      	lsls	r2, r3, #9
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	689a      	ldr	r2, [r3, #8]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6899      	ldr	r1, [r3, #8]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	029a      	lsls	r2, r3, #10
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	609a      	str	r2, [r3, #8]
}
 8001da0:	bf00      	nop
 8001da2:	3714      	adds	r7, #20
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	40012300 	.word	0x40012300
 8001db0:	0f000001 	.word	0x0f000001

08001db4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001df8 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dca:	68ba      	ldr	r2, [r7, #8]
 8001dcc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ddc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001de0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001de4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001de6:	4a04      	ldr	r2, [pc, #16]	@ (8001df8 <__NVIC_SetPriorityGrouping+0x44>)
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	60d3      	str	r3, [r2, #12]
}
 8001dec:	bf00      	nop
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	e000ed00 	.word	0xe000ed00

08001dfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e00:	4b04      	ldr	r3, [pc, #16]	@ (8001e14 <__NVIC_GetPriorityGrouping+0x18>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	0a1b      	lsrs	r3, r3, #8
 8001e06:	f003 0307 	and.w	r3, r3, #7
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	e000ed00 	.word	0xe000ed00

08001e18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	6039      	str	r1, [r7, #0]
 8001e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	db0a      	blt.n	8001e42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	490c      	ldr	r1, [pc, #48]	@ (8001e64 <__NVIC_SetPriority+0x4c>)
 8001e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e36:	0112      	lsls	r2, r2, #4
 8001e38:	b2d2      	uxtb	r2, r2
 8001e3a:	440b      	add	r3, r1
 8001e3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e40:	e00a      	b.n	8001e58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	4908      	ldr	r1, [pc, #32]	@ (8001e68 <__NVIC_SetPriority+0x50>)
 8001e48:	79fb      	ldrb	r3, [r7, #7]
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	3b04      	subs	r3, #4
 8001e50:	0112      	lsls	r2, r2, #4
 8001e52:	b2d2      	uxtb	r2, r2
 8001e54:	440b      	add	r3, r1
 8001e56:	761a      	strb	r2, [r3, #24]
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	e000e100 	.word	0xe000e100
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b089      	sub	sp, #36	@ 0x24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	f1c3 0307 	rsb	r3, r3, #7
 8001e86:	2b04      	cmp	r3, #4
 8001e88:	bf28      	it	cs
 8001e8a:	2304      	movcs	r3, #4
 8001e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	3304      	adds	r3, #4
 8001e92:	2b06      	cmp	r3, #6
 8001e94:	d902      	bls.n	8001e9c <NVIC_EncodePriority+0x30>
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	3b03      	subs	r3, #3
 8001e9a:	e000      	b.n	8001e9e <NVIC_EncodePriority+0x32>
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43da      	mvns	r2, r3
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	401a      	ands	r2, r3
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	fa01 f303 	lsl.w	r3, r1, r3
 8001ebe:	43d9      	mvns	r1, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec4:	4313      	orrs	r3, r2
         );
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3724      	adds	r7, #36	@ 0x24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
	...

08001ed4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ee4:	d301      	bcc.n	8001eea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e00f      	b.n	8001f0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eea:	4a0a      	ldr	r2, [pc, #40]	@ (8001f14 <SysTick_Config+0x40>)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ef2:	210f      	movs	r1, #15
 8001ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef8:	f7ff ff8e 	bl	8001e18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001efc:	4b05      	ldr	r3, [pc, #20]	@ (8001f14 <SysTick_Config+0x40>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f02:	4b04      	ldr	r3, [pc, #16]	@ (8001f14 <SysTick_Config+0x40>)
 8001f04:	2207      	movs	r2, #7
 8001f06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	e000e010 	.word	0xe000e010

08001f18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff ff47 	bl	8001db4 <__NVIC_SetPriorityGrouping>
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b086      	sub	sp, #24
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	4603      	mov	r3, r0
 8001f36:	60b9      	str	r1, [r7, #8]
 8001f38:	607a      	str	r2, [r7, #4]
 8001f3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f40:	f7ff ff5c 	bl	8001dfc <__NVIC_GetPriorityGrouping>
 8001f44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	68b9      	ldr	r1, [r7, #8]
 8001f4a:	6978      	ldr	r0, [r7, #20]
 8001f4c:	f7ff ff8e 	bl	8001e6c <NVIC_EncodePriority>
 8001f50:	4602      	mov	r2, r0
 8001f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f56:	4611      	mov	r1, r2
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff ff5d 	bl	8001e18 <__NVIC_SetPriority>
}
 8001f5e:	bf00      	nop
 8001f60:	3718      	adds	r7, #24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b082      	sub	sp, #8
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7ff ffb0 	bl	8001ed4 <SysTick_Config>
 8001f74:	4603      	mov	r3, r0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
	...

08001f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b089      	sub	sp, #36	@ 0x24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f92:	2300      	movs	r3, #0
 8001f94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f96:	2300      	movs	r3, #0
 8001f98:	61fb      	str	r3, [r7, #28]
 8001f9a:	e165      	b.n	8002268 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	697a      	ldr	r2, [r7, #20]
 8001fac:	4013      	ands	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	f040 8154 	bne.w	8002262 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f003 0303 	and.w	r3, r3, #3
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d005      	beq.n	8001fd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d130      	bne.n	8002034 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	2203      	movs	r2, #3
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	68da      	ldr	r2, [r3, #12]
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002008:	2201      	movs	r2, #1
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	43db      	mvns	r3, r3
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4013      	ands	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	091b      	lsrs	r3, r3, #4
 800201e:	f003 0201 	and.w	r2, r3, #1
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4313      	orrs	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 0303 	and.w	r3, r3, #3
 800203c:	2b03      	cmp	r3, #3
 800203e:	d017      	beq.n	8002070 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	2203      	movs	r2, #3
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	43db      	mvns	r3, r3
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	4013      	ands	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4313      	orrs	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 0303 	and.w	r3, r3, #3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d123      	bne.n	80020c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	08da      	lsrs	r2, r3, #3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3208      	adds	r2, #8
 8002084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002088:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	220f      	movs	r2, #15
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	43db      	mvns	r3, r3
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4013      	ands	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	691a      	ldr	r2, [r3, #16]
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	08da      	lsrs	r2, r3, #3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	3208      	adds	r2, #8
 80020be:	69b9      	ldr	r1, [r7, #24]
 80020c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	2203      	movs	r2, #3
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	43db      	mvns	r3, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4013      	ands	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 0203 	and.w	r2, r3, #3
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 80ae 	beq.w	8002262 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	4b5d      	ldr	r3, [pc, #372]	@ (8002280 <HAL_GPIO_Init+0x300>)
 800210c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800210e:	4a5c      	ldr	r2, [pc, #368]	@ (8002280 <HAL_GPIO_Init+0x300>)
 8002110:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002114:	6453      	str	r3, [r2, #68]	@ 0x44
 8002116:	4b5a      	ldr	r3, [pc, #360]	@ (8002280 <HAL_GPIO_Init+0x300>)
 8002118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002122:	4a58      	ldr	r2, [pc, #352]	@ (8002284 <HAL_GPIO_Init+0x304>)
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	089b      	lsrs	r3, r3, #2
 8002128:	3302      	adds	r3, #2
 800212a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800212e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	f003 0303 	and.w	r3, r3, #3
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	220f      	movs	r2, #15
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	43db      	mvns	r3, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4013      	ands	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a4f      	ldr	r2, [pc, #316]	@ (8002288 <HAL_GPIO_Init+0x308>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d025      	beq.n	800219a <HAL_GPIO_Init+0x21a>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a4e      	ldr	r2, [pc, #312]	@ (800228c <HAL_GPIO_Init+0x30c>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d01f      	beq.n	8002196 <HAL_GPIO_Init+0x216>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a4d      	ldr	r2, [pc, #308]	@ (8002290 <HAL_GPIO_Init+0x310>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d019      	beq.n	8002192 <HAL_GPIO_Init+0x212>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a4c      	ldr	r2, [pc, #304]	@ (8002294 <HAL_GPIO_Init+0x314>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d013      	beq.n	800218e <HAL_GPIO_Init+0x20e>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a4b      	ldr	r2, [pc, #300]	@ (8002298 <HAL_GPIO_Init+0x318>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d00d      	beq.n	800218a <HAL_GPIO_Init+0x20a>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a4a      	ldr	r2, [pc, #296]	@ (800229c <HAL_GPIO_Init+0x31c>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d007      	beq.n	8002186 <HAL_GPIO_Init+0x206>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a49      	ldr	r2, [pc, #292]	@ (80022a0 <HAL_GPIO_Init+0x320>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d101      	bne.n	8002182 <HAL_GPIO_Init+0x202>
 800217e:	2306      	movs	r3, #6
 8002180:	e00c      	b.n	800219c <HAL_GPIO_Init+0x21c>
 8002182:	2307      	movs	r3, #7
 8002184:	e00a      	b.n	800219c <HAL_GPIO_Init+0x21c>
 8002186:	2305      	movs	r3, #5
 8002188:	e008      	b.n	800219c <HAL_GPIO_Init+0x21c>
 800218a:	2304      	movs	r3, #4
 800218c:	e006      	b.n	800219c <HAL_GPIO_Init+0x21c>
 800218e:	2303      	movs	r3, #3
 8002190:	e004      	b.n	800219c <HAL_GPIO_Init+0x21c>
 8002192:	2302      	movs	r3, #2
 8002194:	e002      	b.n	800219c <HAL_GPIO_Init+0x21c>
 8002196:	2301      	movs	r3, #1
 8002198:	e000      	b.n	800219c <HAL_GPIO_Init+0x21c>
 800219a:	2300      	movs	r3, #0
 800219c:	69fa      	ldr	r2, [r7, #28]
 800219e:	f002 0203 	and.w	r2, r2, #3
 80021a2:	0092      	lsls	r2, r2, #2
 80021a4:	4093      	lsls	r3, r2
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021ac:	4935      	ldr	r1, [pc, #212]	@ (8002284 <HAL_GPIO_Init+0x304>)
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	089b      	lsrs	r3, r3, #2
 80021b2:	3302      	adds	r3, #2
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021ba:	4b3a      	ldr	r3, [pc, #232]	@ (80022a4 <HAL_GPIO_Init+0x324>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	43db      	mvns	r3, r3
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	4013      	ands	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d003      	beq.n	80021de <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	4313      	orrs	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021de:	4a31      	ldr	r2, [pc, #196]	@ (80022a4 <HAL_GPIO_Init+0x324>)
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021e4:	4b2f      	ldr	r3, [pc, #188]	@ (80022a4 <HAL_GPIO_Init+0x324>)
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	43db      	mvns	r3, r3
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	4013      	ands	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d003      	beq.n	8002208 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	4313      	orrs	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002208:	4a26      	ldr	r2, [pc, #152]	@ (80022a4 <HAL_GPIO_Init+0x324>)
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800220e:	4b25      	ldr	r3, [pc, #148]	@ (80022a4 <HAL_GPIO_Init+0x324>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	43db      	mvns	r3, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4013      	ands	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d003      	beq.n	8002232 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	4313      	orrs	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002232:	4a1c      	ldr	r2, [pc, #112]	@ (80022a4 <HAL_GPIO_Init+0x324>)
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002238:	4b1a      	ldr	r3, [pc, #104]	@ (80022a4 <HAL_GPIO_Init+0x324>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	43db      	mvns	r3, r3
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4013      	ands	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d003      	beq.n	800225c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	4313      	orrs	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800225c:	4a11      	ldr	r2, [pc, #68]	@ (80022a4 <HAL_GPIO_Init+0x324>)
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	3301      	adds	r3, #1
 8002266:	61fb      	str	r3, [r7, #28]
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	2b0f      	cmp	r3, #15
 800226c:	f67f ae96 	bls.w	8001f9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002270:	bf00      	nop
 8002272:	bf00      	nop
 8002274:	3724      	adds	r7, #36	@ 0x24
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	40023800 	.word	0x40023800
 8002284:	40013800 	.word	0x40013800
 8002288:	40020000 	.word	0x40020000
 800228c:	40020400 	.word	0x40020400
 8002290:	40020800 	.word	0x40020800
 8002294:	40020c00 	.word	0x40020c00
 8002298:	40021000 	.word	0x40021000
 800229c:	40021400 	.word	0x40021400
 80022a0:	40021800 	.word	0x40021800
 80022a4:	40013c00 	.word	0x40013c00

080022a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	460b      	mov	r3, r1
 80022b2:	807b      	strh	r3, [r7, #2]
 80022b4:	4613      	mov	r3, r2
 80022b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022b8:	787b      	ldrb	r3, [r7, #1]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d003      	beq.n	80022c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022be:	887a      	ldrh	r2, [r7, #2]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022c4:	e003      	b.n	80022ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022c6:	887b      	ldrh	r3, [r7, #2]
 80022c8:	041a      	lsls	r2, r3, #16
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	619a      	str	r2, [r3, #24]
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
	...

080022dc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	603b      	str	r3, [r7, #0]
 80022ea:	4b20      	ldr	r3, [pc, #128]	@ (800236c <HAL_PWREx_EnableOverDrive+0x90>)
 80022ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ee:	4a1f      	ldr	r2, [pc, #124]	@ (800236c <HAL_PWREx_EnableOverDrive+0x90>)
 80022f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80022f6:	4b1d      	ldr	r3, [pc, #116]	@ (800236c <HAL_PWREx_EnableOverDrive+0x90>)
 80022f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022fe:	603b      	str	r3, [r7, #0]
 8002300:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002302:	4b1b      	ldr	r3, [pc, #108]	@ (8002370 <HAL_PWREx_EnableOverDrive+0x94>)
 8002304:	2201      	movs	r2, #1
 8002306:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002308:	f7ff f914 	bl	8001534 <HAL_GetTick>
 800230c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800230e:	e009      	b.n	8002324 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002310:	f7ff f910 	bl	8001534 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800231e:	d901      	bls.n	8002324 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e01f      	b.n	8002364 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002324:	4b13      	ldr	r3, [pc, #76]	@ (8002374 <HAL_PWREx_EnableOverDrive+0x98>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800232c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002330:	d1ee      	bne.n	8002310 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002332:	4b11      	ldr	r3, [pc, #68]	@ (8002378 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002334:	2201      	movs	r2, #1
 8002336:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002338:	f7ff f8fc 	bl	8001534 <HAL_GetTick>
 800233c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800233e:	e009      	b.n	8002354 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002340:	f7ff f8f8 	bl	8001534 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800234e:	d901      	bls.n	8002354 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e007      	b.n	8002364 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002354:	4b07      	ldr	r3, [pc, #28]	@ (8002374 <HAL_PWREx_EnableOverDrive+0x98>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800235c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002360:	d1ee      	bne.n	8002340 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40023800 	.word	0x40023800
 8002370:	420e0040 	.word	0x420e0040
 8002374:	40007000 	.word	0x40007000
 8002378:	420e0044 	.word	0x420e0044

0800237c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d101      	bne.n	8002390 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e0cc      	b.n	800252a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002390:	4b68      	ldr	r3, [pc, #416]	@ (8002534 <HAL_RCC_ClockConfig+0x1b8>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 030f 	and.w	r3, r3, #15
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	429a      	cmp	r2, r3
 800239c:	d90c      	bls.n	80023b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800239e:	4b65      	ldr	r3, [pc, #404]	@ (8002534 <HAL_RCC_ClockConfig+0x1b8>)
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	b2d2      	uxtb	r2, r2
 80023a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a6:	4b63      	ldr	r3, [pc, #396]	@ (8002534 <HAL_RCC_ClockConfig+0x1b8>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 030f 	and.w	r3, r3, #15
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d001      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e0b8      	b.n	800252a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d020      	beq.n	8002406 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d005      	beq.n	80023dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023d0:	4b59      	ldr	r3, [pc, #356]	@ (8002538 <HAL_RCC_ClockConfig+0x1bc>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	4a58      	ldr	r2, [pc, #352]	@ (8002538 <HAL_RCC_ClockConfig+0x1bc>)
 80023d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80023da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0308 	and.w	r3, r3, #8
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d005      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023e8:	4b53      	ldr	r3, [pc, #332]	@ (8002538 <HAL_RCC_ClockConfig+0x1bc>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	4a52      	ldr	r2, [pc, #328]	@ (8002538 <HAL_RCC_ClockConfig+0x1bc>)
 80023ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80023f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023f4:	4b50      	ldr	r3, [pc, #320]	@ (8002538 <HAL_RCC_ClockConfig+0x1bc>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	494d      	ldr	r1, [pc, #308]	@ (8002538 <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	4313      	orrs	r3, r2
 8002404:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d044      	beq.n	800249c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d107      	bne.n	800242a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800241a:	4b47      	ldr	r3, [pc, #284]	@ (8002538 <HAL_RCC_ClockConfig+0x1bc>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d119      	bne.n	800245a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e07f      	b.n	800252a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2b02      	cmp	r3, #2
 8002430:	d003      	beq.n	800243a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002436:	2b03      	cmp	r3, #3
 8002438:	d107      	bne.n	800244a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800243a:	4b3f      	ldr	r3, [pc, #252]	@ (8002538 <HAL_RCC_ClockConfig+0x1bc>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d109      	bne.n	800245a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e06f      	b.n	800252a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800244a:	4b3b      	ldr	r3, [pc, #236]	@ (8002538 <HAL_RCC_ClockConfig+0x1bc>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e067      	b.n	800252a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800245a:	4b37      	ldr	r3, [pc, #220]	@ (8002538 <HAL_RCC_ClockConfig+0x1bc>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f023 0203 	bic.w	r2, r3, #3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	4934      	ldr	r1, [pc, #208]	@ (8002538 <HAL_RCC_ClockConfig+0x1bc>)
 8002468:	4313      	orrs	r3, r2
 800246a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800246c:	f7ff f862 	bl	8001534 <HAL_GetTick>
 8002470:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002472:	e00a      	b.n	800248a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002474:	f7ff f85e 	bl	8001534 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002482:	4293      	cmp	r3, r2
 8002484:	d901      	bls.n	800248a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e04f      	b.n	800252a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800248a:	4b2b      	ldr	r3, [pc, #172]	@ (8002538 <HAL_RCC_ClockConfig+0x1bc>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 020c 	and.w	r2, r3, #12
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	429a      	cmp	r2, r3
 800249a:	d1eb      	bne.n	8002474 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800249c:	4b25      	ldr	r3, [pc, #148]	@ (8002534 <HAL_RCC_ClockConfig+0x1b8>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 030f 	and.w	r3, r3, #15
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d20c      	bcs.n	80024c4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024aa:	4b22      	ldr	r3, [pc, #136]	@ (8002534 <HAL_RCC_ClockConfig+0x1b8>)
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b2:	4b20      	ldr	r3, [pc, #128]	@ (8002534 <HAL_RCC_ClockConfig+0x1b8>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d001      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e032      	b.n	800252a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0304 	and.w	r3, r3, #4
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d008      	beq.n	80024e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024d0:	4b19      	ldr	r3, [pc, #100]	@ (8002538 <HAL_RCC_ClockConfig+0x1bc>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	4916      	ldr	r1, [pc, #88]	@ (8002538 <HAL_RCC_ClockConfig+0x1bc>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0308 	and.w	r3, r3, #8
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d009      	beq.n	8002502 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024ee:	4b12      	ldr	r3, [pc, #72]	@ (8002538 <HAL_RCC_ClockConfig+0x1bc>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	490e      	ldr	r1, [pc, #56]	@ (8002538 <HAL_RCC_ClockConfig+0x1bc>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002502:	f000 f855 	bl	80025b0 <HAL_RCC_GetSysClockFreq>
 8002506:	4602      	mov	r2, r0
 8002508:	4b0b      	ldr	r3, [pc, #44]	@ (8002538 <HAL_RCC_ClockConfig+0x1bc>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	091b      	lsrs	r3, r3, #4
 800250e:	f003 030f 	and.w	r3, r3, #15
 8002512:	490a      	ldr	r1, [pc, #40]	@ (800253c <HAL_RCC_ClockConfig+0x1c0>)
 8002514:	5ccb      	ldrb	r3, [r1, r3]
 8002516:	fa22 f303 	lsr.w	r3, r2, r3
 800251a:	4a09      	ldr	r2, [pc, #36]	@ (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 800251c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800251e:	4b09      	ldr	r3, [pc, #36]	@ (8002544 <HAL_RCC_ClockConfig+0x1c8>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f7fe ffc2 	bl	80014ac <HAL_InitTick>

  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40023c00 	.word	0x40023c00
 8002538:	40023800 	.word	0x40023800
 800253c:	08005af0 	.word	0x08005af0
 8002540:	20000028 	.word	0x20000028
 8002544:	2000002c 	.word	0x2000002c

08002548 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800254c:	4b03      	ldr	r3, [pc, #12]	@ (800255c <HAL_RCC_GetHCLKFreq+0x14>)
 800254e:	681b      	ldr	r3, [r3, #0]
}
 8002550:	4618      	mov	r0, r3
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	20000028 	.word	0x20000028

08002560 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002564:	f7ff fff0 	bl	8002548 <HAL_RCC_GetHCLKFreq>
 8002568:	4602      	mov	r2, r0
 800256a:	4b05      	ldr	r3, [pc, #20]	@ (8002580 <HAL_RCC_GetPCLK1Freq+0x20>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	0a9b      	lsrs	r3, r3, #10
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	4903      	ldr	r1, [pc, #12]	@ (8002584 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002576:	5ccb      	ldrb	r3, [r1, r3]
 8002578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800257c:	4618      	mov	r0, r3
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40023800 	.word	0x40023800
 8002584:	08005b00 	.word	0x08005b00

08002588 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800258c:	f7ff ffdc 	bl	8002548 <HAL_RCC_GetHCLKFreq>
 8002590:	4602      	mov	r2, r0
 8002592:	4b05      	ldr	r3, [pc, #20]	@ (80025a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	0b5b      	lsrs	r3, r3, #13
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	4903      	ldr	r1, [pc, #12]	@ (80025ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800259e:	5ccb      	ldrb	r3, [r1, r3]
 80025a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40023800 	.word	0x40023800
 80025ac:	08005b00 	.word	0x08005b00

080025b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025b4:	b0ae      	sub	sp, #184	@ 0xb8
 80025b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80025b8:	2300      	movs	r3, #0
 80025ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80025be:	2300      	movs	r3, #0
 80025c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80025ca:	2300      	movs	r3, #0
 80025cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025d6:	4bcb      	ldr	r3, [pc, #812]	@ (8002904 <HAL_RCC_GetSysClockFreq+0x354>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 030c 	and.w	r3, r3, #12
 80025de:	2b0c      	cmp	r3, #12
 80025e0:	f200 8206 	bhi.w	80029f0 <HAL_RCC_GetSysClockFreq+0x440>
 80025e4:	a201      	add	r2, pc, #4	@ (adr r2, 80025ec <HAL_RCC_GetSysClockFreq+0x3c>)
 80025e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ea:	bf00      	nop
 80025ec:	08002621 	.word	0x08002621
 80025f0:	080029f1 	.word	0x080029f1
 80025f4:	080029f1 	.word	0x080029f1
 80025f8:	080029f1 	.word	0x080029f1
 80025fc:	08002629 	.word	0x08002629
 8002600:	080029f1 	.word	0x080029f1
 8002604:	080029f1 	.word	0x080029f1
 8002608:	080029f1 	.word	0x080029f1
 800260c:	08002631 	.word	0x08002631
 8002610:	080029f1 	.word	0x080029f1
 8002614:	080029f1 	.word	0x080029f1
 8002618:	080029f1 	.word	0x080029f1
 800261c:	08002821 	.word	0x08002821
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002620:	4bb9      	ldr	r3, [pc, #740]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x358>)
 8002622:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002626:	e1e7      	b.n	80029f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002628:	4bb8      	ldr	r3, [pc, #736]	@ (800290c <HAL_RCC_GetSysClockFreq+0x35c>)
 800262a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800262e:	e1e3      	b.n	80029f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002630:	4bb4      	ldr	r3, [pc, #720]	@ (8002904 <HAL_RCC_GetSysClockFreq+0x354>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002638:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800263c:	4bb1      	ldr	r3, [pc, #708]	@ (8002904 <HAL_RCC_GetSysClockFreq+0x354>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d071      	beq.n	800272c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002648:	4bae      	ldr	r3, [pc, #696]	@ (8002904 <HAL_RCC_GetSysClockFreq+0x354>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	099b      	lsrs	r3, r3, #6
 800264e:	2200      	movs	r2, #0
 8002650:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002654:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002658:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800265c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002660:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002664:	2300      	movs	r3, #0
 8002666:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800266a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800266e:	4622      	mov	r2, r4
 8002670:	462b      	mov	r3, r5
 8002672:	f04f 0000 	mov.w	r0, #0
 8002676:	f04f 0100 	mov.w	r1, #0
 800267a:	0159      	lsls	r1, r3, #5
 800267c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002680:	0150      	lsls	r0, r2, #5
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	4621      	mov	r1, r4
 8002688:	1a51      	subs	r1, r2, r1
 800268a:	6439      	str	r1, [r7, #64]	@ 0x40
 800268c:	4629      	mov	r1, r5
 800268e:	eb63 0301 	sbc.w	r3, r3, r1
 8002692:	647b      	str	r3, [r7, #68]	@ 0x44
 8002694:	f04f 0200 	mov.w	r2, #0
 8002698:	f04f 0300 	mov.w	r3, #0
 800269c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80026a0:	4649      	mov	r1, r9
 80026a2:	018b      	lsls	r3, r1, #6
 80026a4:	4641      	mov	r1, r8
 80026a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026aa:	4641      	mov	r1, r8
 80026ac:	018a      	lsls	r2, r1, #6
 80026ae:	4641      	mov	r1, r8
 80026b0:	1a51      	subs	r1, r2, r1
 80026b2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80026b4:	4649      	mov	r1, r9
 80026b6:	eb63 0301 	sbc.w	r3, r3, r1
 80026ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026bc:	f04f 0200 	mov.w	r2, #0
 80026c0:	f04f 0300 	mov.w	r3, #0
 80026c4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80026c8:	4649      	mov	r1, r9
 80026ca:	00cb      	lsls	r3, r1, #3
 80026cc:	4641      	mov	r1, r8
 80026ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026d2:	4641      	mov	r1, r8
 80026d4:	00ca      	lsls	r2, r1, #3
 80026d6:	4610      	mov	r0, r2
 80026d8:	4619      	mov	r1, r3
 80026da:	4603      	mov	r3, r0
 80026dc:	4622      	mov	r2, r4
 80026de:	189b      	adds	r3, r3, r2
 80026e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80026e2:	462b      	mov	r3, r5
 80026e4:	460a      	mov	r2, r1
 80026e6:	eb42 0303 	adc.w	r3, r2, r3
 80026ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80026ec:	f04f 0200 	mov.w	r2, #0
 80026f0:	f04f 0300 	mov.w	r3, #0
 80026f4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80026f8:	4629      	mov	r1, r5
 80026fa:	024b      	lsls	r3, r1, #9
 80026fc:	4621      	mov	r1, r4
 80026fe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002702:	4621      	mov	r1, r4
 8002704:	024a      	lsls	r2, r1, #9
 8002706:	4610      	mov	r0, r2
 8002708:	4619      	mov	r1, r3
 800270a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800270e:	2200      	movs	r2, #0
 8002710:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002714:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002718:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800271c:	f7fd fdd0 	bl	80002c0 <__aeabi_uldivmod>
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	4613      	mov	r3, r2
 8002726:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800272a:	e067      	b.n	80027fc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800272c:	4b75      	ldr	r3, [pc, #468]	@ (8002904 <HAL_RCC_GetSysClockFreq+0x354>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	099b      	lsrs	r3, r3, #6
 8002732:	2200      	movs	r2, #0
 8002734:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002738:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800273c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002744:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002746:	2300      	movs	r3, #0
 8002748:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800274a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800274e:	4622      	mov	r2, r4
 8002750:	462b      	mov	r3, r5
 8002752:	f04f 0000 	mov.w	r0, #0
 8002756:	f04f 0100 	mov.w	r1, #0
 800275a:	0159      	lsls	r1, r3, #5
 800275c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002760:	0150      	lsls	r0, r2, #5
 8002762:	4602      	mov	r2, r0
 8002764:	460b      	mov	r3, r1
 8002766:	4621      	mov	r1, r4
 8002768:	1a51      	subs	r1, r2, r1
 800276a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800276c:	4629      	mov	r1, r5
 800276e:	eb63 0301 	sbc.w	r3, r3, r1
 8002772:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002774:	f04f 0200 	mov.w	r2, #0
 8002778:	f04f 0300 	mov.w	r3, #0
 800277c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002780:	4649      	mov	r1, r9
 8002782:	018b      	lsls	r3, r1, #6
 8002784:	4641      	mov	r1, r8
 8002786:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800278a:	4641      	mov	r1, r8
 800278c:	018a      	lsls	r2, r1, #6
 800278e:	4641      	mov	r1, r8
 8002790:	ebb2 0a01 	subs.w	sl, r2, r1
 8002794:	4649      	mov	r1, r9
 8002796:	eb63 0b01 	sbc.w	fp, r3, r1
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	f04f 0300 	mov.w	r3, #0
 80027a2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80027a6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80027aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027ae:	4692      	mov	sl, r2
 80027b0:	469b      	mov	fp, r3
 80027b2:	4623      	mov	r3, r4
 80027b4:	eb1a 0303 	adds.w	r3, sl, r3
 80027b8:	623b      	str	r3, [r7, #32]
 80027ba:	462b      	mov	r3, r5
 80027bc:	eb4b 0303 	adc.w	r3, fp, r3
 80027c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80027c2:	f04f 0200 	mov.w	r2, #0
 80027c6:	f04f 0300 	mov.w	r3, #0
 80027ca:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80027ce:	4629      	mov	r1, r5
 80027d0:	028b      	lsls	r3, r1, #10
 80027d2:	4621      	mov	r1, r4
 80027d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027d8:	4621      	mov	r1, r4
 80027da:	028a      	lsls	r2, r1, #10
 80027dc:	4610      	mov	r0, r2
 80027de:	4619      	mov	r1, r3
 80027e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80027e4:	2200      	movs	r2, #0
 80027e6:	673b      	str	r3, [r7, #112]	@ 0x70
 80027e8:	677a      	str	r2, [r7, #116]	@ 0x74
 80027ea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80027ee:	f7fd fd67 	bl	80002c0 <__aeabi_uldivmod>
 80027f2:	4602      	mov	r2, r0
 80027f4:	460b      	mov	r3, r1
 80027f6:	4613      	mov	r3, r2
 80027f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80027fc:	4b41      	ldr	r3, [pc, #260]	@ (8002904 <HAL_RCC_GetSysClockFreq+0x354>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	0c1b      	lsrs	r3, r3, #16
 8002802:	f003 0303 	and.w	r3, r3, #3
 8002806:	3301      	adds	r3, #1
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800280e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002812:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002816:	fbb2 f3f3 	udiv	r3, r2, r3
 800281a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800281e:	e0eb      	b.n	80029f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002820:	4b38      	ldr	r3, [pc, #224]	@ (8002904 <HAL_RCC_GetSysClockFreq+0x354>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002828:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800282c:	4b35      	ldr	r3, [pc, #212]	@ (8002904 <HAL_RCC_GetSysClockFreq+0x354>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d06b      	beq.n	8002910 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002838:	4b32      	ldr	r3, [pc, #200]	@ (8002904 <HAL_RCC_GetSysClockFreq+0x354>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	099b      	lsrs	r3, r3, #6
 800283e:	2200      	movs	r2, #0
 8002840:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002842:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002844:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800284a:	663b      	str	r3, [r7, #96]	@ 0x60
 800284c:	2300      	movs	r3, #0
 800284e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002850:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002854:	4622      	mov	r2, r4
 8002856:	462b      	mov	r3, r5
 8002858:	f04f 0000 	mov.w	r0, #0
 800285c:	f04f 0100 	mov.w	r1, #0
 8002860:	0159      	lsls	r1, r3, #5
 8002862:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002866:	0150      	lsls	r0, r2, #5
 8002868:	4602      	mov	r2, r0
 800286a:	460b      	mov	r3, r1
 800286c:	4621      	mov	r1, r4
 800286e:	1a51      	subs	r1, r2, r1
 8002870:	61b9      	str	r1, [r7, #24]
 8002872:	4629      	mov	r1, r5
 8002874:	eb63 0301 	sbc.w	r3, r3, r1
 8002878:	61fb      	str	r3, [r7, #28]
 800287a:	f04f 0200 	mov.w	r2, #0
 800287e:	f04f 0300 	mov.w	r3, #0
 8002882:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002886:	4659      	mov	r1, fp
 8002888:	018b      	lsls	r3, r1, #6
 800288a:	4651      	mov	r1, sl
 800288c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002890:	4651      	mov	r1, sl
 8002892:	018a      	lsls	r2, r1, #6
 8002894:	4651      	mov	r1, sl
 8002896:	ebb2 0801 	subs.w	r8, r2, r1
 800289a:	4659      	mov	r1, fp
 800289c:	eb63 0901 	sbc.w	r9, r3, r1
 80028a0:	f04f 0200 	mov.w	r2, #0
 80028a4:	f04f 0300 	mov.w	r3, #0
 80028a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028b0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028b4:	4690      	mov	r8, r2
 80028b6:	4699      	mov	r9, r3
 80028b8:	4623      	mov	r3, r4
 80028ba:	eb18 0303 	adds.w	r3, r8, r3
 80028be:	613b      	str	r3, [r7, #16]
 80028c0:	462b      	mov	r3, r5
 80028c2:	eb49 0303 	adc.w	r3, r9, r3
 80028c6:	617b      	str	r3, [r7, #20]
 80028c8:	f04f 0200 	mov.w	r2, #0
 80028cc:	f04f 0300 	mov.w	r3, #0
 80028d0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80028d4:	4629      	mov	r1, r5
 80028d6:	024b      	lsls	r3, r1, #9
 80028d8:	4621      	mov	r1, r4
 80028da:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028de:	4621      	mov	r1, r4
 80028e0:	024a      	lsls	r2, r1, #9
 80028e2:	4610      	mov	r0, r2
 80028e4:	4619      	mov	r1, r3
 80028e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80028ea:	2200      	movs	r2, #0
 80028ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80028ee:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80028f0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80028f4:	f7fd fce4 	bl	80002c0 <__aeabi_uldivmod>
 80028f8:	4602      	mov	r2, r0
 80028fa:	460b      	mov	r3, r1
 80028fc:	4613      	mov	r3, r2
 80028fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002902:	e065      	b.n	80029d0 <HAL_RCC_GetSysClockFreq+0x420>
 8002904:	40023800 	.word	0x40023800
 8002908:	00f42400 	.word	0x00f42400
 800290c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002910:	4b3d      	ldr	r3, [pc, #244]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0x458>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	099b      	lsrs	r3, r3, #6
 8002916:	2200      	movs	r2, #0
 8002918:	4618      	mov	r0, r3
 800291a:	4611      	mov	r1, r2
 800291c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002920:	653b      	str	r3, [r7, #80]	@ 0x50
 8002922:	2300      	movs	r3, #0
 8002924:	657b      	str	r3, [r7, #84]	@ 0x54
 8002926:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800292a:	4642      	mov	r2, r8
 800292c:	464b      	mov	r3, r9
 800292e:	f04f 0000 	mov.w	r0, #0
 8002932:	f04f 0100 	mov.w	r1, #0
 8002936:	0159      	lsls	r1, r3, #5
 8002938:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800293c:	0150      	lsls	r0, r2, #5
 800293e:	4602      	mov	r2, r0
 8002940:	460b      	mov	r3, r1
 8002942:	4641      	mov	r1, r8
 8002944:	1a51      	subs	r1, r2, r1
 8002946:	60b9      	str	r1, [r7, #8]
 8002948:	4649      	mov	r1, r9
 800294a:	eb63 0301 	sbc.w	r3, r3, r1
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	f04f 0200 	mov.w	r2, #0
 8002954:	f04f 0300 	mov.w	r3, #0
 8002958:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800295c:	4659      	mov	r1, fp
 800295e:	018b      	lsls	r3, r1, #6
 8002960:	4651      	mov	r1, sl
 8002962:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002966:	4651      	mov	r1, sl
 8002968:	018a      	lsls	r2, r1, #6
 800296a:	4651      	mov	r1, sl
 800296c:	1a54      	subs	r4, r2, r1
 800296e:	4659      	mov	r1, fp
 8002970:	eb63 0501 	sbc.w	r5, r3, r1
 8002974:	f04f 0200 	mov.w	r2, #0
 8002978:	f04f 0300 	mov.w	r3, #0
 800297c:	00eb      	lsls	r3, r5, #3
 800297e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002982:	00e2      	lsls	r2, r4, #3
 8002984:	4614      	mov	r4, r2
 8002986:	461d      	mov	r5, r3
 8002988:	4643      	mov	r3, r8
 800298a:	18e3      	adds	r3, r4, r3
 800298c:	603b      	str	r3, [r7, #0]
 800298e:	464b      	mov	r3, r9
 8002990:	eb45 0303 	adc.w	r3, r5, r3
 8002994:	607b      	str	r3, [r7, #4]
 8002996:	f04f 0200 	mov.w	r2, #0
 800299a:	f04f 0300 	mov.w	r3, #0
 800299e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029a2:	4629      	mov	r1, r5
 80029a4:	028b      	lsls	r3, r1, #10
 80029a6:	4621      	mov	r1, r4
 80029a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029ac:	4621      	mov	r1, r4
 80029ae:	028a      	lsls	r2, r1, #10
 80029b0:	4610      	mov	r0, r2
 80029b2:	4619      	mov	r1, r3
 80029b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029b8:	2200      	movs	r2, #0
 80029ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80029bc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80029be:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80029c2:	f7fd fc7d 	bl	80002c0 <__aeabi_uldivmod>
 80029c6:	4602      	mov	r2, r0
 80029c8:	460b      	mov	r3, r1
 80029ca:	4613      	mov	r3, r2
 80029cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80029d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0x458>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	0f1b      	lsrs	r3, r3, #28
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80029de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80029e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80029e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80029ee:	e003      	b.n	80029f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029f0:	4b06      	ldr	r3, [pc, #24]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0x45c>)
 80029f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80029f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	37b8      	adds	r7, #184	@ 0xb8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a06:	bf00      	nop
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	00f42400 	.word	0x00f42400

08002a10 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e28d      	b.n	8002f3e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f000 8083 	beq.w	8002b36 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002a30:	4b94      	ldr	r3, [pc, #592]	@ (8002c84 <HAL_RCC_OscConfig+0x274>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f003 030c 	and.w	r3, r3, #12
 8002a38:	2b04      	cmp	r3, #4
 8002a3a:	d019      	beq.n	8002a70 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002a3c:	4b91      	ldr	r3, [pc, #580]	@ (8002c84 <HAL_RCC_OscConfig+0x274>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f003 030c 	and.w	r3, r3, #12
        || \
 8002a44:	2b08      	cmp	r3, #8
 8002a46:	d106      	bne.n	8002a56 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002a48:	4b8e      	ldr	r3, [pc, #568]	@ (8002c84 <HAL_RCC_OscConfig+0x274>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a54:	d00c      	beq.n	8002a70 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a56:	4b8b      	ldr	r3, [pc, #556]	@ (8002c84 <HAL_RCC_OscConfig+0x274>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002a5e:	2b0c      	cmp	r3, #12
 8002a60:	d112      	bne.n	8002a88 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a62:	4b88      	ldr	r3, [pc, #544]	@ (8002c84 <HAL_RCC_OscConfig+0x274>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a6e:	d10b      	bne.n	8002a88 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a70:	4b84      	ldr	r3, [pc, #528]	@ (8002c84 <HAL_RCC_OscConfig+0x274>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d05b      	beq.n	8002b34 <HAL_RCC_OscConfig+0x124>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d157      	bne.n	8002b34 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e25a      	b.n	8002f3e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a90:	d106      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x90>
 8002a92:	4b7c      	ldr	r3, [pc, #496]	@ (8002c84 <HAL_RCC_OscConfig+0x274>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a7b      	ldr	r2, [pc, #492]	@ (8002c84 <HAL_RCC_OscConfig+0x274>)
 8002a98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	e01d      	b.n	8002adc <HAL_RCC_OscConfig+0xcc>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_RCC_OscConfig+0xb4>
 8002aaa:	4b76      	ldr	r3, [pc, #472]	@ (8002c84 <HAL_RCC_OscConfig+0x274>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a75      	ldr	r2, [pc, #468]	@ (8002c84 <HAL_RCC_OscConfig+0x274>)
 8002ab0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	4b73      	ldr	r3, [pc, #460]	@ (8002c84 <HAL_RCC_OscConfig+0x274>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a72      	ldr	r2, [pc, #456]	@ (8002c84 <HAL_RCC_OscConfig+0x274>)
 8002abc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	e00b      	b.n	8002adc <HAL_RCC_OscConfig+0xcc>
 8002ac4:	4b6f      	ldr	r3, [pc, #444]	@ (8002c84 <HAL_RCC_OscConfig+0x274>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a6e      	ldr	r2, [pc, #440]	@ (8002c84 <HAL_RCC_OscConfig+0x274>)
 8002aca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ace:	6013      	str	r3, [r2, #0]
 8002ad0:	4b6c      	ldr	r3, [pc, #432]	@ (8002c84 <HAL_RCC_OscConfig+0x274>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a6b      	ldr	r2, [pc, #428]	@ (8002c84 <HAL_RCC_OscConfig+0x274>)
 8002ad6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ada:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d013      	beq.n	8002b0c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae4:	f7fe fd26 	bl	8001534 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aec:	f7fe fd22 	bl	8001534 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b64      	cmp	r3, #100	@ 0x64
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e21f      	b.n	8002f3e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afe:	4b61      	ldr	r3, [pc, #388]	@ (8002c84 <HAL_RCC_OscConfig+0x274>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0f0      	beq.n	8002aec <HAL_RCC_OscConfig+0xdc>
 8002b0a:	e014      	b.n	8002b36 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b0c:	f7fe fd12 	bl	8001534 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b14:	f7fe fd0e 	bl	8001534 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b64      	cmp	r3, #100	@ 0x64
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e20b      	b.n	8002f3e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b26:	4b57      	ldr	r3, [pc, #348]	@ (8002c84 <HAL_RCC_OscConfig+0x274>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1f0      	bne.n	8002b14 <HAL_RCC_OscConfig+0x104>
 8002b32:	e000      	b.n	8002b36 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d06f      	beq.n	8002c22 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002b42:	4b50      	ldr	r3, [pc, #320]	@ (8002c84 <HAL_RCC_OscConfig+0x274>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 030c 	and.w	r3, r3, #12
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d017      	beq.n	8002b7e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002b4e:	4b4d      	ldr	r3, [pc, #308]	@ (8002c84 <HAL_RCC_OscConfig+0x274>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 030c 	and.w	r3, r3, #12
        || \
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d105      	bne.n	8002b66 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002b5a:	4b4a      	ldr	r3, [pc, #296]	@ (8002c84 <HAL_RCC_OscConfig+0x274>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00b      	beq.n	8002b7e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b66:	4b47      	ldr	r3, [pc, #284]	@ (8002c84 <HAL_RCC_OscConfig+0x274>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002b6e:	2b0c      	cmp	r3, #12
 8002b70:	d11c      	bne.n	8002bac <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b72:	4b44      	ldr	r3, [pc, #272]	@ (8002c84 <HAL_RCC_OscConfig+0x274>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d116      	bne.n	8002bac <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b7e:	4b41      	ldr	r3, [pc, #260]	@ (8002c84 <HAL_RCC_OscConfig+0x274>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d005      	beq.n	8002b96 <HAL_RCC_OscConfig+0x186>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d001      	beq.n	8002b96 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e1d3      	b.n	8002f3e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b96:	4b3b      	ldr	r3, [pc, #236]	@ (8002c84 <HAL_RCC_OscConfig+0x274>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	4937      	ldr	r1, [pc, #220]	@ (8002c84 <HAL_RCC_OscConfig+0x274>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002baa:	e03a      	b.n	8002c22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d020      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bb4:	4b34      	ldr	r3, [pc, #208]	@ (8002c88 <HAL_RCC_OscConfig+0x278>)
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bba:	f7fe fcbb 	bl	8001534 <HAL_GetTick>
 8002bbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc0:	e008      	b.n	8002bd4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bc2:	f7fe fcb7 	bl	8001534 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e1b4      	b.n	8002f3e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd4:	4b2b      	ldr	r3, [pc, #172]	@ (8002c84 <HAL_RCC_OscConfig+0x274>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d0f0      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be0:	4b28      	ldr	r3, [pc, #160]	@ (8002c84 <HAL_RCC_OscConfig+0x274>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	4925      	ldr	r1, [pc, #148]	@ (8002c84 <HAL_RCC_OscConfig+0x274>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	600b      	str	r3, [r1, #0]
 8002bf4:	e015      	b.n	8002c22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bf6:	4b24      	ldr	r3, [pc, #144]	@ (8002c88 <HAL_RCC_OscConfig+0x278>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfc:	f7fe fc9a 	bl	8001534 <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c02:	e008      	b.n	8002c16 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c04:	f7fe fc96 	bl	8001534 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e193      	b.n	8002f3e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c16:	4b1b      	ldr	r3, [pc, #108]	@ (8002c84 <HAL_RCC_OscConfig+0x274>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1f0      	bne.n	8002c04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0308 	and.w	r3, r3, #8
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d036      	beq.n	8002c9c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d016      	beq.n	8002c64 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c36:	4b15      	ldr	r3, [pc, #84]	@ (8002c8c <HAL_RCC_OscConfig+0x27c>)
 8002c38:	2201      	movs	r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c3c:	f7fe fc7a 	bl	8001534 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c44:	f7fe fc76 	bl	8001534 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e173      	b.n	8002f3e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c56:	4b0b      	ldr	r3, [pc, #44]	@ (8002c84 <HAL_RCC_OscConfig+0x274>)
 8002c58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0f0      	beq.n	8002c44 <HAL_RCC_OscConfig+0x234>
 8002c62:	e01b      	b.n	8002c9c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c64:	4b09      	ldr	r3, [pc, #36]	@ (8002c8c <HAL_RCC_OscConfig+0x27c>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c6a:	f7fe fc63 	bl	8001534 <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c70:	e00e      	b.n	8002c90 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c72:	f7fe fc5f 	bl	8001534 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d907      	bls.n	8002c90 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e15c      	b.n	8002f3e <HAL_RCC_OscConfig+0x52e>
 8002c84:	40023800 	.word	0x40023800
 8002c88:	42470000 	.word	0x42470000
 8002c8c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c90:	4b8a      	ldr	r3, [pc, #552]	@ (8002ebc <HAL_RCC_OscConfig+0x4ac>)
 8002c92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d1ea      	bne.n	8002c72 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f000 8097 	beq.w	8002dd8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002caa:	2300      	movs	r3, #0
 8002cac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cae:	4b83      	ldr	r3, [pc, #524]	@ (8002ebc <HAL_RCC_OscConfig+0x4ac>)
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10f      	bne.n	8002cda <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cba:	2300      	movs	r3, #0
 8002cbc:	60bb      	str	r3, [r7, #8]
 8002cbe:	4b7f      	ldr	r3, [pc, #508]	@ (8002ebc <HAL_RCC_OscConfig+0x4ac>)
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc2:	4a7e      	ldr	r2, [pc, #504]	@ (8002ebc <HAL_RCC_OscConfig+0x4ac>)
 8002cc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cca:	4b7c      	ldr	r3, [pc, #496]	@ (8002ebc <HAL_RCC_OscConfig+0x4ac>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cd2:	60bb      	str	r3, [r7, #8]
 8002cd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cda:	4b79      	ldr	r3, [pc, #484]	@ (8002ec0 <HAL_RCC_OscConfig+0x4b0>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d118      	bne.n	8002d18 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ce6:	4b76      	ldr	r3, [pc, #472]	@ (8002ec0 <HAL_RCC_OscConfig+0x4b0>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a75      	ldr	r2, [pc, #468]	@ (8002ec0 <HAL_RCC_OscConfig+0x4b0>)
 8002cec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cf2:	f7fe fc1f 	bl	8001534 <HAL_GetTick>
 8002cf6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf8:	e008      	b.n	8002d0c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cfa:	f7fe fc1b 	bl	8001534 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e118      	b.n	8002f3e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d0c:	4b6c      	ldr	r3, [pc, #432]	@ (8002ec0 <HAL_RCC_OscConfig+0x4b0>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d0f0      	beq.n	8002cfa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d106      	bne.n	8002d2e <HAL_RCC_OscConfig+0x31e>
 8002d20:	4b66      	ldr	r3, [pc, #408]	@ (8002ebc <HAL_RCC_OscConfig+0x4ac>)
 8002d22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d24:	4a65      	ldr	r2, [pc, #404]	@ (8002ebc <HAL_RCC_OscConfig+0x4ac>)
 8002d26:	f043 0301 	orr.w	r3, r3, #1
 8002d2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d2c:	e01c      	b.n	8002d68 <HAL_RCC_OscConfig+0x358>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	2b05      	cmp	r3, #5
 8002d34:	d10c      	bne.n	8002d50 <HAL_RCC_OscConfig+0x340>
 8002d36:	4b61      	ldr	r3, [pc, #388]	@ (8002ebc <HAL_RCC_OscConfig+0x4ac>)
 8002d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d3a:	4a60      	ldr	r2, [pc, #384]	@ (8002ebc <HAL_RCC_OscConfig+0x4ac>)
 8002d3c:	f043 0304 	orr.w	r3, r3, #4
 8002d40:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d42:	4b5e      	ldr	r3, [pc, #376]	@ (8002ebc <HAL_RCC_OscConfig+0x4ac>)
 8002d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d46:	4a5d      	ldr	r2, [pc, #372]	@ (8002ebc <HAL_RCC_OscConfig+0x4ac>)
 8002d48:	f043 0301 	orr.w	r3, r3, #1
 8002d4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d4e:	e00b      	b.n	8002d68 <HAL_RCC_OscConfig+0x358>
 8002d50:	4b5a      	ldr	r3, [pc, #360]	@ (8002ebc <HAL_RCC_OscConfig+0x4ac>)
 8002d52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d54:	4a59      	ldr	r2, [pc, #356]	@ (8002ebc <HAL_RCC_OscConfig+0x4ac>)
 8002d56:	f023 0301 	bic.w	r3, r3, #1
 8002d5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d5c:	4b57      	ldr	r3, [pc, #348]	@ (8002ebc <HAL_RCC_OscConfig+0x4ac>)
 8002d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d60:	4a56      	ldr	r2, [pc, #344]	@ (8002ebc <HAL_RCC_OscConfig+0x4ac>)
 8002d62:	f023 0304 	bic.w	r3, r3, #4
 8002d66:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d015      	beq.n	8002d9c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d70:	f7fe fbe0 	bl	8001534 <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d76:	e00a      	b.n	8002d8e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d78:	f7fe fbdc 	bl	8001534 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e0d7      	b.n	8002f3e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d8e:	4b4b      	ldr	r3, [pc, #300]	@ (8002ebc <HAL_RCC_OscConfig+0x4ac>)
 8002d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d0ee      	beq.n	8002d78 <HAL_RCC_OscConfig+0x368>
 8002d9a:	e014      	b.n	8002dc6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d9c:	f7fe fbca 	bl	8001534 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002da2:	e00a      	b.n	8002dba <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002da4:	f7fe fbc6 	bl	8001534 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e0c1      	b.n	8002f3e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dba:	4b40      	ldr	r3, [pc, #256]	@ (8002ebc <HAL_RCC_OscConfig+0x4ac>)
 8002dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1ee      	bne.n	8002da4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002dc6:	7dfb      	ldrb	r3, [r7, #23]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d105      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dcc:	4b3b      	ldr	r3, [pc, #236]	@ (8002ebc <HAL_RCC_OscConfig+0x4ac>)
 8002dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd0:	4a3a      	ldr	r2, [pc, #232]	@ (8002ebc <HAL_RCC_OscConfig+0x4ac>)
 8002dd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dd6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f000 80ad 	beq.w	8002f3c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002de2:	4b36      	ldr	r3, [pc, #216]	@ (8002ebc <HAL_RCC_OscConfig+0x4ac>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 030c 	and.w	r3, r3, #12
 8002dea:	2b08      	cmp	r3, #8
 8002dec:	d060      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d145      	bne.n	8002e82 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002df6:	4b33      	ldr	r3, [pc, #204]	@ (8002ec4 <HAL_RCC_OscConfig+0x4b4>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfc:	f7fe fb9a 	bl	8001534 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e04:	f7fe fb96 	bl	8001534 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e093      	b.n	8002f3e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e16:	4b29      	ldr	r3, [pc, #164]	@ (8002ebc <HAL_RCC_OscConfig+0x4ac>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1f0      	bne.n	8002e04 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	69da      	ldr	r2, [r3, #28]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e30:	019b      	lsls	r3, r3, #6
 8002e32:	431a      	orrs	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e38:	085b      	lsrs	r3, r3, #1
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	041b      	lsls	r3, r3, #16
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e44:	061b      	lsls	r3, r3, #24
 8002e46:	431a      	orrs	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4c:	071b      	lsls	r3, r3, #28
 8002e4e:	491b      	ldr	r1, [pc, #108]	@ (8002ebc <HAL_RCC_OscConfig+0x4ac>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e54:	4b1b      	ldr	r3, [pc, #108]	@ (8002ec4 <HAL_RCC_OscConfig+0x4b4>)
 8002e56:	2201      	movs	r2, #1
 8002e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5a:	f7fe fb6b 	bl	8001534 <HAL_GetTick>
 8002e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e60:	e008      	b.n	8002e74 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e62:	f7fe fb67 	bl	8001534 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e064      	b.n	8002f3e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e74:	4b11      	ldr	r3, [pc, #68]	@ (8002ebc <HAL_RCC_OscConfig+0x4ac>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d0f0      	beq.n	8002e62 <HAL_RCC_OscConfig+0x452>
 8002e80:	e05c      	b.n	8002f3c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e82:	4b10      	ldr	r3, [pc, #64]	@ (8002ec4 <HAL_RCC_OscConfig+0x4b4>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e88:	f7fe fb54 	bl	8001534 <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e90:	f7fe fb50 	bl	8001534 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e04d      	b.n	8002f3e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea2:	4b06      	ldr	r3, [pc, #24]	@ (8002ebc <HAL_RCC_OscConfig+0x4ac>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1f0      	bne.n	8002e90 <HAL_RCC_OscConfig+0x480>
 8002eae:	e045      	b.n	8002f3c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d107      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e040      	b.n	8002f3e <HAL_RCC_OscConfig+0x52e>
 8002ebc:	40023800 	.word	0x40023800
 8002ec0:	40007000 	.word	0x40007000
 8002ec4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ec8:	4b1f      	ldr	r3, [pc, #124]	@ (8002f48 <HAL_RCC_OscConfig+0x538>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d030      	beq.n	8002f38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d129      	bne.n	8002f38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d122      	bne.n	8002f38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ef8:	4013      	ands	r3, r2
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002efe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d119      	bne.n	8002f38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f0e:	085b      	lsrs	r3, r3, #1
 8002f10:	3b01      	subs	r3, #1
 8002f12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d10f      	bne.n	8002f38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d107      	bne.n	8002f38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f32:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d001      	beq.n	8002f3c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e000      	b.n	8002f3e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3718      	adds	r7, #24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	40023800 	.word	0x40023800

08002f4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e07b      	b.n	8003056 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d108      	bne.n	8002f78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f6e:	d009      	beq.n	8002f84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	61da      	str	r2, [r3, #28]
 8002f76:	e005      	b.n	8002f84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d106      	bne.n	8002fa4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7fe f89e 	bl	80010e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	431a      	orrs	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	431a      	orrs	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ffe:	431a      	orrs	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003008:	ea42 0103 	orr.w	r1, r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003010:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	430a      	orrs	r2, r1
 800301a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	0c1b      	lsrs	r3, r3, #16
 8003022:	f003 0104 	and.w	r1, r3, #4
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302a:	f003 0210 	and.w	r2, r3, #16
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	69da      	ldr	r2, [r3, #28]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003044:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b088      	sub	sp, #32
 8003062:	af00      	add	r7, sp, #0
 8003064:	60f8      	str	r0, [r7, #12]
 8003066:	60b9      	str	r1, [r7, #8]
 8003068:	603b      	str	r3, [r7, #0]
 800306a:	4613      	mov	r3, r2
 800306c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800306e:	f7fe fa61 	bl	8001534 <HAL_GetTick>
 8003072:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003074:	88fb      	ldrh	r3, [r7, #6]
 8003076:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b01      	cmp	r3, #1
 8003082:	d001      	beq.n	8003088 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003084:	2302      	movs	r3, #2
 8003086:	e12a      	b.n	80032de <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d002      	beq.n	8003094 <HAL_SPI_Transmit+0x36>
 800308e:	88fb      	ldrh	r3, [r7, #6]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e122      	b.n	80032de <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d101      	bne.n	80030a6 <HAL_SPI_Transmit+0x48>
 80030a2:	2302      	movs	r3, #2
 80030a4:	e11b      	b.n	80032de <HAL_SPI_Transmit+0x280>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2203      	movs	r2, #3
 80030b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	88fa      	ldrh	r2, [r7, #6]
 80030c6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	88fa      	ldrh	r2, [r7, #6]
 80030cc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030f4:	d10f      	bne.n	8003116 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003104:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003114:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003120:	2b40      	cmp	r3, #64	@ 0x40
 8003122:	d007      	beq.n	8003134 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003132:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800313c:	d152      	bne.n	80031e4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d002      	beq.n	800314c <HAL_SPI_Transmit+0xee>
 8003146:	8b7b      	ldrh	r3, [r7, #26]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d145      	bne.n	80031d8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003150:	881a      	ldrh	r2, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800315c:	1c9a      	adds	r2, r3, #2
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003166:	b29b      	uxth	r3, r3
 8003168:	3b01      	subs	r3, #1
 800316a:	b29a      	uxth	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003170:	e032      	b.n	80031d8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b02      	cmp	r3, #2
 800317e:	d112      	bne.n	80031a6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003184:	881a      	ldrh	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003190:	1c9a      	adds	r2, r3, #2
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800319a:	b29b      	uxth	r3, r3
 800319c:	3b01      	subs	r3, #1
 800319e:	b29a      	uxth	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80031a4:	e018      	b.n	80031d8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031a6:	f7fe f9c5 	bl	8001534 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d803      	bhi.n	80031be <HAL_SPI_Transmit+0x160>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031bc:	d102      	bne.n	80031c4 <HAL_SPI_Transmit+0x166>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d109      	bne.n	80031d8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e082      	b.n	80032de <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031dc:	b29b      	uxth	r3, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1c7      	bne.n	8003172 <HAL_SPI_Transmit+0x114>
 80031e2:	e053      	b.n	800328c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d002      	beq.n	80031f2 <HAL_SPI_Transmit+0x194>
 80031ec:	8b7b      	ldrh	r3, [r7, #26]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d147      	bne.n	8003282 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	330c      	adds	r3, #12
 80031fc:	7812      	ldrb	r2, [r2, #0]
 80031fe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003204:	1c5a      	adds	r2, r3, #1
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800320e:	b29b      	uxth	r3, r3
 8003210:	3b01      	subs	r3, #1
 8003212:	b29a      	uxth	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003218:	e033      	b.n	8003282 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b02      	cmp	r3, #2
 8003226:	d113      	bne.n	8003250 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	330c      	adds	r3, #12
 8003232:	7812      	ldrb	r2, [r2, #0]
 8003234:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800323a:	1c5a      	adds	r2, r3, #1
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003244:	b29b      	uxth	r3, r3
 8003246:	3b01      	subs	r3, #1
 8003248:	b29a      	uxth	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800324e:	e018      	b.n	8003282 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003250:	f7fe f970 	bl	8001534 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	429a      	cmp	r2, r3
 800325e:	d803      	bhi.n	8003268 <HAL_SPI_Transmit+0x20a>
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003266:	d102      	bne.n	800326e <HAL_SPI_Transmit+0x210>
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d109      	bne.n	8003282 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e02d      	b.n	80032de <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003286:	b29b      	uxth	r3, r3
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1c6      	bne.n	800321a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800328c:	69fa      	ldr	r2, [r7, #28]
 800328e:	6839      	ldr	r1, [r7, #0]
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f000 fbd9 	bl	8003a48 <SPI_EndRxTxTransaction>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d002      	beq.n	80032a2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2220      	movs	r2, #32
 80032a0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10a      	bne.n	80032c0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032aa:	2300      	movs	r3, #0
 80032ac:	617b      	str	r3, [r7, #20]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	617b      	str	r3, [r7, #20]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	617b      	str	r3, [r7, #20]
 80032be:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e000      	b.n	80032de <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80032dc:	2300      	movs	r3, #0
  }
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3720      	adds	r7, #32
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b088      	sub	sp, #32
 80032ea:	af02      	add	r7, sp, #8
 80032ec:	60f8      	str	r0, [r7, #12]
 80032ee:	60b9      	str	r1, [r7, #8]
 80032f0:	603b      	str	r3, [r7, #0]
 80032f2:	4613      	mov	r3, r2
 80032f4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d001      	beq.n	8003306 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003302:	2302      	movs	r3, #2
 8003304:	e104      	b.n	8003510 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d002      	beq.n	8003312 <HAL_SPI_Receive+0x2c>
 800330c:	88fb      	ldrh	r3, [r7, #6]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e0fc      	b.n	8003510 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800331e:	d112      	bne.n	8003346 <HAL_SPI_Receive+0x60>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10e      	bne.n	8003346 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2204      	movs	r2, #4
 800332c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003330:	88fa      	ldrh	r2, [r7, #6]
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	4613      	mov	r3, r2
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	68b9      	ldr	r1, [r7, #8]
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f000 f8eb 	bl	8003518 <HAL_SPI_TransmitReceive>
 8003342:	4603      	mov	r3, r0
 8003344:	e0e4      	b.n	8003510 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003346:	f7fe f8f5 	bl	8001534 <HAL_GetTick>
 800334a:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003352:	2b01      	cmp	r3, #1
 8003354:	d101      	bne.n	800335a <HAL_SPI_Receive+0x74>
 8003356:	2302      	movs	r3, #2
 8003358:	e0da      	b.n	8003510 <HAL_SPI_Receive+0x22a>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2204      	movs	r2, #4
 8003366:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	68ba      	ldr	r2, [r7, #8]
 8003374:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	88fa      	ldrh	r2, [r7, #6]
 800337a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	88fa      	ldrh	r2, [r7, #6]
 8003380:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033a8:	d10f      	bne.n	80033ca <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80033c8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033d4:	2b40      	cmp	r3, #64	@ 0x40
 80033d6:	d007      	beq.n	80033e8 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033e6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d170      	bne.n	80034d2 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80033f0:	e035      	b.n	800345e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d115      	bne.n	800342c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f103 020c 	add.w	r2, r3, #12
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800340c:	7812      	ldrb	r2, [r2, #0]
 800340e:	b2d2      	uxtb	r2, r2
 8003410:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003416:	1c5a      	adds	r2, r3, #1
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003420:	b29b      	uxth	r3, r3
 8003422:	3b01      	subs	r3, #1
 8003424:	b29a      	uxth	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800342a:	e018      	b.n	800345e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800342c:	f7fe f882 	bl	8001534 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	429a      	cmp	r2, r3
 800343a:	d803      	bhi.n	8003444 <HAL_SPI_Receive+0x15e>
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003442:	d102      	bne.n	800344a <HAL_SPI_Receive+0x164>
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d109      	bne.n	800345e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e058      	b.n	8003510 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003462:	b29b      	uxth	r3, r3
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1c4      	bne.n	80033f2 <HAL_SPI_Receive+0x10c>
 8003468:	e038      	b.n	80034dc <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	2b01      	cmp	r3, #1
 8003476:	d113      	bne.n	80034a0 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003482:	b292      	uxth	r2, r2
 8003484:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800348a:	1c9a      	adds	r2, r3, #2
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003494:	b29b      	uxth	r3, r3
 8003496:	3b01      	subs	r3, #1
 8003498:	b29a      	uxth	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800349e:	e018      	b.n	80034d2 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034a0:	f7fe f848 	bl	8001534 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d803      	bhi.n	80034b8 <HAL_SPI_Receive+0x1d2>
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b6:	d102      	bne.n	80034be <HAL_SPI_Receive+0x1d8>
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d109      	bne.n	80034d2 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e01e      	b.n	8003510 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1c6      	bne.n	800346a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	6839      	ldr	r1, [r7, #0]
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f000 fa4b 	bl	800397c <SPI_EndRxTransaction>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d002      	beq.n	80034f2 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2220      	movs	r2, #32
 80034f0:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e000      	b.n	8003510 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800350e:	2300      	movs	r3, #0
  }
}
 8003510:	4618      	mov	r0, r3
 8003512:	3718      	adds	r7, #24
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b08a      	sub	sp, #40	@ 0x28
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
 8003524:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003526:	2301      	movs	r3, #1
 8003528:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800352a:	f7fe f803 	bl	8001534 <HAL_GetTick>
 800352e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003536:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800353e:	887b      	ldrh	r3, [r7, #2]
 8003540:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003542:	7ffb      	ldrb	r3, [r7, #31]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d00c      	beq.n	8003562 <HAL_SPI_TransmitReceive+0x4a>
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800354e:	d106      	bne.n	800355e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d102      	bne.n	800355e <HAL_SPI_TransmitReceive+0x46>
 8003558:	7ffb      	ldrb	r3, [r7, #31]
 800355a:	2b04      	cmp	r3, #4
 800355c:	d001      	beq.n	8003562 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800355e:	2302      	movs	r3, #2
 8003560:	e17f      	b.n	8003862 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d005      	beq.n	8003574 <HAL_SPI_TransmitReceive+0x5c>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d002      	beq.n	8003574 <HAL_SPI_TransmitReceive+0x5c>
 800356e:	887b      	ldrh	r3, [r7, #2]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e174      	b.n	8003862 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800357e:	2b01      	cmp	r3, #1
 8003580:	d101      	bne.n	8003586 <HAL_SPI_TransmitReceive+0x6e>
 8003582:	2302      	movs	r3, #2
 8003584:	e16d      	b.n	8003862 <HAL_SPI_TransmitReceive+0x34a>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b04      	cmp	r3, #4
 8003598:	d003      	beq.n	80035a2 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2205      	movs	r2, #5
 800359e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	887a      	ldrh	r2, [r7, #2]
 80035b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	887a      	ldrh	r2, [r7, #2]
 80035b8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	68ba      	ldr	r2, [r7, #8]
 80035be:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	887a      	ldrh	r2, [r7, #2]
 80035c4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	887a      	ldrh	r2, [r7, #2]
 80035ca:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035e2:	2b40      	cmp	r3, #64	@ 0x40
 80035e4:	d007      	beq.n	80035f6 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035fe:	d17e      	bne.n	80036fe <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d002      	beq.n	800360e <HAL_SPI_TransmitReceive+0xf6>
 8003608:	8afb      	ldrh	r3, [r7, #22]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d16c      	bne.n	80036e8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003612:	881a      	ldrh	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361e:	1c9a      	adds	r2, r3, #2
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003628:	b29b      	uxth	r3, r3
 800362a:	3b01      	subs	r3, #1
 800362c:	b29a      	uxth	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003632:	e059      	b.n	80036e8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b02      	cmp	r3, #2
 8003640:	d11b      	bne.n	800367a <HAL_SPI_TransmitReceive+0x162>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003646:	b29b      	uxth	r3, r3
 8003648:	2b00      	cmp	r3, #0
 800364a:	d016      	beq.n	800367a <HAL_SPI_TransmitReceive+0x162>
 800364c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800364e:	2b01      	cmp	r3, #1
 8003650:	d113      	bne.n	800367a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003656:	881a      	ldrh	r2, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003662:	1c9a      	adds	r2, r3, #2
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800366c:	b29b      	uxth	r3, r3
 800366e:	3b01      	subs	r3, #1
 8003670:	b29a      	uxth	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003676:	2300      	movs	r3, #0
 8003678:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b01      	cmp	r3, #1
 8003686:	d119      	bne.n	80036bc <HAL_SPI_TransmitReceive+0x1a4>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800368c:	b29b      	uxth	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d014      	beq.n	80036bc <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68da      	ldr	r2, [r3, #12]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800369c:	b292      	uxth	r2, r2
 800369e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036a4:	1c9a      	adds	r2, r3, #2
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	3b01      	subs	r3, #1
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80036b8:	2301      	movs	r3, #1
 80036ba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80036bc:	f7fd ff3a 	bl	8001534 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	6a3b      	ldr	r3, [r7, #32]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d80d      	bhi.n	80036e8 <HAL_SPI_TransmitReceive+0x1d0>
 80036cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d2:	d009      	beq.n	80036e8 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e0bc      	b.n	8003862 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1a0      	bne.n	8003634 <HAL_SPI_TransmitReceive+0x11c>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d19b      	bne.n	8003634 <HAL_SPI_TransmitReceive+0x11c>
 80036fc:	e082      	b.n	8003804 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d002      	beq.n	800370c <HAL_SPI_TransmitReceive+0x1f4>
 8003706:	8afb      	ldrh	r3, [r7, #22]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d171      	bne.n	80037f0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	330c      	adds	r3, #12
 8003716:	7812      	ldrb	r2, [r2, #0]
 8003718:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800371e:	1c5a      	adds	r2, r3, #1
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003728:	b29b      	uxth	r3, r3
 800372a:	3b01      	subs	r3, #1
 800372c:	b29a      	uxth	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003732:	e05d      	b.n	80037f0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b02      	cmp	r3, #2
 8003740:	d11c      	bne.n	800377c <HAL_SPI_TransmitReceive+0x264>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003746:	b29b      	uxth	r3, r3
 8003748:	2b00      	cmp	r3, #0
 800374a:	d017      	beq.n	800377c <HAL_SPI_TransmitReceive+0x264>
 800374c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374e:	2b01      	cmp	r3, #1
 8003750:	d114      	bne.n	800377c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	330c      	adds	r3, #12
 800375c:	7812      	ldrb	r2, [r2, #0]
 800375e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003764:	1c5a      	adds	r2, r3, #1
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800376e:	b29b      	uxth	r3, r3
 8003770:	3b01      	subs	r3, #1
 8003772:	b29a      	uxth	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003778:	2300      	movs	r3, #0
 800377a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	2b01      	cmp	r3, #1
 8003788:	d119      	bne.n	80037be <HAL_SPI_TransmitReceive+0x2a6>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800378e:	b29b      	uxth	r3, r3
 8003790:	2b00      	cmp	r3, #0
 8003792:	d014      	beq.n	80037be <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68da      	ldr	r2, [r3, #12]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800379e:	b2d2      	uxtb	r2, r2
 80037a0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037a6:	1c5a      	adds	r2, r3, #1
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	3b01      	subs	r3, #1
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80037ba:	2301      	movs	r3, #1
 80037bc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80037be:	f7fd feb9 	bl	8001534 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	6a3b      	ldr	r3, [r7, #32]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d803      	bhi.n	80037d6 <HAL_SPI_TransmitReceive+0x2be>
 80037ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d4:	d102      	bne.n	80037dc <HAL_SPI_TransmitReceive+0x2c4>
 80037d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d109      	bne.n	80037f0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e038      	b.n	8003862 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d19c      	bne.n	8003734 <HAL_SPI_TransmitReceive+0x21c>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037fe:	b29b      	uxth	r3, r3
 8003800:	2b00      	cmp	r3, #0
 8003802:	d197      	bne.n	8003734 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003804:	6a3a      	ldr	r2, [r7, #32]
 8003806:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003808:	68f8      	ldr	r0, [r7, #12]
 800380a:	f000 f91d 	bl	8003a48 <SPI_EndRxTxTransaction>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d008      	beq.n	8003826 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2220      	movs	r2, #32
 8003818:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e01d      	b.n	8003862 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10a      	bne.n	8003844 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800382e:	2300      	movs	r3, #0
 8003830:	613b      	str	r3, [r7, #16]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	613b      	str	r3, [r7, #16]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	613b      	str	r3, [r7, #16]
 8003842:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e000      	b.n	8003862 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003860:	2300      	movs	r3, #0
  }
}
 8003862:	4618      	mov	r0, r3
 8003864:	3728      	adds	r7, #40	@ 0x28
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
	...

0800386c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b088      	sub	sp, #32
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	603b      	str	r3, [r7, #0]
 8003878:	4613      	mov	r3, r2
 800387a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800387c:	f7fd fe5a 	bl	8001534 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003884:	1a9b      	subs	r3, r3, r2
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	4413      	add	r3, r2
 800388a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800388c:	f7fd fe52 	bl	8001534 <HAL_GetTick>
 8003890:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003892:	4b39      	ldr	r3, [pc, #228]	@ (8003978 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	015b      	lsls	r3, r3, #5
 8003898:	0d1b      	lsrs	r3, r3, #20
 800389a:	69fa      	ldr	r2, [r7, #28]
 800389c:	fb02 f303 	mul.w	r3, r2, r3
 80038a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038a2:	e055      	b.n	8003950 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038aa:	d051      	beq.n	8003950 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80038ac:	f7fd fe42 	bl	8001534 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	69fa      	ldr	r2, [r7, #28]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d902      	bls.n	80038c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d13d      	bne.n	800393e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80038d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038da:	d111      	bne.n	8003900 <SPI_WaitFlagStateUntilTimeout+0x94>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038e4:	d004      	beq.n	80038f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038ee:	d107      	bne.n	8003900 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003904:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003908:	d10f      	bne.n	800392a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003928:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e018      	b.n	8003970 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d102      	bne.n	800394a <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8003944:	2300      	movs	r3, #0
 8003946:	61fb      	str	r3, [r7, #28]
 8003948:	e002      	b.n	8003950 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	3b01      	subs	r3, #1
 800394e:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689a      	ldr	r2, [r3, #8]
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	4013      	ands	r3, r2
 800395a:	68ba      	ldr	r2, [r7, #8]
 800395c:	429a      	cmp	r2, r3
 800395e:	bf0c      	ite	eq
 8003960:	2301      	moveq	r3, #1
 8003962:	2300      	movne	r3, #0
 8003964:	b2db      	uxtb	r3, r3
 8003966:	461a      	mov	r2, r3
 8003968:	79fb      	ldrb	r3, [r7, #7]
 800396a:	429a      	cmp	r2, r3
 800396c:	d19a      	bne.n	80038a4 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3720      	adds	r7, #32
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	20000028 	.word	0x20000028

0800397c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af02      	add	r7, sp, #8
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003990:	d111      	bne.n	80039b6 <SPI_EndRxTransaction+0x3a>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800399a:	d004      	beq.n	80039a6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039a4:	d107      	bne.n	80039b6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039b4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80039be:	d12a      	bne.n	8003a16 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039c8:	d012      	beq.n	80039f0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	9300      	str	r3, [sp, #0]
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	2200      	movs	r2, #0
 80039d2:	2180      	movs	r1, #128	@ 0x80
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f7ff ff49 	bl	800386c <SPI_WaitFlagStateUntilTimeout>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d02d      	beq.n	8003a3c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039e4:	f043 0220 	orr.w	r2, r3, #32
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e026      	b.n	8003a3e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	9300      	str	r3, [sp, #0]
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	2200      	movs	r2, #0
 80039f8:	2101      	movs	r1, #1
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f7ff ff36 	bl	800386c <SPI_WaitFlagStateUntilTimeout>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d01a      	beq.n	8003a3c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a0a:	f043 0220 	orr.w	r2, r3, #32
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e013      	b.n	8003a3e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	9300      	str	r3, [sp, #0]
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	2101      	movs	r1, #1
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f7ff ff23 	bl	800386c <SPI_WaitFlagStateUntilTimeout>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d007      	beq.n	8003a3c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a30:	f043 0220 	orr.w	r2, r3, #32
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e000      	b.n	8003a3e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
	...

08003a48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b088      	sub	sp, #32
 8003a4c:	af02      	add	r7, sp, #8
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	9300      	str	r3, [sp, #0]
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	2102      	movs	r1, #2
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f7ff ff04 	bl	800386c <SPI_WaitFlagStateUntilTimeout>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d007      	beq.n	8003a7a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a6e:	f043 0220 	orr.w	r2, r3, #32
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e032      	b.n	8003ae0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003a7a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ae8 <SPI_EndRxTxTransaction+0xa0>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a1b      	ldr	r2, [pc, #108]	@ (8003aec <SPI_EndRxTxTransaction+0xa4>)
 8003a80:	fba2 2303 	umull	r2, r3, r2, r3
 8003a84:	0d5b      	lsrs	r3, r3, #21
 8003a86:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003a8a:	fb02 f303 	mul.w	r3, r2, r3
 8003a8e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a98:	d112      	bne.n	8003ac0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	9300      	str	r3, [sp, #0]
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	2180      	movs	r1, #128	@ 0x80
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f7ff fee1 	bl	800386c <SPI_WaitFlagStateUntilTimeout>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d016      	beq.n	8003ade <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ab4:	f043 0220 	orr.w	r2, r3, #32
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e00f      	b.n	8003ae0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00a      	beq.n	8003adc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ad6:	2b80      	cmp	r3, #128	@ 0x80
 8003ad8:	d0f2      	beq.n	8003ac0 <SPI_EndRxTxTransaction+0x78>
 8003ada:	e000      	b.n	8003ade <SPI_EndRxTxTransaction+0x96>
        break;
 8003adc:	bf00      	nop
  }

  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3718      	adds	r7, #24
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	20000028 	.word	0x20000028
 8003aec:	165e9f81 	.word	0x165e9f81

08003af0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e041      	b.n	8003b86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d106      	bne.n	8003b1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7fd fb60 	bl	80011dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2202      	movs	r2, #2
 8003b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	3304      	adds	r3, #4
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	4610      	mov	r0, r2
 8003b30:	f000 fad8 	bl	80040e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b082      	sub	sp, #8
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d101      	bne.n	8003ba0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e041      	b.n	8003c24 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d106      	bne.n	8003bba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 f839 	bl	8003c2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2202      	movs	r2, #2
 8003bbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	3304      	adds	r3, #4
 8003bca:	4619      	mov	r1, r3
 8003bcc:	4610      	mov	r0, r2
 8003bce:	f000 fa89 	bl	80040e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3708      	adds	r7, #8
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d109      	bne.n	8003c64 <HAL_TIM_PWM_Start+0x24>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	bf14      	ite	ne
 8003c5c:	2301      	movne	r3, #1
 8003c5e:	2300      	moveq	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	e022      	b.n	8003caa <HAL_TIM_PWM_Start+0x6a>
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	2b04      	cmp	r3, #4
 8003c68:	d109      	bne.n	8003c7e <HAL_TIM_PWM_Start+0x3e>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	bf14      	ite	ne
 8003c76:	2301      	movne	r3, #1
 8003c78:	2300      	moveq	r3, #0
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	e015      	b.n	8003caa <HAL_TIM_PWM_Start+0x6a>
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	2b08      	cmp	r3, #8
 8003c82:	d109      	bne.n	8003c98 <HAL_TIM_PWM_Start+0x58>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	bf14      	ite	ne
 8003c90:	2301      	movne	r3, #1
 8003c92:	2300      	moveq	r3, #0
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	e008      	b.n	8003caa <HAL_TIM_PWM_Start+0x6a>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	bf14      	ite	ne
 8003ca4:	2301      	movne	r3, #1
 8003ca6:	2300      	moveq	r3, #0
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e07c      	b.n	8003dac <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d104      	bne.n	8003cc2 <HAL_TIM_PWM_Start+0x82>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2202      	movs	r2, #2
 8003cbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cc0:	e013      	b.n	8003cea <HAL_TIM_PWM_Start+0xaa>
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	2b04      	cmp	r3, #4
 8003cc6:	d104      	bne.n	8003cd2 <HAL_TIM_PWM_Start+0x92>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cd0:	e00b      	b.n	8003cea <HAL_TIM_PWM_Start+0xaa>
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	d104      	bne.n	8003ce2 <HAL_TIM_PWM_Start+0xa2>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2202      	movs	r2, #2
 8003cdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ce0:	e003      	b.n	8003cea <HAL_TIM_PWM_Start+0xaa>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2202      	movs	r2, #2
 8003ce6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	6839      	ldr	r1, [r7, #0]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 fce6 	bl	80046c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a2d      	ldr	r2, [pc, #180]	@ (8003db4 <HAL_TIM_PWM_Start+0x174>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d004      	beq.n	8003d0c <HAL_TIM_PWM_Start+0xcc>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a2c      	ldr	r2, [pc, #176]	@ (8003db8 <HAL_TIM_PWM_Start+0x178>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d101      	bne.n	8003d10 <HAL_TIM_PWM_Start+0xd0>
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e000      	b.n	8003d12 <HAL_TIM_PWM_Start+0xd2>
 8003d10:	2300      	movs	r3, #0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d007      	beq.n	8003d26 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d24:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a22      	ldr	r2, [pc, #136]	@ (8003db4 <HAL_TIM_PWM_Start+0x174>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d022      	beq.n	8003d76 <HAL_TIM_PWM_Start+0x136>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d38:	d01d      	beq.n	8003d76 <HAL_TIM_PWM_Start+0x136>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a1f      	ldr	r2, [pc, #124]	@ (8003dbc <HAL_TIM_PWM_Start+0x17c>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d018      	beq.n	8003d76 <HAL_TIM_PWM_Start+0x136>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a1d      	ldr	r2, [pc, #116]	@ (8003dc0 <HAL_TIM_PWM_Start+0x180>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d013      	beq.n	8003d76 <HAL_TIM_PWM_Start+0x136>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a1c      	ldr	r2, [pc, #112]	@ (8003dc4 <HAL_TIM_PWM_Start+0x184>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d00e      	beq.n	8003d76 <HAL_TIM_PWM_Start+0x136>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a16      	ldr	r2, [pc, #88]	@ (8003db8 <HAL_TIM_PWM_Start+0x178>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d009      	beq.n	8003d76 <HAL_TIM_PWM_Start+0x136>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a18      	ldr	r2, [pc, #96]	@ (8003dc8 <HAL_TIM_PWM_Start+0x188>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d004      	beq.n	8003d76 <HAL_TIM_PWM_Start+0x136>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a16      	ldr	r2, [pc, #88]	@ (8003dcc <HAL_TIM_PWM_Start+0x18c>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d111      	bne.n	8003d9a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f003 0307 	and.w	r3, r3, #7
 8003d80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2b06      	cmp	r3, #6
 8003d86:	d010      	beq.n	8003daa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f042 0201 	orr.w	r2, r2, #1
 8003d96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d98:	e007      	b.n	8003daa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f042 0201 	orr.w	r2, r2, #1
 8003da8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	40010000 	.word	0x40010000
 8003db8:	40010400 	.word	0x40010400
 8003dbc:	40000400 	.word	0x40000400
 8003dc0:	40000800 	.word	0x40000800
 8003dc4:	40000c00 	.word	0x40000c00
 8003dc8:	40014000 	.word	0x40014000
 8003dcc:	40001800 	.word	0x40001800

08003dd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d101      	bne.n	8003dee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003dea:	2302      	movs	r3, #2
 8003dec:	e0ae      	b.n	8003f4c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2b0c      	cmp	r3, #12
 8003dfa:	f200 809f 	bhi.w	8003f3c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003dfe:	a201      	add	r2, pc, #4	@ (adr r2, 8003e04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e04:	08003e39 	.word	0x08003e39
 8003e08:	08003f3d 	.word	0x08003f3d
 8003e0c:	08003f3d 	.word	0x08003f3d
 8003e10:	08003f3d 	.word	0x08003f3d
 8003e14:	08003e79 	.word	0x08003e79
 8003e18:	08003f3d 	.word	0x08003f3d
 8003e1c:	08003f3d 	.word	0x08003f3d
 8003e20:	08003f3d 	.word	0x08003f3d
 8003e24:	08003ebb 	.word	0x08003ebb
 8003e28:	08003f3d 	.word	0x08003f3d
 8003e2c:	08003f3d 	.word	0x08003f3d
 8003e30:	08003f3d 	.word	0x08003f3d
 8003e34:	08003efb 	.word	0x08003efb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68b9      	ldr	r1, [r7, #8]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f000 f9f6 	bl	8004230 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	699a      	ldr	r2, [r3, #24]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f042 0208 	orr.w	r2, r2, #8
 8003e52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	699a      	ldr	r2, [r3, #24]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f022 0204 	bic.w	r2, r2, #4
 8003e62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6999      	ldr	r1, [r3, #24]
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	691a      	ldr	r2, [r3, #16]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	430a      	orrs	r2, r1
 8003e74:	619a      	str	r2, [r3, #24]
      break;
 8003e76:	e064      	b.n	8003f42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68b9      	ldr	r1, [r7, #8]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f000 fa46 	bl	8004310 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	699a      	ldr	r2, [r3, #24]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	699a      	ldr	r2, [r3, #24]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ea2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6999      	ldr	r1, [r3, #24]
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	021a      	lsls	r2, r3, #8
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	619a      	str	r2, [r3, #24]
      break;
 8003eb8:	e043      	b.n	8003f42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68b9      	ldr	r1, [r7, #8]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f000 fa9b 	bl	80043fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	69da      	ldr	r2, [r3, #28]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f042 0208 	orr.w	r2, r2, #8
 8003ed4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	69da      	ldr	r2, [r3, #28]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 0204 	bic.w	r2, r2, #4
 8003ee4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	69d9      	ldr	r1, [r3, #28]
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	691a      	ldr	r2, [r3, #16]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	61da      	str	r2, [r3, #28]
      break;
 8003ef8:	e023      	b.n	8003f42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68b9      	ldr	r1, [r7, #8]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f000 faef 	bl	80044e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	69da      	ldr	r2, [r3, #28]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	69da      	ldr	r2, [r3, #28]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	69d9      	ldr	r1, [r3, #28]
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	021a      	lsls	r2, r3, #8
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	61da      	str	r2, [r3, #28]
      break;
 8003f3a:	e002      	b.n	8003f42 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3718      	adds	r7, #24
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d101      	bne.n	8003f70 <HAL_TIM_ConfigClockSource+0x1c>
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	e0b4      	b.n	80040da <HAL_TIM_ConfigClockSource+0x186>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003f8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fa8:	d03e      	beq.n	8004028 <HAL_TIM_ConfigClockSource+0xd4>
 8003faa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fae:	f200 8087 	bhi.w	80040c0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fb6:	f000 8086 	beq.w	80040c6 <HAL_TIM_ConfigClockSource+0x172>
 8003fba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fbe:	d87f      	bhi.n	80040c0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fc0:	2b70      	cmp	r3, #112	@ 0x70
 8003fc2:	d01a      	beq.n	8003ffa <HAL_TIM_ConfigClockSource+0xa6>
 8003fc4:	2b70      	cmp	r3, #112	@ 0x70
 8003fc6:	d87b      	bhi.n	80040c0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fc8:	2b60      	cmp	r3, #96	@ 0x60
 8003fca:	d050      	beq.n	800406e <HAL_TIM_ConfigClockSource+0x11a>
 8003fcc:	2b60      	cmp	r3, #96	@ 0x60
 8003fce:	d877      	bhi.n	80040c0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fd0:	2b50      	cmp	r3, #80	@ 0x50
 8003fd2:	d03c      	beq.n	800404e <HAL_TIM_ConfigClockSource+0xfa>
 8003fd4:	2b50      	cmp	r3, #80	@ 0x50
 8003fd6:	d873      	bhi.n	80040c0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fd8:	2b40      	cmp	r3, #64	@ 0x40
 8003fda:	d058      	beq.n	800408e <HAL_TIM_ConfigClockSource+0x13a>
 8003fdc:	2b40      	cmp	r3, #64	@ 0x40
 8003fde:	d86f      	bhi.n	80040c0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fe0:	2b30      	cmp	r3, #48	@ 0x30
 8003fe2:	d064      	beq.n	80040ae <HAL_TIM_ConfigClockSource+0x15a>
 8003fe4:	2b30      	cmp	r3, #48	@ 0x30
 8003fe6:	d86b      	bhi.n	80040c0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fe8:	2b20      	cmp	r3, #32
 8003fea:	d060      	beq.n	80040ae <HAL_TIM_ConfigClockSource+0x15a>
 8003fec:	2b20      	cmp	r3, #32
 8003fee:	d867      	bhi.n	80040c0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d05c      	beq.n	80040ae <HAL_TIM_ConfigClockSource+0x15a>
 8003ff4:	2b10      	cmp	r3, #16
 8003ff6:	d05a      	beq.n	80040ae <HAL_TIM_ConfigClockSource+0x15a>
 8003ff8:	e062      	b.n	80040c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800400a:	f000 fb3b 	bl	8004684 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800401c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68ba      	ldr	r2, [r7, #8]
 8004024:	609a      	str	r2, [r3, #8]
      break;
 8004026:	e04f      	b.n	80040c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004038:	f000 fb24 	bl	8004684 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689a      	ldr	r2, [r3, #8]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800404a:	609a      	str	r2, [r3, #8]
      break;
 800404c:	e03c      	b.n	80040c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800405a:	461a      	mov	r2, r3
 800405c:	f000 fa98 	bl	8004590 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2150      	movs	r1, #80	@ 0x50
 8004066:	4618      	mov	r0, r3
 8004068:	f000 faf1 	bl	800464e <TIM_ITRx_SetConfig>
      break;
 800406c:	e02c      	b.n	80040c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800407a:	461a      	mov	r2, r3
 800407c:	f000 fab7 	bl	80045ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2160      	movs	r1, #96	@ 0x60
 8004086:	4618      	mov	r0, r3
 8004088:	f000 fae1 	bl	800464e <TIM_ITRx_SetConfig>
      break;
 800408c:	e01c      	b.n	80040c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800409a:	461a      	mov	r2, r3
 800409c:	f000 fa78 	bl	8004590 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2140      	movs	r1, #64	@ 0x40
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 fad1 	bl	800464e <TIM_ITRx_SetConfig>
      break;
 80040ac:	e00c      	b.n	80040c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4619      	mov	r1, r3
 80040b8:	4610      	mov	r0, r2
 80040ba:	f000 fac8 	bl	800464e <TIM_ITRx_SetConfig>
      break;
 80040be:	e003      	b.n	80040c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	73fb      	strb	r3, [r7, #15]
      break;
 80040c4:	e000      	b.n	80040c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80040c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80040d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
	...

080040e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a43      	ldr	r2, [pc, #268]	@ (8004204 <TIM_Base_SetConfig+0x120>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d013      	beq.n	8004124 <TIM_Base_SetConfig+0x40>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004102:	d00f      	beq.n	8004124 <TIM_Base_SetConfig+0x40>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a40      	ldr	r2, [pc, #256]	@ (8004208 <TIM_Base_SetConfig+0x124>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d00b      	beq.n	8004124 <TIM_Base_SetConfig+0x40>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a3f      	ldr	r2, [pc, #252]	@ (800420c <TIM_Base_SetConfig+0x128>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d007      	beq.n	8004124 <TIM_Base_SetConfig+0x40>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a3e      	ldr	r2, [pc, #248]	@ (8004210 <TIM_Base_SetConfig+0x12c>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d003      	beq.n	8004124 <TIM_Base_SetConfig+0x40>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a3d      	ldr	r2, [pc, #244]	@ (8004214 <TIM_Base_SetConfig+0x130>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d108      	bne.n	8004136 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800412a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	4313      	orrs	r3, r2
 8004134:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a32      	ldr	r2, [pc, #200]	@ (8004204 <TIM_Base_SetConfig+0x120>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d02b      	beq.n	8004196 <TIM_Base_SetConfig+0xb2>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004144:	d027      	beq.n	8004196 <TIM_Base_SetConfig+0xb2>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a2f      	ldr	r2, [pc, #188]	@ (8004208 <TIM_Base_SetConfig+0x124>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d023      	beq.n	8004196 <TIM_Base_SetConfig+0xb2>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a2e      	ldr	r2, [pc, #184]	@ (800420c <TIM_Base_SetConfig+0x128>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d01f      	beq.n	8004196 <TIM_Base_SetConfig+0xb2>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a2d      	ldr	r2, [pc, #180]	@ (8004210 <TIM_Base_SetConfig+0x12c>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d01b      	beq.n	8004196 <TIM_Base_SetConfig+0xb2>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a2c      	ldr	r2, [pc, #176]	@ (8004214 <TIM_Base_SetConfig+0x130>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d017      	beq.n	8004196 <TIM_Base_SetConfig+0xb2>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a2b      	ldr	r2, [pc, #172]	@ (8004218 <TIM_Base_SetConfig+0x134>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d013      	beq.n	8004196 <TIM_Base_SetConfig+0xb2>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a2a      	ldr	r2, [pc, #168]	@ (800421c <TIM_Base_SetConfig+0x138>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d00f      	beq.n	8004196 <TIM_Base_SetConfig+0xb2>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a29      	ldr	r2, [pc, #164]	@ (8004220 <TIM_Base_SetConfig+0x13c>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d00b      	beq.n	8004196 <TIM_Base_SetConfig+0xb2>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a28      	ldr	r2, [pc, #160]	@ (8004224 <TIM_Base_SetConfig+0x140>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d007      	beq.n	8004196 <TIM_Base_SetConfig+0xb2>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a27      	ldr	r2, [pc, #156]	@ (8004228 <TIM_Base_SetConfig+0x144>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d003      	beq.n	8004196 <TIM_Base_SetConfig+0xb2>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a26      	ldr	r2, [pc, #152]	@ (800422c <TIM_Base_SetConfig+0x148>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d108      	bne.n	80041a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800419c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	689a      	ldr	r2, [r3, #8]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a0e      	ldr	r2, [pc, #56]	@ (8004204 <TIM_Base_SetConfig+0x120>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d003      	beq.n	80041d6 <TIM_Base_SetConfig+0xf2>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a10      	ldr	r2, [pc, #64]	@ (8004214 <TIM_Base_SetConfig+0x130>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d103      	bne.n	80041de <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	691a      	ldr	r2, [r3, #16]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f043 0204 	orr.w	r2, r3, #4
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2201      	movs	r2, #1
 80041ee:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	601a      	str	r2, [r3, #0]
}
 80041f6:	bf00      	nop
 80041f8:	3714      	adds	r7, #20
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	40010000 	.word	0x40010000
 8004208:	40000400 	.word	0x40000400
 800420c:	40000800 	.word	0x40000800
 8004210:	40000c00 	.word	0x40000c00
 8004214:	40010400 	.word	0x40010400
 8004218:	40014000 	.word	0x40014000
 800421c:	40014400 	.word	0x40014400
 8004220:	40014800 	.word	0x40014800
 8004224:	40001800 	.word	0x40001800
 8004228:	40001c00 	.word	0x40001c00
 800422c:	40002000 	.word	0x40002000

08004230 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004230:	b480      	push	{r7}
 8004232:	b087      	sub	sp, #28
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	f023 0201 	bic.w	r2, r3, #1
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800425e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f023 0303 	bic.w	r3, r3, #3
 8004266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	4313      	orrs	r3, r2
 8004270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	f023 0302 	bic.w	r3, r3, #2
 8004278:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	4313      	orrs	r3, r2
 8004282:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a20      	ldr	r2, [pc, #128]	@ (8004308 <TIM_OC1_SetConfig+0xd8>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d003      	beq.n	8004294 <TIM_OC1_SetConfig+0x64>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a1f      	ldr	r2, [pc, #124]	@ (800430c <TIM_OC1_SetConfig+0xdc>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d10c      	bne.n	80042ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	f023 0308 	bic.w	r3, r3, #8
 800429a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	697a      	ldr	r2, [r7, #20]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f023 0304 	bic.w	r3, r3, #4
 80042ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a15      	ldr	r2, [pc, #84]	@ (8004308 <TIM_OC1_SetConfig+0xd8>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d003      	beq.n	80042be <TIM_OC1_SetConfig+0x8e>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a14      	ldr	r2, [pc, #80]	@ (800430c <TIM_OC1_SetConfig+0xdc>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d111      	bne.n	80042e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80042cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	4313      	orrs	r3, r2
 80042e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	693a      	ldr	r2, [r7, #16]
 80042e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	68fa      	ldr	r2, [r7, #12]
 80042ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	685a      	ldr	r2, [r3, #4]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	621a      	str	r2, [r3, #32]
}
 80042fc:	bf00      	nop
 80042fe:	371c      	adds	r7, #28
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr
 8004308:	40010000 	.word	0x40010000
 800430c:	40010400 	.word	0x40010400

08004310 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004310:	b480      	push	{r7}
 8004312:	b087      	sub	sp, #28
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a1b      	ldr	r3, [r3, #32]
 8004324:	f023 0210 	bic.w	r2, r3, #16
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800433e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004346:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	021b      	lsls	r3, r3, #8
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	4313      	orrs	r3, r2
 8004352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	f023 0320 	bic.w	r3, r3, #32
 800435a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	011b      	lsls	r3, r3, #4
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	4313      	orrs	r3, r2
 8004366:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a22      	ldr	r2, [pc, #136]	@ (80043f4 <TIM_OC2_SetConfig+0xe4>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d003      	beq.n	8004378 <TIM_OC2_SetConfig+0x68>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a21      	ldr	r2, [pc, #132]	@ (80043f8 <TIM_OC2_SetConfig+0xe8>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d10d      	bne.n	8004394 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800437e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	011b      	lsls	r3, r3, #4
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	4313      	orrs	r3, r2
 800438a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004392:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a17      	ldr	r2, [pc, #92]	@ (80043f4 <TIM_OC2_SetConfig+0xe4>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d003      	beq.n	80043a4 <TIM_OC2_SetConfig+0x94>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a16      	ldr	r2, [pc, #88]	@ (80043f8 <TIM_OC2_SetConfig+0xe8>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d113      	bne.n	80043cc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80043aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80043b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	4313      	orrs	r3, r2
 80043be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	621a      	str	r2, [r3, #32]
}
 80043e6:	bf00      	nop
 80043e8:	371c      	adds	r7, #28
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	40010000 	.word	0x40010000
 80043f8:	40010400 	.word	0x40010400

080043fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b087      	sub	sp, #28
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a1b      	ldr	r3, [r3, #32]
 8004410:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800442a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f023 0303 	bic.w	r3, r3, #3
 8004432:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	4313      	orrs	r3, r2
 800443c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004444:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	021b      	lsls	r3, r3, #8
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	4313      	orrs	r3, r2
 8004450:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a21      	ldr	r2, [pc, #132]	@ (80044dc <TIM_OC3_SetConfig+0xe0>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d003      	beq.n	8004462 <TIM_OC3_SetConfig+0x66>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a20      	ldr	r2, [pc, #128]	@ (80044e0 <TIM_OC3_SetConfig+0xe4>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d10d      	bne.n	800447e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004468:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	021b      	lsls	r3, r3, #8
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	4313      	orrs	r3, r2
 8004474:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800447c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a16      	ldr	r2, [pc, #88]	@ (80044dc <TIM_OC3_SetConfig+0xe0>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d003      	beq.n	800448e <TIM_OC3_SetConfig+0x92>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a15      	ldr	r2, [pc, #84]	@ (80044e0 <TIM_OC3_SetConfig+0xe4>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d113      	bne.n	80044b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004494:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800449c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	011b      	lsls	r3, r3, #4
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	011b      	lsls	r3, r3, #4
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	621a      	str	r2, [r3, #32]
}
 80044d0:	bf00      	nop
 80044d2:	371c      	adds	r7, #28
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	40010000 	.word	0x40010000
 80044e0:	40010400 	.word	0x40010400

080044e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b087      	sub	sp, #28
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a1b      	ldr	r3, [r3, #32]
 80044f8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800451a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	021b      	lsls	r3, r3, #8
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	4313      	orrs	r3, r2
 8004526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800452e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	031b      	lsls	r3, r3, #12
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	4313      	orrs	r3, r2
 800453a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a12      	ldr	r2, [pc, #72]	@ (8004588 <TIM_OC4_SetConfig+0xa4>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d003      	beq.n	800454c <TIM_OC4_SetConfig+0x68>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a11      	ldr	r2, [pc, #68]	@ (800458c <TIM_OC4_SetConfig+0xa8>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d109      	bne.n	8004560 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004552:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	695b      	ldr	r3, [r3, #20]
 8004558:	019b      	lsls	r3, r3, #6
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	4313      	orrs	r3, r2
 800455e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	621a      	str	r2, [r3, #32]
}
 800457a:	bf00      	nop
 800457c:	371c      	adds	r7, #28
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	40010000 	.word	0x40010000
 800458c:	40010400 	.word	0x40010400

08004590 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004590:	b480      	push	{r7}
 8004592:	b087      	sub	sp, #28
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	f023 0201 	bic.w	r2, r3, #1
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	011b      	lsls	r3, r3, #4
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	f023 030a 	bic.w	r3, r3, #10
 80045cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	621a      	str	r2, [r3, #32]
}
 80045e2:	bf00      	nop
 80045e4:	371c      	adds	r7, #28
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b087      	sub	sp, #28
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	60f8      	str	r0, [r7, #12]
 80045f6:	60b9      	str	r1, [r7, #8]
 80045f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	f023 0210 	bic.w	r2, r3, #16
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004618:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	031b      	lsls	r3, r3, #12
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	4313      	orrs	r3, r2
 8004622:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800462a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	011b      	lsls	r3, r3, #4
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	4313      	orrs	r3, r2
 8004634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	697a      	ldr	r2, [r7, #20]
 8004640:	621a      	str	r2, [r3, #32]
}
 8004642:	bf00      	nop
 8004644:	371c      	adds	r7, #28
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800464e:	b480      	push	{r7}
 8004650:	b085      	sub	sp, #20
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
 8004656:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004664:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	4313      	orrs	r3, r2
 800466c:	f043 0307 	orr.w	r3, r3, #7
 8004670:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	609a      	str	r2, [r3, #8]
}
 8004678:	bf00      	nop
 800467a:	3714      	adds	r7, #20
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004684:	b480      	push	{r7}
 8004686:	b087      	sub	sp, #28
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
 8004690:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800469e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	021a      	lsls	r2, r3, #8
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	431a      	orrs	r2, r3
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	609a      	str	r2, [r3, #8]
}
 80046b8:	bf00      	nop
 80046ba:	371c      	adds	r7, #28
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b087      	sub	sp, #28
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	f003 031f 	and.w	r3, r3, #31
 80046d6:	2201      	movs	r2, #1
 80046d8:	fa02 f303 	lsl.w	r3, r2, r3
 80046dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6a1a      	ldr	r2, [r3, #32]
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	43db      	mvns	r3, r3
 80046e6:	401a      	ands	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6a1a      	ldr	r2, [r3, #32]
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	f003 031f 	and.w	r3, r3, #31
 80046f6:	6879      	ldr	r1, [r7, #4]
 80046f8:	fa01 f303 	lsl.w	r3, r1, r3
 80046fc:	431a      	orrs	r2, r3
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	621a      	str	r2, [r3, #32]
}
 8004702:	bf00      	nop
 8004704:	371c      	adds	r7, #28
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
	...

08004710 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004720:	2b01      	cmp	r3, #1
 8004722:	d101      	bne.n	8004728 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004724:	2302      	movs	r3, #2
 8004726:	e05a      	b.n	80047de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2202      	movs	r2, #2
 8004734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800474e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	4313      	orrs	r3, r2
 8004758:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a21      	ldr	r2, [pc, #132]	@ (80047ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d022      	beq.n	80047b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004774:	d01d      	beq.n	80047b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a1d      	ldr	r2, [pc, #116]	@ (80047f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d018      	beq.n	80047b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a1b      	ldr	r2, [pc, #108]	@ (80047f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d013      	beq.n	80047b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a1a      	ldr	r2, [pc, #104]	@ (80047f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d00e      	beq.n	80047b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a18      	ldr	r2, [pc, #96]	@ (80047fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d009      	beq.n	80047b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a17      	ldr	r2, [pc, #92]	@ (8004800 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d004      	beq.n	80047b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a15      	ldr	r2, [pc, #84]	@ (8004804 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d10c      	bne.n	80047cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3714      	adds	r7, #20
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	40010000 	.word	0x40010000
 80047f0:	40000400 	.word	0x40000400
 80047f4:	40000800 	.word	0x40000800
 80047f8:	40000c00 	.word	0x40000c00
 80047fc:	40010400 	.word	0x40010400
 8004800:	40014000 	.word	0x40014000
 8004804:	40001800 	.word	0x40001800

08004808 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004812:	2300      	movs	r3, #0
 8004814:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800481c:	2b01      	cmp	r3, #1
 800481e:	d101      	bne.n	8004824 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004820:	2302      	movs	r3, #2
 8004822:	e03d      	b.n	80048a0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	4313      	orrs	r3, r2
 8004838:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	4313      	orrs	r3, r2
 8004846:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	4313      	orrs	r3, r2
 8004854:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4313      	orrs	r3, r2
 8004862:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	4313      	orrs	r3, r2
 8004870:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	4313      	orrs	r3, r2
 800487e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	69db      	ldr	r3, [r3, #28]
 800488a:	4313      	orrs	r3, r2
 800488c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3714      	adds	r7, #20
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e042      	b.n	8004944 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d106      	bne.n	80048d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f7fc fcde 	bl	8001294 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2224      	movs	r2, #36	@ 0x24
 80048dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68da      	ldr	r2, [r3, #12]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 f973 	bl	8004bdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	691a      	ldr	r2, [r3, #16]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004904:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	695a      	ldr	r2, [r3, #20]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004914:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68da      	ldr	r2, [r3, #12]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004924:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2220      	movs	r2, #32
 8004930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2220      	movs	r2, #32
 8004938:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3708      	adds	r7, #8
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b08a      	sub	sp, #40	@ 0x28
 8004950:	af02      	add	r7, sp, #8
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	603b      	str	r3, [r7, #0]
 8004958:	4613      	mov	r3, r2
 800495a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800495c:	2300      	movs	r3, #0
 800495e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2b20      	cmp	r3, #32
 800496a:	d175      	bne.n	8004a58 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d002      	beq.n	8004978 <HAL_UART_Transmit+0x2c>
 8004972:	88fb      	ldrh	r3, [r7, #6]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d101      	bne.n	800497c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e06e      	b.n	8004a5a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2221      	movs	r2, #33	@ 0x21
 8004986:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800498a:	f7fc fdd3 	bl	8001534 <HAL_GetTick>
 800498e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	88fa      	ldrh	r2, [r7, #6]
 8004994:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	88fa      	ldrh	r2, [r7, #6]
 800499a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049a4:	d108      	bne.n	80049b8 <HAL_UART_Transmit+0x6c>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d104      	bne.n	80049b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80049ae:	2300      	movs	r3, #0
 80049b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	61bb      	str	r3, [r7, #24]
 80049b6:	e003      	b.n	80049c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049bc:	2300      	movs	r3, #0
 80049be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049c0:	e02e      	b.n	8004a20 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	2200      	movs	r2, #0
 80049ca:	2180      	movs	r1, #128	@ 0x80
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f000 f848 	bl	8004a62 <UART_WaitOnFlagUntilTimeout>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d005      	beq.n	80049e4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2220      	movs	r2, #32
 80049dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e03a      	b.n	8004a5a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10b      	bne.n	8004a02 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	881b      	ldrh	r3, [r3, #0]
 80049ee:	461a      	mov	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	3302      	adds	r3, #2
 80049fe:	61bb      	str	r3, [r7, #24]
 8004a00:	e007      	b.n	8004a12 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	781a      	ldrb	r2, [r3, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	3301      	adds	r3, #1
 8004a10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1cb      	bne.n	80049c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	9300      	str	r3, [sp, #0]
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	2200      	movs	r2, #0
 8004a32:	2140      	movs	r1, #64	@ 0x40
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f000 f814 	bl	8004a62 <UART_WaitOnFlagUntilTimeout>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d005      	beq.n	8004a4c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2220      	movs	r2, #32
 8004a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e006      	b.n	8004a5a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2220      	movs	r2, #32
 8004a50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004a54:	2300      	movs	r3, #0
 8004a56:	e000      	b.n	8004a5a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004a58:	2302      	movs	r3, #2
  }
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3720      	adds	r7, #32
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b086      	sub	sp, #24
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	60f8      	str	r0, [r7, #12]
 8004a6a:	60b9      	str	r1, [r7, #8]
 8004a6c:	603b      	str	r3, [r7, #0]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a72:	e03b      	b.n	8004aec <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a74:	6a3b      	ldr	r3, [r7, #32]
 8004a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a7a:	d037      	beq.n	8004aec <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a7c:	f7fc fd5a 	bl	8001534 <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	6a3a      	ldr	r2, [r7, #32]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d302      	bcc.n	8004a92 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a8c:	6a3b      	ldr	r3, [r7, #32]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e03a      	b.n	8004b0c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	f003 0304 	and.w	r3, r3, #4
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d023      	beq.n	8004aec <UART_WaitOnFlagUntilTimeout+0x8a>
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	2b80      	cmp	r3, #128	@ 0x80
 8004aa8:	d020      	beq.n	8004aec <UART_WaitOnFlagUntilTimeout+0x8a>
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	2b40      	cmp	r3, #64	@ 0x40
 8004aae:	d01d      	beq.n	8004aec <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0308 	and.w	r3, r3, #8
 8004aba:	2b08      	cmp	r3, #8
 8004abc:	d116      	bne.n	8004aec <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004abe:	2300      	movs	r3, #0
 8004ac0:	617b      	str	r3, [r7, #20]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	617b      	str	r3, [r7, #20]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	617b      	str	r3, [r7, #20]
 8004ad2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f000 f81d 	bl	8004b14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2208      	movs	r2, #8
 8004ade:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e00f      	b.n	8004b0c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	4013      	ands	r3, r2
 8004af6:	68ba      	ldr	r2, [r7, #8]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	bf0c      	ite	eq
 8004afc:	2301      	moveq	r3, #1
 8004afe:	2300      	movne	r3, #0
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	461a      	mov	r2, r3
 8004b04:	79fb      	ldrb	r3, [r7, #7]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d0b4      	beq.n	8004a74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3718      	adds	r7, #24
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b095      	sub	sp, #84	@ 0x54
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	330c      	adds	r3, #12
 8004b22:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b26:	e853 3f00 	ldrex	r3, [r3]
 8004b2a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	330c      	adds	r3, #12
 8004b3a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b3c:	643a      	str	r2, [r7, #64]	@ 0x40
 8004b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b40:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b42:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b44:	e841 2300 	strex	r3, r2, [r1]
 8004b48:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1e5      	bne.n	8004b1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	3314      	adds	r3, #20
 8004b56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b58:	6a3b      	ldr	r3, [r7, #32]
 8004b5a:	e853 3f00 	ldrex	r3, [r3]
 8004b5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	f023 0301 	bic.w	r3, r3, #1
 8004b66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	3314      	adds	r3, #20
 8004b6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b70:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b78:	e841 2300 	strex	r3, r2, [r1]
 8004b7c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1e5      	bne.n	8004b50 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d119      	bne.n	8004bc0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	330c      	adds	r3, #12
 8004b92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	e853 3f00 	ldrex	r3, [r3]
 8004b9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	f023 0310 	bic.w	r3, r3, #16
 8004ba2:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	330c      	adds	r3, #12
 8004baa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bac:	61ba      	str	r2, [r7, #24]
 8004bae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb0:	6979      	ldr	r1, [r7, #20]
 8004bb2:	69ba      	ldr	r2, [r7, #24]
 8004bb4:	e841 2300 	strex	r3, r2, [r1]
 8004bb8:	613b      	str	r3, [r7, #16]
   return(result);
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1e5      	bne.n	8004b8c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004bce:	bf00      	nop
 8004bd0:	3754      	adds	r7, #84	@ 0x54
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
	...

08004bdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004be0:	b0c0      	sub	sp, #256	@ 0x100
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf8:	68d9      	ldr	r1, [r3, #12]
 8004bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	ea40 0301 	orr.w	r3, r0, r1
 8004c04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c0a:	689a      	ldr	r2, [r3, #8]
 8004c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	431a      	orrs	r2, r3
 8004c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c20:	69db      	ldr	r3, [r3, #28]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004c34:	f021 010c 	bic.w	r1, r1, #12
 8004c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004c42:	430b      	orrs	r3, r1
 8004c44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c56:	6999      	ldr	r1, [r3, #24]
 8004c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	ea40 0301 	orr.w	r3, r0, r1
 8004c62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	4b8f      	ldr	r3, [pc, #572]	@ (8004ea8 <UART_SetConfig+0x2cc>)
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d005      	beq.n	8004c7c <UART_SetConfig+0xa0>
 8004c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	4b8d      	ldr	r3, [pc, #564]	@ (8004eac <UART_SetConfig+0x2d0>)
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d104      	bne.n	8004c86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c7c:	f7fd fc84 	bl	8002588 <HAL_RCC_GetPCLK2Freq>
 8004c80:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004c84:	e003      	b.n	8004c8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c86:	f7fd fc6b 	bl	8002560 <HAL_RCC_GetPCLK1Freq>
 8004c8a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c92:	69db      	ldr	r3, [r3, #28]
 8004c94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c98:	f040 810c 	bne.w	8004eb4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004ca6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004caa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004cae:	4622      	mov	r2, r4
 8004cb0:	462b      	mov	r3, r5
 8004cb2:	1891      	adds	r1, r2, r2
 8004cb4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004cb6:	415b      	adcs	r3, r3
 8004cb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004cba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004cbe:	4621      	mov	r1, r4
 8004cc0:	eb12 0801 	adds.w	r8, r2, r1
 8004cc4:	4629      	mov	r1, r5
 8004cc6:	eb43 0901 	adc.w	r9, r3, r1
 8004cca:	f04f 0200 	mov.w	r2, #0
 8004cce:	f04f 0300 	mov.w	r3, #0
 8004cd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cde:	4690      	mov	r8, r2
 8004ce0:	4699      	mov	r9, r3
 8004ce2:	4623      	mov	r3, r4
 8004ce4:	eb18 0303 	adds.w	r3, r8, r3
 8004ce8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004cec:	462b      	mov	r3, r5
 8004cee:	eb49 0303 	adc.w	r3, r9, r3
 8004cf2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004d02:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004d06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	18db      	adds	r3, r3, r3
 8004d0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d10:	4613      	mov	r3, r2
 8004d12:	eb42 0303 	adc.w	r3, r2, r3
 8004d16:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004d1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004d20:	f7fb face 	bl	80002c0 <__aeabi_uldivmod>
 8004d24:	4602      	mov	r2, r0
 8004d26:	460b      	mov	r3, r1
 8004d28:	4b61      	ldr	r3, [pc, #388]	@ (8004eb0 <UART_SetConfig+0x2d4>)
 8004d2a:	fba3 2302 	umull	r2, r3, r3, r2
 8004d2e:	095b      	lsrs	r3, r3, #5
 8004d30:	011c      	lsls	r4, r3, #4
 8004d32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d36:	2200      	movs	r2, #0
 8004d38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d3c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004d40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004d44:	4642      	mov	r2, r8
 8004d46:	464b      	mov	r3, r9
 8004d48:	1891      	adds	r1, r2, r2
 8004d4a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004d4c:	415b      	adcs	r3, r3
 8004d4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004d54:	4641      	mov	r1, r8
 8004d56:	eb12 0a01 	adds.w	sl, r2, r1
 8004d5a:	4649      	mov	r1, r9
 8004d5c:	eb43 0b01 	adc.w	fp, r3, r1
 8004d60:	f04f 0200 	mov.w	r2, #0
 8004d64:	f04f 0300 	mov.w	r3, #0
 8004d68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d74:	4692      	mov	sl, r2
 8004d76:	469b      	mov	fp, r3
 8004d78:	4643      	mov	r3, r8
 8004d7a:	eb1a 0303 	adds.w	r3, sl, r3
 8004d7e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d82:	464b      	mov	r3, r9
 8004d84:	eb4b 0303 	adc.w	r3, fp, r3
 8004d88:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d98:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004d9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004da0:	460b      	mov	r3, r1
 8004da2:	18db      	adds	r3, r3, r3
 8004da4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004da6:	4613      	mov	r3, r2
 8004da8:	eb42 0303 	adc.w	r3, r2, r3
 8004dac:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004db2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004db6:	f7fb fa83 	bl	80002c0 <__aeabi_uldivmod>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	4611      	mov	r1, r2
 8004dc0:	4b3b      	ldr	r3, [pc, #236]	@ (8004eb0 <UART_SetConfig+0x2d4>)
 8004dc2:	fba3 2301 	umull	r2, r3, r3, r1
 8004dc6:	095b      	lsrs	r3, r3, #5
 8004dc8:	2264      	movs	r2, #100	@ 0x64
 8004dca:	fb02 f303 	mul.w	r3, r2, r3
 8004dce:	1acb      	subs	r3, r1, r3
 8004dd0:	00db      	lsls	r3, r3, #3
 8004dd2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004dd6:	4b36      	ldr	r3, [pc, #216]	@ (8004eb0 <UART_SetConfig+0x2d4>)
 8004dd8:	fba3 2302 	umull	r2, r3, r3, r2
 8004ddc:	095b      	lsrs	r3, r3, #5
 8004dde:	005b      	lsls	r3, r3, #1
 8004de0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004de4:	441c      	add	r4, r3
 8004de6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dea:	2200      	movs	r2, #0
 8004dec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004df0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004df4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004df8:	4642      	mov	r2, r8
 8004dfa:	464b      	mov	r3, r9
 8004dfc:	1891      	adds	r1, r2, r2
 8004dfe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004e00:	415b      	adcs	r3, r3
 8004e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004e08:	4641      	mov	r1, r8
 8004e0a:	1851      	adds	r1, r2, r1
 8004e0c:	6339      	str	r1, [r7, #48]	@ 0x30
 8004e0e:	4649      	mov	r1, r9
 8004e10:	414b      	adcs	r3, r1
 8004e12:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e14:	f04f 0200 	mov.w	r2, #0
 8004e18:	f04f 0300 	mov.w	r3, #0
 8004e1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004e20:	4659      	mov	r1, fp
 8004e22:	00cb      	lsls	r3, r1, #3
 8004e24:	4651      	mov	r1, sl
 8004e26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e2a:	4651      	mov	r1, sl
 8004e2c:	00ca      	lsls	r2, r1, #3
 8004e2e:	4610      	mov	r0, r2
 8004e30:	4619      	mov	r1, r3
 8004e32:	4603      	mov	r3, r0
 8004e34:	4642      	mov	r2, r8
 8004e36:	189b      	adds	r3, r3, r2
 8004e38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e3c:	464b      	mov	r3, r9
 8004e3e:	460a      	mov	r2, r1
 8004e40:	eb42 0303 	adc.w	r3, r2, r3
 8004e44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004e54:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004e58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	18db      	adds	r3, r3, r3
 8004e60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e62:	4613      	mov	r3, r2
 8004e64:	eb42 0303 	adc.w	r3, r2, r3
 8004e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004e72:	f7fb fa25 	bl	80002c0 <__aeabi_uldivmod>
 8004e76:	4602      	mov	r2, r0
 8004e78:	460b      	mov	r3, r1
 8004e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8004eb0 <UART_SetConfig+0x2d4>)
 8004e7c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e80:	095b      	lsrs	r3, r3, #5
 8004e82:	2164      	movs	r1, #100	@ 0x64
 8004e84:	fb01 f303 	mul.w	r3, r1, r3
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	3332      	adds	r3, #50	@ 0x32
 8004e8e:	4a08      	ldr	r2, [pc, #32]	@ (8004eb0 <UART_SetConfig+0x2d4>)
 8004e90:	fba2 2303 	umull	r2, r3, r2, r3
 8004e94:	095b      	lsrs	r3, r3, #5
 8004e96:	f003 0207 	and.w	r2, r3, #7
 8004e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4422      	add	r2, r4
 8004ea2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ea4:	e106      	b.n	80050b4 <UART_SetConfig+0x4d8>
 8004ea6:	bf00      	nop
 8004ea8:	40011000 	.word	0x40011000
 8004eac:	40011400 	.word	0x40011400
 8004eb0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004eb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004ebe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004ec2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004ec6:	4642      	mov	r2, r8
 8004ec8:	464b      	mov	r3, r9
 8004eca:	1891      	adds	r1, r2, r2
 8004ecc:	6239      	str	r1, [r7, #32]
 8004ece:	415b      	adcs	r3, r3
 8004ed0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ed2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ed6:	4641      	mov	r1, r8
 8004ed8:	1854      	adds	r4, r2, r1
 8004eda:	4649      	mov	r1, r9
 8004edc:	eb43 0501 	adc.w	r5, r3, r1
 8004ee0:	f04f 0200 	mov.w	r2, #0
 8004ee4:	f04f 0300 	mov.w	r3, #0
 8004ee8:	00eb      	lsls	r3, r5, #3
 8004eea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004eee:	00e2      	lsls	r2, r4, #3
 8004ef0:	4614      	mov	r4, r2
 8004ef2:	461d      	mov	r5, r3
 8004ef4:	4643      	mov	r3, r8
 8004ef6:	18e3      	adds	r3, r4, r3
 8004ef8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004efc:	464b      	mov	r3, r9
 8004efe:	eb45 0303 	adc.w	r3, r5, r3
 8004f02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004f12:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004f16:	f04f 0200 	mov.w	r2, #0
 8004f1a:	f04f 0300 	mov.w	r3, #0
 8004f1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004f22:	4629      	mov	r1, r5
 8004f24:	008b      	lsls	r3, r1, #2
 8004f26:	4621      	mov	r1, r4
 8004f28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f2c:	4621      	mov	r1, r4
 8004f2e:	008a      	lsls	r2, r1, #2
 8004f30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004f34:	f7fb f9c4 	bl	80002c0 <__aeabi_uldivmod>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	4b60      	ldr	r3, [pc, #384]	@ (80050c0 <UART_SetConfig+0x4e4>)
 8004f3e:	fba3 2302 	umull	r2, r3, r3, r2
 8004f42:	095b      	lsrs	r3, r3, #5
 8004f44:	011c      	lsls	r4, r3, #4
 8004f46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004f50:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004f54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004f58:	4642      	mov	r2, r8
 8004f5a:	464b      	mov	r3, r9
 8004f5c:	1891      	adds	r1, r2, r2
 8004f5e:	61b9      	str	r1, [r7, #24]
 8004f60:	415b      	adcs	r3, r3
 8004f62:	61fb      	str	r3, [r7, #28]
 8004f64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f68:	4641      	mov	r1, r8
 8004f6a:	1851      	adds	r1, r2, r1
 8004f6c:	6139      	str	r1, [r7, #16]
 8004f6e:	4649      	mov	r1, r9
 8004f70:	414b      	adcs	r3, r1
 8004f72:	617b      	str	r3, [r7, #20]
 8004f74:	f04f 0200 	mov.w	r2, #0
 8004f78:	f04f 0300 	mov.w	r3, #0
 8004f7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f80:	4659      	mov	r1, fp
 8004f82:	00cb      	lsls	r3, r1, #3
 8004f84:	4651      	mov	r1, sl
 8004f86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f8a:	4651      	mov	r1, sl
 8004f8c:	00ca      	lsls	r2, r1, #3
 8004f8e:	4610      	mov	r0, r2
 8004f90:	4619      	mov	r1, r3
 8004f92:	4603      	mov	r3, r0
 8004f94:	4642      	mov	r2, r8
 8004f96:	189b      	adds	r3, r3, r2
 8004f98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f9c:	464b      	mov	r3, r9
 8004f9e:	460a      	mov	r2, r1
 8004fa0:	eb42 0303 	adc.w	r3, r2, r3
 8004fa4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004fb2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004fb4:	f04f 0200 	mov.w	r2, #0
 8004fb8:	f04f 0300 	mov.w	r3, #0
 8004fbc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004fc0:	4649      	mov	r1, r9
 8004fc2:	008b      	lsls	r3, r1, #2
 8004fc4:	4641      	mov	r1, r8
 8004fc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fca:	4641      	mov	r1, r8
 8004fcc:	008a      	lsls	r2, r1, #2
 8004fce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004fd2:	f7fb f975 	bl	80002c0 <__aeabi_uldivmod>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	460b      	mov	r3, r1
 8004fda:	4611      	mov	r1, r2
 8004fdc:	4b38      	ldr	r3, [pc, #224]	@ (80050c0 <UART_SetConfig+0x4e4>)
 8004fde:	fba3 2301 	umull	r2, r3, r3, r1
 8004fe2:	095b      	lsrs	r3, r3, #5
 8004fe4:	2264      	movs	r2, #100	@ 0x64
 8004fe6:	fb02 f303 	mul.w	r3, r2, r3
 8004fea:	1acb      	subs	r3, r1, r3
 8004fec:	011b      	lsls	r3, r3, #4
 8004fee:	3332      	adds	r3, #50	@ 0x32
 8004ff0:	4a33      	ldr	r2, [pc, #204]	@ (80050c0 <UART_SetConfig+0x4e4>)
 8004ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff6:	095b      	lsrs	r3, r3, #5
 8004ff8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ffc:	441c      	add	r4, r3
 8004ffe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005002:	2200      	movs	r2, #0
 8005004:	673b      	str	r3, [r7, #112]	@ 0x70
 8005006:	677a      	str	r2, [r7, #116]	@ 0x74
 8005008:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800500c:	4642      	mov	r2, r8
 800500e:	464b      	mov	r3, r9
 8005010:	1891      	adds	r1, r2, r2
 8005012:	60b9      	str	r1, [r7, #8]
 8005014:	415b      	adcs	r3, r3
 8005016:	60fb      	str	r3, [r7, #12]
 8005018:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800501c:	4641      	mov	r1, r8
 800501e:	1851      	adds	r1, r2, r1
 8005020:	6039      	str	r1, [r7, #0]
 8005022:	4649      	mov	r1, r9
 8005024:	414b      	adcs	r3, r1
 8005026:	607b      	str	r3, [r7, #4]
 8005028:	f04f 0200 	mov.w	r2, #0
 800502c:	f04f 0300 	mov.w	r3, #0
 8005030:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005034:	4659      	mov	r1, fp
 8005036:	00cb      	lsls	r3, r1, #3
 8005038:	4651      	mov	r1, sl
 800503a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800503e:	4651      	mov	r1, sl
 8005040:	00ca      	lsls	r2, r1, #3
 8005042:	4610      	mov	r0, r2
 8005044:	4619      	mov	r1, r3
 8005046:	4603      	mov	r3, r0
 8005048:	4642      	mov	r2, r8
 800504a:	189b      	adds	r3, r3, r2
 800504c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800504e:	464b      	mov	r3, r9
 8005050:	460a      	mov	r2, r1
 8005052:	eb42 0303 	adc.w	r3, r2, r3
 8005056:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	663b      	str	r3, [r7, #96]	@ 0x60
 8005062:	667a      	str	r2, [r7, #100]	@ 0x64
 8005064:	f04f 0200 	mov.w	r2, #0
 8005068:	f04f 0300 	mov.w	r3, #0
 800506c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005070:	4649      	mov	r1, r9
 8005072:	008b      	lsls	r3, r1, #2
 8005074:	4641      	mov	r1, r8
 8005076:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800507a:	4641      	mov	r1, r8
 800507c:	008a      	lsls	r2, r1, #2
 800507e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005082:	f7fb f91d 	bl	80002c0 <__aeabi_uldivmod>
 8005086:	4602      	mov	r2, r0
 8005088:	460b      	mov	r3, r1
 800508a:	4b0d      	ldr	r3, [pc, #52]	@ (80050c0 <UART_SetConfig+0x4e4>)
 800508c:	fba3 1302 	umull	r1, r3, r3, r2
 8005090:	095b      	lsrs	r3, r3, #5
 8005092:	2164      	movs	r1, #100	@ 0x64
 8005094:	fb01 f303 	mul.w	r3, r1, r3
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	011b      	lsls	r3, r3, #4
 800509c:	3332      	adds	r3, #50	@ 0x32
 800509e:	4a08      	ldr	r2, [pc, #32]	@ (80050c0 <UART_SetConfig+0x4e4>)
 80050a0:	fba2 2303 	umull	r2, r3, r2, r3
 80050a4:	095b      	lsrs	r3, r3, #5
 80050a6:	f003 020f 	and.w	r2, r3, #15
 80050aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4422      	add	r2, r4
 80050b2:	609a      	str	r2, [r3, #8]
}
 80050b4:	bf00      	nop
 80050b6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80050ba:	46bd      	mov	sp, r7
 80050bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050c0:	51eb851f 	.word	0x51eb851f

080050c4 <siprintf>:
 80050c4:	b40e      	push	{r1, r2, r3}
 80050c6:	b510      	push	{r4, lr}
 80050c8:	b09d      	sub	sp, #116	@ 0x74
 80050ca:	ab1f      	add	r3, sp, #124	@ 0x7c
 80050cc:	9002      	str	r0, [sp, #8]
 80050ce:	9006      	str	r0, [sp, #24]
 80050d0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80050d4:	480a      	ldr	r0, [pc, #40]	@ (8005100 <siprintf+0x3c>)
 80050d6:	9107      	str	r1, [sp, #28]
 80050d8:	9104      	str	r1, [sp, #16]
 80050da:	490a      	ldr	r1, [pc, #40]	@ (8005104 <siprintf+0x40>)
 80050dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80050e0:	9105      	str	r1, [sp, #20]
 80050e2:	2400      	movs	r4, #0
 80050e4:	a902      	add	r1, sp, #8
 80050e6:	6800      	ldr	r0, [r0, #0]
 80050e8:	9301      	str	r3, [sp, #4]
 80050ea:	941b      	str	r4, [sp, #108]	@ 0x6c
 80050ec:	f000 f994 	bl	8005418 <_svfiprintf_r>
 80050f0:	9b02      	ldr	r3, [sp, #8]
 80050f2:	701c      	strb	r4, [r3, #0]
 80050f4:	b01d      	add	sp, #116	@ 0x74
 80050f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050fa:	b003      	add	sp, #12
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	20000034 	.word	0x20000034
 8005104:	ffff0208 	.word	0xffff0208

08005108 <memset>:
 8005108:	4402      	add	r2, r0
 800510a:	4603      	mov	r3, r0
 800510c:	4293      	cmp	r3, r2
 800510e:	d100      	bne.n	8005112 <memset+0xa>
 8005110:	4770      	bx	lr
 8005112:	f803 1b01 	strb.w	r1, [r3], #1
 8005116:	e7f9      	b.n	800510c <memset+0x4>

08005118 <__errno>:
 8005118:	4b01      	ldr	r3, [pc, #4]	@ (8005120 <__errno+0x8>)
 800511a:	6818      	ldr	r0, [r3, #0]
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	20000034 	.word	0x20000034

08005124 <__libc_init_array>:
 8005124:	b570      	push	{r4, r5, r6, lr}
 8005126:	4d0d      	ldr	r5, [pc, #52]	@ (800515c <__libc_init_array+0x38>)
 8005128:	4c0d      	ldr	r4, [pc, #52]	@ (8005160 <__libc_init_array+0x3c>)
 800512a:	1b64      	subs	r4, r4, r5
 800512c:	10a4      	asrs	r4, r4, #2
 800512e:	2600      	movs	r6, #0
 8005130:	42a6      	cmp	r6, r4
 8005132:	d109      	bne.n	8005148 <__libc_init_array+0x24>
 8005134:	4d0b      	ldr	r5, [pc, #44]	@ (8005164 <__libc_init_array+0x40>)
 8005136:	4c0c      	ldr	r4, [pc, #48]	@ (8005168 <__libc_init_array+0x44>)
 8005138:	f000 fc64 	bl	8005a04 <_init>
 800513c:	1b64      	subs	r4, r4, r5
 800513e:	10a4      	asrs	r4, r4, #2
 8005140:	2600      	movs	r6, #0
 8005142:	42a6      	cmp	r6, r4
 8005144:	d105      	bne.n	8005152 <__libc_init_array+0x2e>
 8005146:	bd70      	pop	{r4, r5, r6, pc}
 8005148:	f855 3b04 	ldr.w	r3, [r5], #4
 800514c:	4798      	blx	r3
 800514e:	3601      	adds	r6, #1
 8005150:	e7ee      	b.n	8005130 <__libc_init_array+0xc>
 8005152:	f855 3b04 	ldr.w	r3, [r5], #4
 8005156:	4798      	blx	r3
 8005158:	3601      	adds	r6, #1
 800515a:	e7f2      	b.n	8005142 <__libc_init_array+0x1e>
 800515c:	08005b44 	.word	0x08005b44
 8005160:	08005b44 	.word	0x08005b44
 8005164:	08005b44 	.word	0x08005b44
 8005168:	08005b48 	.word	0x08005b48

0800516c <__retarget_lock_acquire_recursive>:
 800516c:	4770      	bx	lr

0800516e <__retarget_lock_release_recursive>:
 800516e:	4770      	bx	lr

08005170 <_free_r>:
 8005170:	b538      	push	{r3, r4, r5, lr}
 8005172:	4605      	mov	r5, r0
 8005174:	2900      	cmp	r1, #0
 8005176:	d041      	beq.n	80051fc <_free_r+0x8c>
 8005178:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800517c:	1f0c      	subs	r4, r1, #4
 800517e:	2b00      	cmp	r3, #0
 8005180:	bfb8      	it	lt
 8005182:	18e4      	addlt	r4, r4, r3
 8005184:	f000 f8e0 	bl	8005348 <__malloc_lock>
 8005188:	4a1d      	ldr	r2, [pc, #116]	@ (8005200 <_free_r+0x90>)
 800518a:	6813      	ldr	r3, [r2, #0]
 800518c:	b933      	cbnz	r3, 800519c <_free_r+0x2c>
 800518e:	6063      	str	r3, [r4, #4]
 8005190:	6014      	str	r4, [r2, #0]
 8005192:	4628      	mov	r0, r5
 8005194:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005198:	f000 b8dc 	b.w	8005354 <__malloc_unlock>
 800519c:	42a3      	cmp	r3, r4
 800519e:	d908      	bls.n	80051b2 <_free_r+0x42>
 80051a0:	6820      	ldr	r0, [r4, #0]
 80051a2:	1821      	adds	r1, r4, r0
 80051a4:	428b      	cmp	r3, r1
 80051a6:	bf01      	itttt	eq
 80051a8:	6819      	ldreq	r1, [r3, #0]
 80051aa:	685b      	ldreq	r3, [r3, #4]
 80051ac:	1809      	addeq	r1, r1, r0
 80051ae:	6021      	streq	r1, [r4, #0]
 80051b0:	e7ed      	b.n	800518e <_free_r+0x1e>
 80051b2:	461a      	mov	r2, r3
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	b10b      	cbz	r3, 80051bc <_free_r+0x4c>
 80051b8:	42a3      	cmp	r3, r4
 80051ba:	d9fa      	bls.n	80051b2 <_free_r+0x42>
 80051bc:	6811      	ldr	r1, [r2, #0]
 80051be:	1850      	adds	r0, r2, r1
 80051c0:	42a0      	cmp	r0, r4
 80051c2:	d10b      	bne.n	80051dc <_free_r+0x6c>
 80051c4:	6820      	ldr	r0, [r4, #0]
 80051c6:	4401      	add	r1, r0
 80051c8:	1850      	adds	r0, r2, r1
 80051ca:	4283      	cmp	r3, r0
 80051cc:	6011      	str	r1, [r2, #0]
 80051ce:	d1e0      	bne.n	8005192 <_free_r+0x22>
 80051d0:	6818      	ldr	r0, [r3, #0]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	6053      	str	r3, [r2, #4]
 80051d6:	4408      	add	r0, r1
 80051d8:	6010      	str	r0, [r2, #0]
 80051da:	e7da      	b.n	8005192 <_free_r+0x22>
 80051dc:	d902      	bls.n	80051e4 <_free_r+0x74>
 80051de:	230c      	movs	r3, #12
 80051e0:	602b      	str	r3, [r5, #0]
 80051e2:	e7d6      	b.n	8005192 <_free_r+0x22>
 80051e4:	6820      	ldr	r0, [r4, #0]
 80051e6:	1821      	adds	r1, r4, r0
 80051e8:	428b      	cmp	r3, r1
 80051ea:	bf04      	itt	eq
 80051ec:	6819      	ldreq	r1, [r3, #0]
 80051ee:	685b      	ldreq	r3, [r3, #4]
 80051f0:	6063      	str	r3, [r4, #4]
 80051f2:	bf04      	itt	eq
 80051f4:	1809      	addeq	r1, r1, r0
 80051f6:	6021      	streq	r1, [r4, #0]
 80051f8:	6054      	str	r4, [r2, #4]
 80051fa:	e7ca      	b.n	8005192 <_free_r+0x22>
 80051fc:	bd38      	pop	{r3, r4, r5, pc}
 80051fe:	bf00      	nop
 8005200:	200003b4 	.word	0x200003b4

08005204 <sbrk_aligned>:
 8005204:	b570      	push	{r4, r5, r6, lr}
 8005206:	4e0f      	ldr	r6, [pc, #60]	@ (8005244 <sbrk_aligned+0x40>)
 8005208:	460c      	mov	r4, r1
 800520a:	6831      	ldr	r1, [r6, #0]
 800520c:	4605      	mov	r5, r0
 800520e:	b911      	cbnz	r1, 8005216 <sbrk_aligned+0x12>
 8005210:	f000 fba4 	bl	800595c <_sbrk_r>
 8005214:	6030      	str	r0, [r6, #0]
 8005216:	4621      	mov	r1, r4
 8005218:	4628      	mov	r0, r5
 800521a:	f000 fb9f 	bl	800595c <_sbrk_r>
 800521e:	1c43      	adds	r3, r0, #1
 8005220:	d103      	bne.n	800522a <sbrk_aligned+0x26>
 8005222:	f04f 34ff 	mov.w	r4, #4294967295
 8005226:	4620      	mov	r0, r4
 8005228:	bd70      	pop	{r4, r5, r6, pc}
 800522a:	1cc4      	adds	r4, r0, #3
 800522c:	f024 0403 	bic.w	r4, r4, #3
 8005230:	42a0      	cmp	r0, r4
 8005232:	d0f8      	beq.n	8005226 <sbrk_aligned+0x22>
 8005234:	1a21      	subs	r1, r4, r0
 8005236:	4628      	mov	r0, r5
 8005238:	f000 fb90 	bl	800595c <_sbrk_r>
 800523c:	3001      	adds	r0, #1
 800523e:	d1f2      	bne.n	8005226 <sbrk_aligned+0x22>
 8005240:	e7ef      	b.n	8005222 <sbrk_aligned+0x1e>
 8005242:	bf00      	nop
 8005244:	200003b0 	.word	0x200003b0

08005248 <_malloc_r>:
 8005248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800524c:	1ccd      	adds	r5, r1, #3
 800524e:	f025 0503 	bic.w	r5, r5, #3
 8005252:	3508      	adds	r5, #8
 8005254:	2d0c      	cmp	r5, #12
 8005256:	bf38      	it	cc
 8005258:	250c      	movcc	r5, #12
 800525a:	2d00      	cmp	r5, #0
 800525c:	4606      	mov	r6, r0
 800525e:	db01      	blt.n	8005264 <_malloc_r+0x1c>
 8005260:	42a9      	cmp	r1, r5
 8005262:	d904      	bls.n	800526e <_malloc_r+0x26>
 8005264:	230c      	movs	r3, #12
 8005266:	6033      	str	r3, [r6, #0]
 8005268:	2000      	movs	r0, #0
 800526a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800526e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005344 <_malloc_r+0xfc>
 8005272:	f000 f869 	bl	8005348 <__malloc_lock>
 8005276:	f8d8 3000 	ldr.w	r3, [r8]
 800527a:	461c      	mov	r4, r3
 800527c:	bb44      	cbnz	r4, 80052d0 <_malloc_r+0x88>
 800527e:	4629      	mov	r1, r5
 8005280:	4630      	mov	r0, r6
 8005282:	f7ff ffbf 	bl	8005204 <sbrk_aligned>
 8005286:	1c43      	adds	r3, r0, #1
 8005288:	4604      	mov	r4, r0
 800528a:	d158      	bne.n	800533e <_malloc_r+0xf6>
 800528c:	f8d8 4000 	ldr.w	r4, [r8]
 8005290:	4627      	mov	r7, r4
 8005292:	2f00      	cmp	r7, #0
 8005294:	d143      	bne.n	800531e <_malloc_r+0xd6>
 8005296:	2c00      	cmp	r4, #0
 8005298:	d04b      	beq.n	8005332 <_malloc_r+0xea>
 800529a:	6823      	ldr	r3, [r4, #0]
 800529c:	4639      	mov	r1, r7
 800529e:	4630      	mov	r0, r6
 80052a0:	eb04 0903 	add.w	r9, r4, r3
 80052a4:	f000 fb5a 	bl	800595c <_sbrk_r>
 80052a8:	4581      	cmp	r9, r0
 80052aa:	d142      	bne.n	8005332 <_malloc_r+0xea>
 80052ac:	6821      	ldr	r1, [r4, #0]
 80052ae:	1a6d      	subs	r5, r5, r1
 80052b0:	4629      	mov	r1, r5
 80052b2:	4630      	mov	r0, r6
 80052b4:	f7ff ffa6 	bl	8005204 <sbrk_aligned>
 80052b8:	3001      	adds	r0, #1
 80052ba:	d03a      	beq.n	8005332 <_malloc_r+0xea>
 80052bc:	6823      	ldr	r3, [r4, #0]
 80052be:	442b      	add	r3, r5
 80052c0:	6023      	str	r3, [r4, #0]
 80052c2:	f8d8 3000 	ldr.w	r3, [r8]
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	bb62      	cbnz	r2, 8005324 <_malloc_r+0xdc>
 80052ca:	f8c8 7000 	str.w	r7, [r8]
 80052ce:	e00f      	b.n	80052f0 <_malloc_r+0xa8>
 80052d0:	6822      	ldr	r2, [r4, #0]
 80052d2:	1b52      	subs	r2, r2, r5
 80052d4:	d420      	bmi.n	8005318 <_malloc_r+0xd0>
 80052d6:	2a0b      	cmp	r2, #11
 80052d8:	d917      	bls.n	800530a <_malloc_r+0xc2>
 80052da:	1961      	adds	r1, r4, r5
 80052dc:	42a3      	cmp	r3, r4
 80052de:	6025      	str	r5, [r4, #0]
 80052e0:	bf18      	it	ne
 80052e2:	6059      	strne	r1, [r3, #4]
 80052e4:	6863      	ldr	r3, [r4, #4]
 80052e6:	bf08      	it	eq
 80052e8:	f8c8 1000 	streq.w	r1, [r8]
 80052ec:	5162      	str	r2, [r4, r5]
 80052ee:	604b      	str	r3, [r1, #4]
 80052f0:	4630      	mov	r0, r6
 80052f2:	f000 f82f 	bl	8005354 <__malloc_unlock>
 80052f6:	f104 000b 	add.w	r0, r4, #11
 80052fa:	1d23      	adds	r3, r4, #4
 80052fc:	f020 0007 	bic.w	r0, r0, #7
 8005300:	1ac2      	subs	r2, r0, r3
 8005302:	bf1c      	itt	ne
 8005304:	1a1b      	subne	r3, r3, r0
 8005306:	50a3      	strne	r3, [r4, r2]
 8005308:	e7af      	b.n	800526a <_malloc_r+0x22>
 800530a:	6862      	ldr	r2, [r4, #4]
 800530c:	42a3      	cmp	r3, r4
 800530e:	bf0c      	ite	eq
 8005310:	f8c8 2000 	streq.w	r2, [r8]
 8005314:	605a      	strne	r2, [r3, #4]
 8005316:	e7eb      	b.n	80052f0 <_malloc_r+0xa8>
 8005318:	4623      	mov	r3, r4
 800531a:	6864      	ldr	r4, [r4, #4]
 800531c:	e7ae      	b.n	800527c <_malloc_r+0x34>
 800531e:	463c      	mov	r4, r7
 8005320:	687f      	ldr	r7, [r7, #4]
 8005322:	e7b6      	b.n	8005292 <_malloc_r+0x4a>
 8005324:	461a      	mov	r2, r3
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	42a3      	cmp	r3, r4
 800532a:	d1fb      	bne.n	8005324 <_malloc_r+0xdc>
 800532c:	2300      	movs	r3, #0
 800532e:	6053      	str	r3, [r2, #4]
 8005330:	e7de      	b.n	80052f0 <_malloc_r+0xa8>
 8005332:	230c      	movs	r3, #12
 8005334:	6033      	str	r3, [r6, #0]
 8005336:	4630      	mov	r0, r6
 8005338:	f000 f80c 	bl	8005354 <__malloc_unlock>
 800533c:	e794      	b.n	8005268 <_malloc_r+0x20>
 800533e:	6005      	str	r5, [r0, #0]
 8005340:	e7d6      	b.n	80052f0 <_malloc_r+0xa8>
 8005342:	bf00      	nop
 8005344:	200003b4 	.word	0x200003b4

08005348 <__malloc_lock>:
 8005348:	4801      	ldr	r0, [pc, #4]	@ (8005350 <__malloc_lock+0x8>)
 800534a:	f7ff bf0f 	b.w	800516c <__retarget_lock_acquire_recursive>
 800534e:	bf00      	nop
 8005350:	200003ac 	.word	0x200003ac

08005354 <__malloc_unlock>:
 8005354:	4801      	ldr	r0, [pc, #4]	@ (800535c <__malloc_unlock+0x8>)
 8005356:	f7ff bf0a 	b.w	800516e <__retarget_lock_release_recursive>
 800535a:	bf00      	nop
 800535c:	200003ac 	.word	0x200003ac

08005360 <__ssputs_r>:
 8005360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005364:	688e      	ldr	r6, [r1, #8]
 8005366:	461f      	mov	r7, r3
 8005368:	42be      	cmp	r6, r7
 800536a:	680b      	ldr	r3, [r1, #0]
 800536c:	4682      	mov	sl, r0
 800536e:	460c      	mov	r4, r1
 8005370:	4690      	mov	r8, r2
 8005372:	d82d      	bhi.n	80053d0 <__ssputs_r+0x70>
 8005374:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005378:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800537c:	d026      	beq.n	80053cc <__ssputs_r+0x6c>
 800537e:	6965      	ldr	r5, [r4, #20]
 8005380:	6909      	ldr	r1, [r1, #16]
 8005382:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005386:	eba3 0901 	sub.w	r9, r3, r1
 800538a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800538e:	1c7b      	adds	r3, r7, #1
 8005390:	444b      	add	r3, r9
 8005392:	106d      	asrs	r5, r5, #1
 8005394:	429d      	cmp	r5, r3
 8005396:	bf38      	it	cc
 8005398:	461d      	movcc	r5, r3
 800539a:	0553      	lsls	r3, r2, #21
 800539c:	d527      	bpl.n	80053ee <__ssputs_r+0x8e>
 800539e:	4629      	mov	r1, r5
 80053a0:	f7ff ff52 	bl	8005248 <_malloc_r>
 80053a4:	4606      	mov	r6, r0
 80053a6:	b360      	cbz	r0, 8005402 <__ssputs_r+0xa2>
 80053a8:	6921      	ldr	r1, [r4, #16]
 80053aa:	464a      	mov	r2, r9
 80053ac:	f000 fae6 	bl	800597c <memcpy>
 80053b0:	89a3      	ldrh	r3, [r4, #12]
 80053b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80053b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053ba:	81a3      	strh	r3, [r4, #12]
 80053bc:	6126      	str	r6, [r4, #16]
 80053be:	6165      	str	r5, [r4, #20]
 80053c0:	444e      	add	r6, r9
 80053c2:	eba5 0509 	sub.w	r5, r5, r9
 80053c6:	6026      	str	r6, [r4, #0]
 80053c8:	60a5      	str	r5, [r4, #8]
 80053ca:	463e      	mov	r6, r7
 80053cc:	42be      	cmp	r6, r7
 80053ce:	d900      	bls.n	80053d2 <__ssputs_r+0x72>
 80053d0:	463e      	mov	r6, r7
 80053d2:	6820      	ldr	r0, [r4, #0]
 80053d4:	4632      	mov	r2, r6
 80053d6:	4641      	mov	r1, r8
 80053d8:	f000 faa6 	bl	8005928 <memmove>
 80053dc:	68a3      	ldr	r3, [r4, #8]
 80053de:	1b9b      	subs	r3, r3, r6
 80053e0:	60a3      	str	r3, [r4, #8]
 80053e2:	6823      	ldr	r3, [r4, #0]
 80053e4:	4433      	add	r3, r6
 80053e6:	6023      	str	r3, [r4, #0]
 80053e8:	2000      	movs	r0, #0
 80053ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053ee:	462a      	mov	r2, r5
 80053f0:	f000 fad2 	bl	8005998 <_realloc_r>
 80053f4:	4606      	mov	r6, r0
 80053f6:	2800      	cmp	r0, #0
 80053f8:	d1e0      	bne.n	80053bc <__ssputs_r+0x5c>
 80053fa:	6921      	ldr	r1, [r4, #16]
 80053fc:	4650      	mov	r0, sl
 80053fe:	f7ff feb7 	bl	8005170 <_free_r>
 8005402:	230c      	movs	r3, #12
 8005404:	f8ca 3000 	str.w	r3, [sl]
 8005408:	89a3      	ldrh	r3, [r4, #12]
 800540a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800540e:	81a3      	strh	r3, [r4, #12]
 8005410:	f04f 30ff 	mov.w	r0, #4294967295
 8005414:	e7e9      	b.n	80053ea <__ssputs_r+0x8a>
	...

08005418 <_svfiprintf_r>:
 8005418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800541c:	4698      	mov	r8, r3
 800541e:	898b      	ldrh	r3, [r1, #12]
 8005420:	061b      	lsls	r3, r3, #24
 8005422:	b09d      	sub	sp, #116	@ 0x74
 8005424:	4607      	mov	r7, r0
 8005426:	460d      	mov	r5, r1
 8005428:	4614      	mov	r4, r2
 800542a:	d510      	bpl.n	800544e <_svfiprintf_r+0x36>
 800542c:	690b      	ldr	r3, [r1, #16]
 800542e:	b973      	cbnz	r3, 800544e <_svfiprintf_r+0x36>
 8005430:	2140      	movs	r1, #64	@ 0x40
 8005432:	f7ff ff09 	bl	8005248 <_malloc_r>
 8005436:	6028      	str	r0, [r5, #0]
 8005438:	6128      	str	r0, [r5, #16]
 800543a:	b930      	cbnz	r0, 800544a <_svfiprintf_r+0x32>
 800543c:	230c      	movs	r3, #12
 800543e:	603b      	str	r3, [r7, #0]
 8005440:	f04f 30ff 	mov.w	r0, #4294967295
 8005444:	b01d      	add	sp, #116	@ 0x74
 8005446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800544a:	2340      	movs	r3, #64	@ 0x40
 800544c:	616b      	str	r3, [r5, #20]
 800544e:	2300      	movs	r3, #0
 8005450:	9309      	str	r3, [sp, #36]	@ 0x24
 8005452:	2320      	movs	r3, #32
 8005454:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005458:	f8cd 800c 	str.w	r8, [sp, #12]
 800545c:	2330      	movs	r3, #48	@ 0x30
 800545e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80055fc <_svfiprintf_r+0x1e4>
 8005462:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005466:	f04f 0901 	mov.w	r9, #1
 800546a:	4623      	mov	r3, r4
 800546c:	469a      	mov	sl, r3
 800546e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005472:	b10a      	cbz	r2, 8005478 <_svfiprintf_r+0x60>
 8005474:	2a25      	cmp	r2, #37	@ 0x25
 8005476:	d1f9      	bne.n	800546c <_svfiprintf_r+0x54>
 8005478:	ebba 0b04 	subs.w	fp, sl, r4
 800547c:	d00b      	beq.n	8005496 <_svfiprintf_r+0x7e>
 800547e:	465b      	mov	r3, fp
 8005480:	4622      	mov	r2, r4
 8005482:	4629      	mov	r1, r5
 8005484:	4638      	mov	r0, r7
 8005486:	f7ff ff6b 	bl	8005360 <__ssputs_r>
 800548a:	3001      	adds	r0, #1
 800548c:	f000 80a7 	beq.w	80055de <_svfiprintf_r+0x1c6>
 8005490:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005492:	445a      	add	r2, fp
 8005494:	9209      	str	r2, [sp, #36]	@ 0x24
 8005496:	f89a 3000 	ldrb.w	r3, [sl]
 800549a:	2b00      	cmp	r3, #0
 800549c:	f000 809f 	beq.w	80055de <_svfiprintf_r+0x1c6>
 80054a0:	2300      	movs	r3, #0
 80054a2:	f04f 32ff 	mov.w	r2, #4294967295
 80054a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054aa:	f10a 0a01 	add.w	sl, sl, #1
 80054ae:	9304      	str	r3, [sp, #16]
 80054b0:	9307      	str	r3, [sp, #28]
 80054b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80054b6:	931a      	str	r3, [sp, #104]	@ 0x68
 80054b8:	4654      	mov	r4, sl
 80054ba:	2205      	movs	r2, #5
 80054bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054c0:	484e      	ldr	r0, [pc, #312]	@ (80055fc <_svfiprintf_r+0x1e4>)
 80054c2:	f7fa fead 	bl	8000220 <memchr>
 80054c6:	9a04      	ldr	r2, [sp, #16]
 80054c8:	b9d8      	cbnz	r0, 8005502 <_svfiprintf_r+0xea>
 80054ca:	06d0      	lsls	r0, r2, #27
 80054cc:	bf44      	itt	mi
 80054ce:	2320      	movmi	r3, #32
 80054d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80054d4:	0711      	lsls	r1, r2, #28
 80054d6:	bf44      	itt	mi
 80054d8:	232b      	movmi	r3, #43	@ 0x2b
 80054da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80054de:	f89a 3000 	ldrb.w	r3, [sl]
 80054e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80054e4:	d015      	beq.n	8005512 <_svfiprintf_r+0xfa>
 80054e6:	9a07      	ldr	r2, [sp, #28]
 80054e8:	4654      	mov	r4, sl
 80054ea:	2000      	movs	r0, #0
 80054ec:	f04f 0c0a 	mov.w	ip, #10
 80054f0:	4621      	mov	r1, r4
 80054f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054f6:	3b30      	subs	r3, #48	@ 0x30
 80054f8:	2b09      	cmp	r3, #9
 80054fa:	d94b      	bls.n	8005594 <_svfiprintf_r+0x17c>
 80054fc:	b1b0      	cbz	r0, 800552c <_svfiprintf_r+0x114>
 80054fe:	9207      	str	r2, [sp, #28]
 8005500:	e014      	b.n	800552c <_svfiprintf_r+0x114>
 8005502:	eba0 0308 	sub.w	r3, r0, r8
 8005506:	fa09 f303 	lsl.w	r3, r9, r3
 800550a:	4313      	orrs	r3, r2
 800550c:	9304      	str	r3, [sp, #16]
 800550e:	46a2      	mov	sl, r4
 8005510:	e7d2      	b.n	80054b8 <_svfiprintf_r+0xa0>
 8005512:	9b03      	ldr	r3, [sp, #12]
 8005514:	1d19      	adds	r1, r3, #4
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	9103      	str	r1, [sp, #12]
 800551a:	2b00      	cmp	r3, #0
 800551c:	bfbb      	ittet	lt
 800551e:	425b      	neglt	r3, r3
 8005520:	f042 0202 	orrlt.w	r2, r2, #2
 8005524:	9307      	strge	r3, [sp, #28]
 8005526:	9307      	strlt	r3, [sp, #28]
 8005528:	bfb8      	it	lt
 800552a:	9204      	strlt	r2, [sp, #16]
 800552c:	7823      	ldrb	r3, [r4, #0]
 800552e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005530:	d10a      	bne.n	8005548 <_svfiprintf_r+0x130>
 8005532:	7863      	ldrb	r3, [r4, #1]
 8005534:	2b2a      	cmp	r3, #42	@ 0x2a
 8005536:	d132      	bne.n	800559e <_svfiprintf_r+0x186>
 8005538:	9b03      	ldr	r3, [sp, #12]
 800553a:	1d1a      	adds	r2, r3, #4
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	9203      	str	r2, [sp, #12]
 8005540:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005544:	3402      	adds	r4, #2
 8005546:	9305      	str	r3, [sp, #20]
 8005548:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800560c <_svfiprintf_r+0x1f4>
 800554c:	7821      	ldrb	r1, [r4, #0]
 800554e:	2203      	movs	r2, #3
 8005550:	4650      	mov	r0, sl
 8005552:	f7fa fe65 	bl	8000220 <memchr>
 8005556:	b138      	cbz	r0, 8005568 <_svfiprintf_r+0x150>
 8005558:	9b04      	ldr	r3, [sp, #16]
 800555a:	eba0 000a 	sub.w	r0, r0, sl
 800555e:	2240      	movs	r2, #64	@ 0x40
 8005560:	4082      	lsls	r2, r0
 8005562:	4313      	orrs	r3, r2
 8005564:	3401      	adds	r4, #1
 8005566:	9304      	str	r3, [sp, #16]
 8005568:	f814 1b01 	ldrb.w	r1, [r4], #1
 800556c:	4824      	ldr	r0, [pc, #144]	@ (8005600 <_svfiprintf_r+0x1e8>)
 800556e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005572:	2206      	movs	r2, #6
 8005574:	f7fa fe54 	bl	8000220 <memchr>
 8005578:	2800      	cmp	r0, #0
 800557a:	d036      	beq.n	80055ea <_svfiprintf_r+0x1d2>
 800557c:	4b21      	ldr	r3, [pc, #132]	@ (8005604 <_svfiprintf_r+0x1ec>)
 800557e:	bb1b      	cbnz	r3, 80055c8 <_svfiprintf_r+0x1b0>
 8005580:	9b03      	ldr	r3, [sp, #12]
 8005582:	3307      	adds	r3, #7
 8005584:	f023 0307 	bic.w	r3, r3, #7
 8005588:	3308      	adds	r3, #8
 800558a:	9303      	str	r3, [sp, #12]
 800558c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800558e:	4433      	add	r3, r6
 8005590:	9309      	str	r3, [sp, #36]	@ 0x24
 8005592:	e76a      	b.n	800546a <_svfiprintf_r+0x52>
 8005594:	fb0c 3202 	mla	r2, ip, r2, r3
 8005598:	460c      	mov	r4, r1
 800559a:	2001      	movs	r0, #1
 800559c:	e7a8      	b.n	80054f0 <_svfiprintf_r+0xd8>
 800559e:	2300      	movs	r3, #0
 80055a0:	3401      	adds	r4, #1
 80055a2:	9305      	str	r3, [sp, #20]
 80055a4:	4619      	mov	r1, r3
 80055a6:	f04f 0c0a 	mov.w	ip, #10
 80055aa:	4620      	mov	r0, r4
 80055ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055b0:	3a30      	subs	r2, #48	@ 0x30
 80055b2:	2a09      	cmp	r2, #9
 80055b4:	d903      	bls.n	80055be <_svfiprintf_r+0x1a6>
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d0c6      	beq.n	8005548 <_svfiprintf_r+0x130>
 80055ba:	9105      	str	r1, [sp, #20]
 80055bc:	e7c4      	b.n	8005548 <_svfiprintf_r+0x130>
 80055be:	fb0c 2101 	mla	r1, ip, r1, r2
 80055c2:	4604      	mov	r4, r0
 80055c4:	2301      	movs	r3, #1
 80055c6:	e7f0      	b.n	80055aa <_svfiprintf_r+0x192>
 80055c8:	ab03      	add	r3, sp, #12
 80055ca:	9300      	str	r3, [sp, #0]
 80055cc:	462a      	mov	r2, r5
 80055ce:	4b0e      	ldr	r3, [pc, #56]	@ (8005608 <_svfiprintf_r+0x1f0>)
 80055d0:	a904      	add	r1, sp, #16
 80055d2:	4638      	mov	r0, r7
 80055d4:	f3af 8000 	nop.w
 80055d8:	1c42      	adds	r2, r0, #1
 80055da:	4606      	mov	r6, r0
 80055dc:	d1d6      	bne.n	800558c <_svfiprintf_r+0x174>
 80055de:	89ab      	ldrh	r3, [r5, #12]
 80055e0:	065b      	lsls	r3, r3, #25
 80055e2:	f53f af2d 	bmi.w	8005440 <_svfiprintf_r+0x28>
 80055e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80055e8:	e72c      	b.n	8005444 <_svfiprintf_r+0x2c>
 80055ea:	ab03      	add	r3, sp, #12
 80055ec:	9300      	str	r3, [sp, #0]
 80055ee:	462a      	mov	r2, r5
 80055f0:	4b05      	ldr	r3, [pc, #20]	@ (8005608 <_svfiprintf_r+0x1f0>)
 80055f2:	a904      	add	r1, sp, #16
 80055f4:	4638      	mov	r0, r7
 80055f6:	f000 f879 	bl	80056ec <_printf_i>
 80055fa:	e7ed      	b.n	80055d8 <_svfiprintf_r+0x1c0>
 80055fc:	08005b08 	.word	0x08005b08
 8005600:	08005b12 	.word	0x08005b12
 8005604:	00000000 	.word	0x00000000
 8005608:	08005361 	.word	0x08005361
 800560c:	08005b0e 	.word	0x08005b0e

08005610 <_printf_common>:
 8005610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005614:	4616      	mov	r6, r2
 8005616:	4698      	mov	r8, r3
 8005618:	688a      	ldr	r2, [r1, #8]
 800561a:	690b      	ldr	r3, [r1, #16]
 800561c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005620:	4293      	cmp	r3, r2
 8005622:	bfb8      	it	lt
 8005624:	4613      	movlt	r3, r2
 8005626:	6033      	str	r3, [r6, #0]
 8005628:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800562c:	4607      	mov	r7, r0
 800562e:	460c      	mov	r4, r1
 8005630:	b10a      	cbz	r2, 8005636 <_printf_common+0x26>
 8005632:	3301      	adds	r3, #1
 8005634:	6033      	str	r3, [r6, #0]
 8005636:	6823      	ldr	r3, [r4, #0]
 8005638:	0699      	lsls	r1, r3, #26
 800563a:	bf42      	ittt	mi
 800563c:	6833      	ldrmi	r3, [r6, #0]
 800563e:	3302      	addmi	r3, #2
 8005640:	6033      	strmi	r3, [r6, #0]
 8005642:	6825      	ldr	r5, [r4, #0]
 8005644:	f015 0506 	ands.w	r5, r5, #6
 8005648:	d106      	bne.n	8005658 <_printf_common+0x48>
 800564a:	f104 0a19 	add.w	sl, r4, #25
 800564e:	68e3      	ldr	r3, [r4, #12]
 8005650:	6832      	ldr	r2, [r6, #0]
 8005652:	1a9b      	subs	r3, r3, r2
 8005654:	42ab      	cmp	r3, r5
 8005656:	dc26      	bgt.n	80056a6 <_printf_common+0x96>
 8005658:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800565c:	6822      	ldr	r2, [r4, #0]
 800565e:	3b00      	subs	r3, #0
 8005660:	bf18      	it	ne
 8005662:	2301      	movne	r3, #1
 8005664:	0692      	lsls	r2, r2, #26
 8005666:	d42b      	bmi.n	80056c0 <_printf_common+0xb0>
 8005668:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800566c:	4641      	mov	r1, r8
 800566e:	4638      	mov	r0, r7
 8005670:	47c8      	blx	r9
 8005672:	3001      	adds	r0, #1
 8005674:	d01e      	beq.n	80056b4 <_printf_common+0xa4>
 8005676:	6823      	ldr	r3, [r4, #0]
 8005678:	6922      	ldr	r2, [r4, #16]
 800567a:	f003 0306 	and.w	r3, r3, #6
 800567e:	2b04      	cmp	r3, #4
 8005680:	bf02      	ittt	eq
 8005682:	68e5      	ldreq	r5, [r4, #12]
 8005684:	6833      	ldreq	r3, [r6, #0]
 8005686:	1aed      	subeq	r5, r5, r3
 8005688:	68a3      	ldr	r3, [r4, #8]
 800568a:	bf0c      	ite	eq
 800568c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005690:	2500      	movne	r5, #0
 8005692:	4293      	cmp	r3, r2
 8005694:	bfc4      	itt	gt
 8005696:	1a9b      	subgt	r3, r3, r2
 8005698:	18ed      	addgt	r5, r5, r3
 800569a:	2600      	movs	r6, #0
 800569c:	341a      	adds	r4, #26
 800569e:	42b5      	cmp	r5, r6
 80056a0:	d11a      	bne.n	80056d8 <_printf_common+0xc8>
 80056a2:	2000      	movs	r0, #0
 80056a4:	e008      	b.n	80056b8 <_printf_common+0xa8>
 80056a6:	2301      	movs	r3, #1
 80056a8:	4652      	mov	r2, sl
 80056aa:	4641      	mov	r1, r8
 80056ac:	4638      	mov	r0, r7
 80056ae:	47c8      	blx	r9
 80056b0:	3001      	adds	r0, #1
 80056b2:	d103      	bne.n	80056bc <_printf_common+0xac>
 80056b4:	f04f 30ff 	mov.w	r0, #4294967295
 80056b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056bc:	3501      	adds	r5, #1
 80056be:	e7c6      	b.n	800564e <_printf_common+0x3e>
 80056c0:	18e1      	adds	r1, r4, r3
 80056c2:	1c5a      	adds	r2, r3, #1
 80056c4:	2030      	movs	r0, #48	@ 0x30
 80056c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80056ca:	4422      	add	r2, r4
 80056cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80056d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80056d4:	3302      	adds	r3, #2
 80056d6:	e7c7      	b.n	8005668 <_printf_common+0x58>
 80056d8:	2301      	movs	r3, #1
 80056da:	4622      	mov	r2, r4
 80056dc:	4641      	mov	r1, r8
 80056de:	4638      	mov	r0, r7
 80056e0:	47c8      	blx	r9
 80056e2:	3001      	adds	r0, #1
 80056e4:	d0e6      	beq.n	80056b4 <_printf_common+0xa4>
 80056e6:	3601      	adds	r6, #1
 80056e8:	e7d9      	b.n	800569e <_printf_common+0x8e>
	...

080056ec <_printf_i>:
 80056ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056f0:	7e0f      	ldrb	r7, [r1, #24]
 80056f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80056f4:	2f78      	cmp	r7, #120	@ 0x78
 80056f6:	4691      	mov	r9, r2
 80056f8:	4680      	mov	r8, r0
 80056fa:	460c      	mov	r4, r1
 80056fc:	469a      	mov	sl, r3
 80056fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005702:	d807      	bhi.n	8005714 <_printf_i+0x28>
 8005704:	2f62      	cmp	r7, #98	@ 0x62
 8005706:	d80a      	bhi.n	800571e <_printf_i+0x32>
 8005708:	2f00      	cmp	r7, #0
 800570a:	f000 80d1 	beq.w	80058b0 <_printf_i+0x1c4>
 800570e:	2f58      	cmp	r7, #88	@ 0x58
 8005710:	f000 80b8 	beq.w	8005884 <_printf_i+0x198>
 8005714:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005718:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800571c:	e03a      	b.n	8005794 <_printf_i+0xa8>
 800571e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005722:	2b15      	cmp	r3, #21
 8005724:	d8f6      	bhi.n	8005714 <_printf_i+0x28>
 8005726:	a101      	add	r1, pc, #4	@ (adr r1, 800572c <_printf_i+0x40>)
 8005728:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800572c:	08005785 	.word	0x08005785
 8005730:	08005799 	.word	0x08005799
 8005734:	08005715 	.word	0x08005715
 8005738:	08005715 	.word	0x08005715
 800573c:	08005715 	.word	0x08005715
 8005740:	08005715 	.word	0x08005715
 8005744:	08005799 	.word	0x08005799
 8005748:	08005715 	.word	0x08005715
 800574c:	08005715 	.word	0x08005715
 8005750:	08005715 	.word	0x08005715
 8005754:	08005715 	.word	0x08005715
 8005758:	08005897 	.word	0x08005897
 800575c:	080057c3 	.word	0x080057c3
 8005760:	08005851 	.word	0x08005851
 8005764:	08005715 	.word	0x08005715
 8005768:	08005715 	.word	0x08005715
 800576c:	080058b9 	.word	0x080058b9
 8005770:	08005715 	.word	0x08005715
 8005774:	080057c3 	.word	0x080057c3
 8005778:	08005715 	.word	0x08005715
 800577c:	08005715 	.word	0x08005715
 8005780:	08005859 	.word	0x08005859
 8005784:	6833      	ldr	r3, [r6, #0]
 8005786:	1d1a      	adds	r2, r3, #4
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	6032      	str	r2, [r6, #0]
 800578c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005790:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005794:	2301      	movs	r3, #1
 8005796:	e09c      	b.n	80058d2 <_printf_i+0x1e6>
 8005798:	6833      	ldr	r3, [r6, #0]
 800579a:	6820      	ldr	r0, [r4, #0]
 800579c:	1d19      	adds	r1, r3, #4
 800579e:	6031      	str	r1, [r6, #0]
 80057a0:	0606      	lsls	r6, r0, #24
 80057a2:	d501      	bpl.n	80057a8 <_printf_i+0xbc>
 80057a4:	681d      	ldr	r5, [r3, #0]
 80057a6:	e003      	b.n	80057b0 <_printf_i+0xc4>
 80057a8:	0645      	lsls	r5, r0, #25
 80057aa:	d5fb      	bpl.n	80057a4 <_printf_i+0xb8>
 80057ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80057b0:	2d00      	cmp	r5, #0
 80057b2:	da03      	bge.n	80057bc <_printf_i+0xd0>
 80057b4:	232d      	movs	r3, #45	@ 0x2d
 80057b6:	426d      	negs	r5, r5
 80057b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80057bc:	4858      	ldr	r0, [pc, #352]	@ (8005920 <_printf_i+0x234>)
 80057be:	230a      	movs	r3, #10
 80057c0:	e011      	b.n	80057e6 <_printf_i+0xfa>
 80057c2:	6821      	ldr	r1, [r4, #0]
 80057c4:	6833      	ldr	r3, [r6, #0]
 80057c6:	0608      	lsls	r0, r1, #24
 80057c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80057cc:	d402      	bmi.n	80057d4 <_printf_i+0xe8>
 80057ce:	0649      	lsls	r1, r1, #25
 80057d0:	bf48      	it	mi
 80057d2:	b2ad      	uxthmi	r5, r5
 80057d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80057d6:	4852      	ldr	r0, [pc, #328]	@ (8005920 <_printf_i+0x234>)
 80057d8:	6033      	str	r3, [r6, #0]
 80057da:	bf14      	ite	ne
 80057dc:	230a      	movne	r3, #10
 80057de:	2308      	moveq	r3, #8
 80057e0:	2100      	movs	r1, #0
 80057e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80057e6:	6866      	ldr	r6, [r4, #4]
 80057e8:	60a6      	str	r6, [r4, #8]
 80057ea:	2e00      	cmp	r6, #0
 80057ec:	db05      	blt.n	80057fa <_printf_i+0x10e>
 80057ee:	6821      	ldr	r1, [r4, #0]
 80057f0:	432e      	orrs	r6, r5
 80057f2:	f021 0104 	bic.w	r1, r1, #4
 80057f6:	6021      	str	r1, [r4, #0]
 80057f8:	d04b      	beq.n	8005892 <_printf_i+0x1a6>
 80057fa:	4616      	mov	r6, r2
 80057fc:	fbb5 f1f3 	udiv	r1, r5, r3
 8005800:	fb03 5711 	mls	r7, r3, r1, r5
 8005804:	5dc7      	ldrb	r7, [r0, r7]
 8005806:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800580a:	462f      	mov	r7, r5
 800580c:	42bb      	cmp	r3, r7
 800580e:	460d      	mov	r5, r1
 8005810:	d9f4      	bls.n	80057fc <_printf_i+0x110>
 8005812:	2b08      	cmp	r3, #8
 8005814:	d10b      	bne.n	800582e <_printf_i+0x142>
 8005816:	6823      	ldr	r3, [r4, #0]
 8005818:	07df      	lsls	r7, r3, #31
 800581a:	d508      	bpl.n	800582e <_printf_i+0x142>
 800581c:	6923      	ldr	r3, [r4, #16]
 800581e:	6861      	ldr	r1, [r4, #4]
 8005820:	4299      	cmp	r1, r3
 8005822:	bfde      	ittt	le
 8005824:	2330      	movle	r3, #48	@ 0x30
 8005826:	f806 3c01 	strble.w	r3, [r6, #-1]
 800582a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800582e:	1b92      	subs	r2, r2, r6
 8005830:	6122      	str	r2, [r4, #16]
 8005832:	f8cd a000 	str.w	sl, [sp]
 8005836:	464b      	mov	r3, r9
 8005838:	aa03      	add	r2, sp, #12
 800583a:	4621      	mov	r1, r4
 800583c:	4640      	mov	r0, r8
 800583e:	f7ff fee7 	bl	8005610 <_printf_common>
 8005842:	3001      	adds	r0, #1
 8005844:	d14a      	bne.n	80058dc <_printf_i+0x1f0>
 8005846:	f04f 30ff 	mov.w	r0, #4294967295
 800584a:	b004      	add	sp, #16
 800584c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005850:	6823      	ldr	r3, [r4, #0]
 8005852:	f043 0320 	orr.w	r3, r3, #32
 8005856:	6023      	str	r3, [r4, #0]
 8005858:	4832      	ldr	r0, [pc, #200]	@ (8005924 <_printf_i+0x238>)
 800585a:	2778      	movs	r7, #120	@ 0x78
 800585c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005860:	6823      	ldr	r3, [r4, #0]
 8005862:	6831      	ldr	r1, [r6, #0]
 8005864:	061f      	lsls	r7, r3, #24
 8005866:	f851 5b04 	ldr.w	r5, [r1], #4
 800586a:	d402      	bmi.n	8005872 <_printf_i+0x186>
 800586c:	065f      	lsls	r7, r3, #25
 800586e:	bf48      	it	mi
 8005870:	b2ad      	uxthmi	r5, r5
 8005872:	6031      	str	r1, [r6, #0]
 8005874:	07d9      	lsls	r1, r3, #31
 8005876:	bf44      	itt	mi
 8005878:	f043 0320 	orrmi.w	r3, r3, #32
 800587c:	6023      	strmi	r3, [r4, #0]
 800587e:	b11d      	cbz	r5, 8005888 <_printf_i+0x19c>
 8005880:	2310      	movs	r3, #16
 8005882:	e7ad      	b.n	80057e0 <_printf_i+0xf4>
 8005884:	4826      	ldr	r0, [pc, #152]	@ (8005920 <_printf_i+0x234>)
 8005886:	e7e9      	b.n	800585c <_printf_i+0x170>
 8005888:	6823      	ldr	r3, [r4, #0]
 800588a:	f023 0320 	bic.w	r3, r3, #32
 800588e:	6023      	str	r3, [r4, #0]
 8005890:	e7f6      	b.n	8005880 <_printf_i+0x194>
 8005892:	4616      	mov	r6, r2
 8005894:	e7bd      	b.n	8005812 <_printf_i+0x126>
 8005896:	6833      	ldr	r3, [r6, #0]
 8005898:	6825      	ldr	r5, [r4, #0]
 800589a:	6961      	ldr	r1, [r4, #20]
 800589c:	1d18      	adds	r0, r3, #4
 800589e:	6030      	str	r0, [r6, #0]
 80058a0:	062e      	lsls	r6, r5, #24
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	d501      	bpl.n	80058aa <_printf_i+0x1be>
 80058a6:	6019      	str	r1, [r3, #0]
 80058a8:	e002      	b.n	80058b0 <_printf_i+0x1c4>
 80058aa:	0668      	lsls	r0, r5, #25
 80058ac:	d5fb      	bpl.n	80058a6 <_printf_i+0x1ba>
 80058ae:	8019      	strh	r1, [r3, #0]
 80058b0:	2300      	movs	r3, #0
 80058b2:	6123      	str	r3, [r4, #16]
 80058b4:	4616      	mov	r6, r2
 80058b6:	e7bc      	b.n	8005832 <_printf_i+0x146>
 80058b8:	6833      	ldr	r3, [r6, #0]
 80058ba:	1d1a      	adds	r2, r3, #4
 80058bc:	6032      	str	r2, [r6, #0]
 80058be:	681e      	ldr	r6, [r3, #0]
 80058c0:	6862      	ldr	r2, [r4, #4]
 80058c2:	2100      	movs	r1, #0
 80058c4:	4630      	mov	r0, r6
 80058c6:	f7fa fcab 	bl	8000220 <memchr>
 80058ca:	b108      	cbz	r0, 80058d0 <_printf_i+0x1e4>
 80058cc:	1b80      	subs	r0, r0, r6
 80058ce:	6060      	str	r0, [r4, #4]
 80058d0:	6863      	ldr	r3, [r4, #4]
 80058d2:	6123      	str	r3, [r4, #16]
 80058d4:	2300      	movs	r3, #0
 80058d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058da:	e7aa      	b.n	8005832 <_printf_i+0x146>
 80058dc:	6923      	ldr	r3, [r4, #16]
 80058de:	4632      	mov	r2, r6
 80058e0:	4649      	mov	r1, r9
 80058e2:	4640      	mov	r0, r8
 80058e4:	47d0      	blx	sl
 80058e6:	3001      	adds	r0, #1
 80058e8:	d0ad      	beq.n	8005846 <_printf_i+0x15a>
 80058ea:	6823      	ldr	r3, [r4, #0]
 80058ec:	079b      	lsls	r3, r3, #30
 80058ee:	d413      	bmi.n	8005918 <_printf_i+0x22c>
 80058f0:	68e0      	ldr	r0, [r4, #12]
 80058f2:	9b03      	ldr	r3, [sp, #12]
 80058f4:	4298      	cmp	r0, r3
 80058f6:	bfb8      	it	lt
 80058f8:	4618      	movlt	r0, r3
 80058fa:	e7a6      	b.n	800584a <_printf_i+0x15e>
 80058fc:	2301      	movs	r3, #1
 80058fe:	4632      	mov	r2, r6
 8005900:	4649      	mov	r1, r9
 8005902:	4640      	mov	r0, r8
 8005904:	47d0      	blx	sl
 8005906:	3001      	adds	r0, #1
 8005908:	d09d      	beq.n	8005846 <_printf_i+0x15a>
 800590a:	3501      	adds	r5, #1
 800590c:	68e3      	ldr	r3, [r4, #12]
 800590e:	9903      	ldr	r1, [sp, #12]
 8005910:	1a5b      	subs	r3, r3, r1
 8005912:	42ab      	cmp	r3, r5
 8005914:	dcf2      	bgt.n	80058fc <_printf_i+0x210>
 8005916:	e7eb      	b.n	80058f0 <_printf_i+0x204>
 8005918:	2500      	movs	r5, #0
 800591a:	f104 0619 	add.w	r6, r4, #25
 800591e:	e7f5      	b.n	800590c <_printf_i+0x220>
 8005920:	08005b19 	.word	0x08005b19
 8005924:	08005b2a 	.word	0x08005b2a

08005928 <memmove>:
 8005928:	4288      	cmp	r0, r1
 800592a:	b510      	push	{r4, lr}
 800592c:	eb01 0402 	add.w	r4, r1, r2
 8005930:	d902      	bls.n	8005938 <memmove+0x10>
 8005932:	4284      	cmp	r4, r0
 8005934:	4623      	mov	r3, r4
 8005936:	d807      	bhi.n	8005948 <memmove+0x20>
 8005938:	1e43      	subs	r3, r0, #1
 800593a:	42a1      	cmp	r1, r4
 800593c:	d008      	beq.n	8005950 <memmove+0x28>
 800593e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005942:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005946:	e7f8      	b.n	800593a <memmove+0x12>
 8005948:	4402      	add	r2, r0
 800594a:	4601      	mov	r1, r0
 800594c:	428a      	cmp	r2, r1
 800594e:	d100      	bne.n	8005952 <memmove+0x2a>
 8005950:	bd10      	pop	{r4, pc}
 8005952:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005956:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800595a:	e7f7      	b.n	800594c <memmove+0x24>

0800595c <_sbrk_r>:
 800595c:	b538      	push	{r3, r4, r5, lr}
 800595e:	4d06      	ldr	r5, [pc, #24]	@ (8005978 <_sbrk_r+0x1c>)
 8005960:	2300      	movs	r3, #0
 8005962:	4604      	mov	r4, r0
 8005964:	4608      	mov	r0, r1
 8005966:	602b      	str	r3, [r5, #0]
 8005968:	f7fb fd0c 	bl	8001384 <_sbrk>
 800596c:	1c43      	adds	r3, r0, #1
 800596e:	d102      	bne.n	8005976 <_sbrk_r+0x1a>
 8005970:	682b      	ldr	r3, [r5, #0]
 8005972:	b103      	cbz	r3, 8005976 <_sbrk_r+0x1a>
 8005974:	6023      	str	r3, [r4, #0]
 8005976:	bd38      	pop	{r3, r4, r5, pc}
 8005978:	200003a8 	.word	0x200003a8

0800597c <memcpy>:
 800597c:	440a      	add	r2, r1
 800597e:	4291      	cmp	r1, r2
 8005980:	f100 33ff 	add.w	r3, r0, #4294967295
 8005984:	d100      	bne.n	8005988 <memcpy+0xc>
 8005986:	4770      	bx	lr
 8005988:	b510      	push	{r4, lr}
 800598a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800598e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005992:	4291      	cmp	r1, r2
 8005994:	d1f9      	bne.n	800598a <memcpy+0xe>
 8005996:	bd10      	pop	{r4, pc}

08005998 <_realloc_r>:
 8005998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800599c:	4607      	mov	r7, r0
 800599e:	4614      	mov	r4, r2
 80059a0:	460d      	mov	r5, r1
 80059a2:	b921      	cbnz	r1, 80059ae <_realloc_r+0x16>
 80059a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059a8:	4611      	mov	r1, r2
 80059aa:	f7ff bc4d 	b.w	8005248 <_malloc_r>
 80059ae:	b92a      	cbnz	r2, 80059bc <_realloc_r+0x24>
 80059b0:	f7ff fbde 	bl	8005170 <_free_r>
 80059b4:	4625      	mov	r5, r4
 80059b6:	4628      	mov	r0, r5
 80059b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059bc:	f000 f81a 	bl	80059f4 <_malloc_usable_size_r>
 80059c0:	4284      	cmp	r4, r0
 80059c2:	4606      	mov	r6, r0
 80059c4:	d802      	bhi.n	80059cc <_realloc_r+0x34>
 80059c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80059ca:	d8f4      	bhi.n	80059b6 <_realloc_r+0x1e>
 80059cc:	4621      	mov	r1, r4
 80059ce:	4638      	mov	r0, r7
 80059d0:	f7ff fc3a 	bl	8005248 <_malloc_r>
 80059d4:	4680      	mov	r8, r0
 80059d6:	b908      	cbnz	r0, 80059dc <_realloc_r+0x44>
 80059d8:	4645      	mov	r5, r8
 80059da:	e7ec      	b.n	80059b6 <_realloc_r+0x1e>
 80059dc:	42b4      	cmp	r4, r6
 80059de:	4622      	mov	r2, r4
 80059e0:	4629      	mov	r1, r5
 80059e2:	bf28      	it	cs
 80059e4:	4632      	movcs	r2, r6
 80059e6:	f7ff ffc9 	bl	800597c <memcpy>
 80059ea:	4629      	mov	r1, r5
 80059ec:	4638      	mov	r0, r7
 80059ee:	f7ff fbbf 	bl	8005170 <_free_r>
 80059f2:	e7f1      	b.n	80059d8 <_realloc_r+0x40>

080059f4 <_malloc_usable_size_r>:
 80059f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059f8:	1f18      	subs	r0, r3, #4
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	bfbc      	itt	lt
 80059fe:	580b      	ldrlt	r3, [r1, r0]
 8005a00:	18c0      	addlt	r0, r0, r3
 8005a02:	4770      	bx	lr

08005a04 <_init>:
 8005a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a06:	bf00      	nop
 8005a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a0a:	bc08      	pop	{r3}
 8005a0c:	469e      	mov	lr, r3
 8005a0e:	4770      	bx	lr

08005a10 <_fini>:
 8005a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a12:	bf00      	nop
 8005a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a16:	bc08      	pop	{r3}
 8005a18:	469e      	mov	lr, r3
 8005a1a:	4770      	bx	lr
